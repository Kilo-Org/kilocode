// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`MercuryEnhancedStrategy > Integration tests > should correctly process complete streaming workflow (snapshot test) 1`] = `
{
  "hasNewSuggestions": true,
  "isComplete": true,
  "suggestions": GhostSuggestionsState {
    "files": Map {
      "[object Object]" => GhostSuggestionFile {
        "fileUri": {
          "fsPath": "/constants.ts",
          "path": "/constants.ts",
          "scheme": "file",
        },
        "getGroupType": [Function],
        "groups": [
          [
            {
              "content": "",
              "line": 15,
              "newLine": 15,
              "oldLine": 15,
              "type": "-",
            },
          ],
          [
            {
              "content": "// Additional constants for account linking session",
              "line": 19,
              "newLine": 19,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "const LINKING_COOKIE_NAME = 'account-linking-session';",
              "line": 20,
              "newLine": 20,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "const LINKING_COOKIE_MAX_AGE = 60 * 5; // 5 minutes",
              "line": 21,
              "newLine": 21,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "const jwtSigningAlgorithm = 'HS256';",
              "line": 22,
              "newLine": 22,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "",
              "line": 23,
              "newLine": 23,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "export type AccountLinkingSession = {",
              "line": 24,
              "newLine": 24,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  existingUserId: string;",
              "line": 25,
              "newLine": 25,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  targetProvider: string;",
              "line": 26,
              "newLine": 26,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  createdAt: number;",
              "line": 27,
              "newLine": 27,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "};",
              "line": 28,
              "newLine": 28,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "",
              "line": 29,
              "newLine": 29,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "export async function createAccountLinkingSession(",
              "line": 30,
              "newLine": 30,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  existingUserId: string,",
              "line": 31,
              "newLine": 31,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  targetProvider: string",
              "line": 32,
              "newLine": 32,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "): Promise<void> {",
              "line": 33,
              "newLine": 33,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  const session: AccountLinkingSession = {",
              "line": 34,
              "newLine": 34,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "    existingUserId,",
              "line": 35,
              "newLine": 35,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "    targetProvider,",
              "line": 36,
              "newLine": 36,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "    createdAt: Date.now(),",
              "line": 37,
              "newLine": 37,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  };",
              "line": 38,
              "newLine": 38,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "",
              "line": 39,
              "newLine": 39,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  const token = jwt.sign(session, NEXTAUTH_SECRET, { algorithm: jwtSigningAlgorithm });",
              "line": 40,
              "newLine": 40,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "  cookies().set(LINKING_COOKIE_NAME, token, { maxAge: LINKING_COOKIE_MAX_AGE });",
              "line": 41,
              "newLine": 41,
              "oldLine": 20,
              "type": "+",
            },
            {
              "content": "}",
              "line": 42,
              "newLine": 42,
              "oldLine": 20,
              "type": "+",
            },
          ],
        ],
        "selectedGroup": 0,
        "uri": {
          "fsPath": "/constants.ts",
          "path": "/constants.ts",
          "scheme": "file",
        },
      },
    },
  },
}
`;
