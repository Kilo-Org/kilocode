错误日志:
API call failed with status code 429, {
  "error": {
    "code": 429,
    "message": "Resource has been exhausted (e.g. check quota).",
    "status": "RESOURCE_EXHAUSTED"
  }
}

请求消息:
{
  "tools": [
    {
      "urlContext": {},
      "googleSearch": {}
    }
  ],
  "contents": [
    {
      "role": "user",
      "parts": [
        {
          "text": "<task>\n请分析一下这个项目的代码结构\n</task>"
        },
        {
          "text": "<environment_details>\n# VSCode Visible Files\n\n\n# VSCode Open Tabs\n\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-07T12:29:41.697Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.00\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n\n\n# Current Workspace Directory (/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline) Files\nsrc/services/account/ClineAccountService.ts\nsrc/services/browser/BrowserDiscovery.ts\nsrc/services/browser/BrowserSession.ts\nsrc/services/browser/UrlContentFetcher.ts\nsrc/services/error/ClineError.ts\nsrc/services/error/ErrorService.ts\nsrc/services/glob/list-files.ts\nsrc/services/logging/Logger.ts\nsrc/services/mcp/constants.ts\nsrc/services/mcp/types.ts\nsrc/services/posthog/PostHogClientProvider.ts\nsrc/services/posthog/feature-flags/FeatureFlagsService.ts\nsrc/services/posthog/telemetry/TelemetryService.ts\nsrc/services/ripgrep/index.ts\nsrc/services/search/file-search.ts\nsrc/services/uri/SharedUriHandler.ts\n\n(File list truncated. Use list_files on specific subdirectories if you need to explore further.)\nYou have not created a todo list yet. Create one with `update_todo_list` if your task is complicated or involves multiple steps.\n</environment_details>"
        }
      ]
    },
    {
      "role": "model",
      "parts": [
        {
          "text": "<list_files>\n<path>src/</path>\n<recursive>true</recursive>\n</list_files>"
        }
      ]
    },
    {
      "role": "user",
      "parts": [
        {
          "text": "[list_files for 'src/'] Result:"
        },
        {
          "text": "config.ts\nextension.ts\napi/index.ts\napi/retry.test.ts\napi/retry.ts\napi/transform/gemini-format.ts\napi/transform/mistral-format.ts\napi/transform/o1-format.ts\napi/transform/ollama-format.ts\napi/transform/openai-format.ts\napi/transform/openrouter-stream.ts\napi/transform/r1-format.ts\napi/transform/stream.ts\napi/transform/vscode-lm-format.test.ts\napi/transform/vscode-lm-format.ts\ncore/README.md\ndev/commands/tasks.ts\nexports/cline.d.ts\nexports/index.ts\nexports/README.md\nhosts/host-provider-types.ts\nhosts/host-provider.ts\nhosts/external/AuthHandler.ts\nhosts/external/ExternalDiffviewProvider.ts\nhosts/external/ExternalWebviewProvider.ts\nhosts/external/grpc-types.ts\nhosts/external/host-bridge-client-manager.ts\nhosts/vscode/DecorationController.ts\nhosts/vscode/hostbridge-grpc-handler.ts\nhosts/vscode/hostbridge-grpc-service.ts\nhosts/vscode/VscodeDiffViewProvider.ts\nhosts/vscode/VscodeWebviewProvider.ts\nhosts/vscode/hostbridge/client/host-grpc-client-base.ts\nhosts/vscode/hostbridge/client/host-grpc-client.ts\nhosts/vscode/hostbridge/diff/closeDiff.ts\nhosts/vscode/hostbridge/diff/replaceText.ts\nhosts/vscode/hostbridge/diff/scrollDiff.ts\nhosts/vscode/hostbridge/watch/subscribeToFile.ts\nhosts/vscode/hostbridge/window/getOpenTabs.test.ts\nhosts/vscode/hostbridge/window/getOpenTabs.ts\nhosts/vscode/hostbridge/window/getVisibleTabs.test.ts\nhosts/vscode/hostbridge/window/getVisibleTabs.ts\nhosts/vscode/hostbridge/window/openFile.ts\nhosts/vscode/hostbridge/window/showInputBox.ts\nhosts/vscode/hostbridge/window/showMessage.ts\nhosts/vscode/hostbridge/window/showOpenDialogue.ts\nhosts/vscode/hostbridge/window/showSaveDialog.ts\nhosts/vscode/hostbridge/window/showTextDocument.ts\nhosts/vscode/hostbridge/workspace/getWorkspacePaths.ts\nhosts/vscode/hostbridge/workspace/saveOpenDocumentIfDirty.test.ts\nhosts/vscode/hostbridge/workspace/saveOpenDocumentIfDirty.ts\nintegrations/checkpoints/CheckpointExclusions.ts\nintegrations/checkpoints/CheckpointGitOperations.ts\nintegrations/checkpoints/CheckpointMigration.ts\nintegrations/checkpoints/CheckpointTracker.ts\nintegrations/checkpoints/CheckpointUtils.ts\nintegrations/claude-code/message-filter.ts\nintegrations/claude-code/run.test.ts\nintegrations/claude-code/run.ts\nintegrations/claude-code/types.ts\nintegrations/diagnostics/index.ts\nintegrations/editor/detect-omission.ts\nintegrations/editor/DiffViewProvider.ts\nintegrations/git/commit-message-generator.ts\nintegrations/misc/export-markdown.ts\nintegrations/misc/link-preview.ts\nintegrations/notifications/index.ts\nintegrations/terminal/ansiUtils.ts\nintegrations/terminal/get-latest-output.ts\nintegrations/terminal/TerminalManager.ts\nintegrations/terminal/TerminalProcess.test.ts\nintegrations/terminal/TerminalProcess.ts\nintegrations/terminal/TerminalRegistry.ts\nintegrations/theme/getTheme.ts\nintegrations/theme/default-themes/dark_modern.json\nintegrations/theme/default-themes/dark_plus.json\nintegrations/theme/default-themes/dark_vs.json\nintegrations/theme/default-themes/hc_black.json\nintegrations/theme/default-themes/hc_light.json\nintegrations/theme/default-themes/light_modern.json\nintegrations/theme/default-themes/light_plus.json\nintegrations/theme/default-themes/light_vs.json\nintegrations/workspace/WorkspaceTracker.ts\npackages/execa.ts\nservices/account/ClineAccountService.ts\nservices/auth/AuthService.ts\nservices/auth/AuthServiceMock.ts\nservices/auth/providers/FirebaseAuthProvider.ts\nservices/browser/BrowserDiscovery.ts\nservices/browser/BrowserSession.ts\nservices/browser/UrlContentFetcher.ts\nservices/error/ClineError.ts\nservices/error/ErrorService.ts\nservices/glob/list-files.ts\nservices/logging/Logger.ts\nservices/mcp/constants.ts\nservices/mcp/McpHub.ts\nservices/mcp/schemas.ts\nservices/mcp/types.ts\nservices/posthog/PostHogClientProvider.ts\nservices/posthog/feature-flags/FeatureFlagsService.ts\nservices/posthog/telemetry/TelemetryService.ts\nservices/ripgrep/index.ts\nservices/search/file-search.ts\nservices/test/GitHelper.ts\nservices/test/TestMode.ts\nservices/test/TestServer.ts\nservices/tree-sitter/index.ts\nservices/tree-sitter/languageParser.ts\nservices/tree-sitter/queries/c-sharp.ts\nservices/tree-sitter/queries/c.ts\nservices/tree-sitter/queries/cpp.ts\nservices/tree-sitter/queries/go.ts\nservices/tree-sitter/queries/index.ts\nservices/tree-sitter/queries/java.ts\nservices/tree-sitter/queries/javascript.ts\nservices/tree-sitter/queries/kotlin.ts\nservices/tree-sitter/queries/php.ts\nservices/tree-sitter/queries/python.ts\nservices/tree-sitter/queries/ruby.ts\nservices/tree-sitter/queries/rust.ts\nservices/tree-sitter/queries/swift.ts\nservices/tree-sitter/queries/typescript.ts\nservices/uri/SharedUriHandler.ts\nshared/api.ts\nshared/array.test.ts\nshared/array.ts\nshared/AutoApprovalSettings.ts\nshared/BrowserSettings.ts\nshared/ChatContent.ts\nshared/cline-rules.ts\nshared/ClineAccount.ts\nshared/combineApiRequests.ts\nshared/combineCommandSequences.ts\nshared/context-mentions.ts\nshared/ExtensionMessage.ts\nshared/getApiMetrics.ts\nshared/HistoryItem.ts\nshared/Languages.ts\nshared/mcp.ts\nshared/McpDisplayMode.ts\nshared/TelemetrySetting.ts\nshared/UserInfo.ts\nshared/vsCodeSelectorUtils.ts\nshared/WebviewMessage.ts\nshared/__tests__/context-mentions.test.ts\nshared/proto-conversions/cline-message.ts\nshared/proto-conversions/file/git-commit-conversion.ts\nshared/proto-conversions/file/rule-files-conversion.ts\nshared/proto-conversions/file/search-result-conversion.ts\nshared/proto-conversions/mcp/mcp-server-conversion.ts\nshared/proto-conversions/models/api-configuration-conversion.ts\nshared/proto-conversions/models/auto-approval-settings-conversion.ts\nshared/proto-conversions/models/vscode-lm-models-conversion.ts\nshared/proto-conversions/state/settings-conversion.ts\nshared/proto-conversions/state/telemetry-setting-conversion.ts\nshared/proto-conversions/web/open-graph-conversion.ts\nshared/services/config/posthog-config.ts\nshared/services/feature-flags/feature-flags.ts\nshared/storage/types.ts\nshared/webview/types.ts\nstandalone/cline-core.ts\nstandalone/protobus-service.ts\nstandalone/utils.ts\nstandalone/vscode-context-stubs.ts\nstandalone/vscode-context-utils.ts\nstandalone/vscode-context.ts\ntest/cline-api.test.ts\ntest/extension.test.ts\ntest/host-provider-test-utils.ts\ntest/requires.ts\ntest/shell.test.ts\ntest/vscode-mock.ts\ntest/e2e/auth.test.ts\ntest/e2e/chat.test.ts\ntest/e2e/diff.test.ts\ntest/e2e/README.md\ntest/e2e/utils/build.js\ntest/e2e/utils/global.setup.ts\ntest/e2e/utils/global.teardown.ts\ntest/e2e/utils/helpers.ts\ntest/services/search/file-search.test.ts\nutils/announcements.ts\nutils/cost.test.ts\nutils/cost.ts\nutils/env.ts\nutils/fs.test.ts\nutils/fs.ts\nutils/git.ts\nutils/github-url-utils.ts\nutils/model-utils.ts\nutils/path.test.ts\nutils/path.ts\nutils/shell.ts\nutils/storage.ts\nutils/string.test.ts\nutils/string.ts\nutils/time.ts\nutils/validation.ts\nutils/__tests__/model-utils.test.ts\n\n(File list truncated. Use list_files on specific subdirectories if you need to explore further.)"
        },
        {
          "text": "<environment_details>\n# VSCode Visible Files\n\n\n# VSCode Open Tabs\n\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-07T12:29:48.993Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.00\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\nYou have not created a todo list yet. Create one with `update_todo_list` if your task is complicated or involves multiple steps.\n</environment_details>"
        }
      ]
    },
    {
      "role": "model",
      "parts": [
        {
          "text": "<update_todo_list>\n<todos>\n[-] 概述项目结构\n[ ] 深入分析关键模块\n[ ] 识别核心概念\n[ ] 绘制结构图\n[ ] 生成分析文档并保存\n</todos>\n</update_todo_list>"
        }
      ]
    },
    {
      "role": "user",
      "parts": [
        {
          "text": "[update_todo_list] Result:"
        },
        {
          "text": "Todo list updated successfully."
        },
        {
          "text": "<environment_details>\n# VSCode Visible Files\n\n\n# VSCode Open Tabs\n\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-07T12:29:56.160Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.01\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 概述项目结构 | In Progress |\n| 2 | 深入分析关键模块 | Pending |\n| 3 | 识别核心概念 | Pending |\n| 4 | 绘制结构图 | Pending |\n| 5 | 生成分析文档并保存 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
        }
      ]
    },
    {
      "role": "model",
      "parts": [
        {
          "text": "Failure: I did not provide a response."
        }
      ]
    },
    {
      "role": "user",
      "parts": [
        {
          "text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
        },
        {
          "text": "<environment_details>\n# VSCode Visible Files\n\n\n# VSCode Open Tabs\n\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-07T12:30:02.538Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.01\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 概述项目结构 | In Progress |\n| 2 | 深入分析关键模块 | Pending |\n| 3 | 识别核心概念 | Pending |\n| 4 | 绘制结构图 | Pending |\n| 5 | 生成分析文档并保存 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
        }
      ]
    },
    {
      "role": "model",
      "parts": [
        {
          "text": "Failure: I did not provide a response."
        }
      ]
    },
    {
      "role": "user",
      "parts": [
        {
          "text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
        },
        {
          "text": "<environment_details>\n# VSCode Visible Files\n\n\n# VSCode Open Tabs\n\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-07T12:30:09.409Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.01\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 概述项目结构 | In Progress |\n| 2 | 深入分析关键模块 | Pending |\n| 3 | 识别核心概念 | Pending |\n| 4 | 绘制结构图 | Pending |\n| 5 | 生成分析文档并保存 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
        }
      ]
    }
  ],
  "safetySettings": [
    {
      "category": "HARM_CATEGORY_HARASSMENT",
      "threshold": "OFF"
    },
    {
      "category": "HARM_CATEGORY_HATE_SPEECH",
      "threshold": "OFF"
    },
    {
      "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
      "threshold": "OFF"
    },
    {
      "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
      "threshold": "OFF"
    },
    {
      "category": "HARM_CATEGORY_CIVIC_INTEGRITY",
      "threshold": "BLOCK_NONE"
    }
  ],
  "generationConfig": {
    "topK": 40,
    "topP": 0.9,
    "logprobs": null,
    "temperature": 0,
    "speechConfig": null,
    "stopSequences": null,
    "candidateCount": 1,
    "responseSchema": null,
    "thinkingConfig": {
      "thinkingBudget": 24576,
      "includeThoughts": true
    },
    "maxOutputTokens": 64000,
    "presencePenalty": null,
    "frequencyPenalty": null,
    "responseLogprobs": null,
    "responseMimeType": null,
    "responseModalities": null
  },
  "systemInstruction": {
    "role": "user",
    "parts": [
      {
        "text": "你是一名专业的软件工程师，擅长代码考古和技术文档编写。你的核心目标是细致地分析源代码，以理解其架构、逻辑、控制流和关键算法。你善于为其他开发者创建清晰、简洁、易于理解的解释和图表。你从不编写或修改代码，你唯一的目的是解释和记录已有的代码。\n\n====\n\nMARKDOWN RULES\n\nALL responses MUST show ANY `language construct` OR filename reference as clickable, exactly as [`filename OR language.declaration()`](relative/file/path.ext:line); line is required for `syntax` and optional for filename links. This applies to ALL markdown responses and ALSO those in <attempt_completion>\n\n====\n\nTOOL USE\n\nYou have access to a set of tools that are executed upon the user's approval. You can use one tool per message, and will receive the result of that tool use in the user's response. You use tools step-by-step to accomplish a given task, with each tool use informed by the result of the previous tool use.\n\n# Tool Use Formatting\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the new_task tool:\n\n<new_task>\n<mode>code</mode>\n<message>Implement a new feature for the application.</message>\n</new_task>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Tools\n\n## read_file\nDescription: Request to read the contents of one or more files. The tool outputs line-numbered content (e.g. \"1 | const x = 1\") for easy reference when creating diffs or discussing code. Supports text extraction from PDF and DOCX files, but may not handle other binary files properly.\n\n**IMPORTANT: You can read a maximum of 2 files in a single request.** If you need to read more files, use multiple sequential read_file requests.\n\n\nParameters:\n- args: Contains one or more file elements, where each file contains:\n  - path: (required) File path (relative to workspace directory /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline)\n  \n\nUsage:\n<read_file>\n<args>\n  <file>\n    <path>path/to/file</path>\n    \n  </file>\n</args>\n</read_file>\n\nExamples:\n\n1. Reading a single file:\n<read_file>\n<args>\n  <file>\n    <path>src/app.ts</path>\n    \n  </file>\n</args>\n</read_file>\n\n2. Reading multiple files (within the 2-file limit):\n<read_file>\n<args>\n  <file>\n    <path>src/app.ts</path>\n    \n  </file>\n  <file>\n    <path>src/utils.ts</path>\n    \n  </file>\n</args>\n</read_file>\n\n3. Reading an entire file:\n<read_file>\n<args>\n  <file>\n    <path>config.json</path>\n  </file>\n</args>\n</read_file>\n\nIMPORTANT: You MUST use this Efficient Reading Strategy:\n- You MUST read all related files and implementations together in a single operation (up to 2 files at once)\n- You MUST obtain all necessary context before proceeding with changes\n\n- When you need to read more than 2 files, prioritize the most critical files first, then use subsequent read_file requests for additional files\n\n## fetch_instructions\nDescription: Request to fetch instructions to perform a task\nParameters:\n- task: (required) The task to get instructions for.  This can take the following values:\n  create_mcp_server\n  create_mode\n\nExample: Requesting instructions to create an MCP Server\n\n<fetch_instructions>\n<task>create_mcp_server</task>\n</fetch_instructions>\n\n## search_files\nDescription: Request to perform a regex search across files in a specified directory, providing context-rich results. This tool searches for patterns or specific content across multiple files, displaying each match with encapsulating context.\nParameters:\n- path: (required) The path of the directory to search in (relative to the current workspace directory /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline). This directory will be recursively searched.\n- regex: (required) The regular expression pattern to search for. Uses Rust regex syntax.\n- file_pattern: (optional) Glob pattern to filter files (e.g., '*.ts' for TypeScript files). If not provided, it will search all files (*).\nUsage:\n<search_files>\n<path>Directory path here</path>\n<regex>Your regex pattern here</regex>\n<file_pattern>file pattern here (optional)</file_pattern>\n</search_files>\n\nExample: Requesting to search for all .ts files in the current directory\n<search_files>\n<path>.</path>\n<regex>.*</regex>\n<file_pattern>*.ts</file_pattern>\n</search_files>\n\n## list_files\nDescription: Request to list files and directories within the specified directory. If recursive is true, it will list all files and directories recursively. If recursive is false or not provided, it will only list the top-level contents. Do not use this tool to confirm the existence of files you may have created, as the user will let you know if the files were created successfully or not.\nParameters:\n- path: (required) The path of the directory to list contents for (relative to the current workspace directory /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline)\n- recursive: (optional) Whether to list files recursively. Use true for recursive listing, false or omit for top-level only.\nUsage:\n<list_files>\n<path>Directory path here</path>\n<recursive>true or false (optional)</recursive>\n</list_files>\n\nExample: Requesting to list all files in the current directory\n<list_files>\n<path>.</path>\n<recursive>false</recursive>\n</list_files>\n\n## list_code_definition_names\nDescription: Request to list definition names (classes, functions, methods, etc.) from source code. This tool can analyze either a single file or all files at the top level of a specified directory. It provides insights into the codebase structure and important constructs, encapsulating high-level concepts and relationships that are crucial for understanding the overall architecture.\nParameters:\n- path: (required) The path of the file or directory (relative to the current working directory /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline) to analyze. When given a directory, it lists definitions from all top-level source files.\nUsage:\n<list_code_definition_names>\n<path>Directory path here</path>\n</list_code_definition_names>\n\nExamples:\n\n1. List definitions from a specific file:\n<list_code_definition_names>\n<path>src/main.ts</path>\n</list_code_definition_names>\n\n2. List definitions from all files in a directory:\n<list_code_definition_names>\n<path>src/</path>\n</list_code_definition_names>\n\n## codebase_search\nDescription: Find files most relevant to the search query.\nThis is a semantic search tool, so the query should ask for something semantically matching what is needed.\nIf it makes sense to only search in a particular directory, please specify it in the path parameter.\nUnless there is a clear reason to use your own search query, please just reuse the user's exact query with their wording.\nTheir exact wording/phrasing can often be helpful for the semantic search query. Keeping the same exact question format can also be helpful.\nIMPORTANT: Queries MUST be in English. Translate non-English queries before searching.\nParameters:\n- query: (required) The search query to find relevant code. You should reuse the user's exact query/most recent message with their wording unless there is a clear reason not to.\n- path: (optional) The path to the directory to search in relative to the current working directory. This parameter should only be a directory path, file paths are not supported. Defaults to the current working directory.\nUsage:\n<codebase_search>\n<query>Your natural language query here</query>\n<path>Path to the directory to search in (optional)</path>\n</codebase_search>\n\nExample: Searching for functions related to user authentication\n<codebase_search>\n<query>User login and password hashing</query>\n<path>/path/to/directory</path>\n</codebase_search>\n\n\n## browser_action\nDescription: Request to interact with a Puppeteer-controlled browser. Every action, except `close`, will be responded to with a screenshot of the browser's current state, along with any new console logs. You may only perform one browser action per message, and wait for the user's response including a screenshot and logs to determine the next action.\n- The sequence of actions **must always start with** launching the browser at a URL, and **must always end with** closing the browser. If you need to visit a new URL that is not possible to navigate to from the current webpage, you must first close the browser, then launch again at the new URL.\n- While the browser is active, only the `browser_action` tool can be used. No other tools should be called during this time. You may proceed to use other tools only after closing the browser. For example if you run into an error and need to fix a file, you must close the browser, then use other tools to make the necessary changes, then re-launch the browser to verify the result.\n- The browser window has a resolution of **900x600** pixels. When performing any click actions, ensure the coordinates are within this resolution range.\n- Before clicking on any elements such as icons, links, or buttons, you must consult the provided screenshot of the page to determine the coordinates of the element. The click should be targeted at the **center of the element**, not on its edges.\nParameters:\n- action: (required) The action to perform. The available actions are:\n    * launch: Launch a new Puppeteer-controlled browser instance at the specified URL. This **must always be the first action**.\n        - Use with the `url` parameter to provide the URL.\n        - Ensure the URL is valid and includes the appropriate protocol (e.g. http://localhost:3000/page, file:///path/to/file.html, etc.)\n    * hover: Move the cursor to a specific x,y coordinate.\n        - Use with the `coordinate` parameter to specify the location.\n        - Always move to the center of an element (icon, button, link, etc.) based on coordinates derived from a screenshot.\n    * click: Click at a specific x,y coordinate.\n        - Use with the `coordinate` parameter to specify the location.\n        - Always click in the center of an element (icon, button, link, etc.) based on coordinates derived from a screenshot.\n    * type: Type a string of text on the keyboard. You might use this after clicking on a text field to input text.\n        - Use with the `text` parameter to provide the string to type.\n    * resize: Resize the viewport to a specific w,h size.\n        - Use with the `size` parameter to specify the new size.\n    * scroll_down: Scroll down the page by one page height.\n    * scroll_up: Scroll up the page by one page height.\n    * close: Close the Puppeteer-controlled browser instance. This **must always be the final browser action**.\n        - Example: `<action>close</action>`\n- url: (optional) Use this for providing the URL for the `launch` action.\n    * Example: <url>https://example.com</url>\n- coordinate: (optional) The X and Y coordinates for the `click` and `hover` actions. Coordinates should be within the **900x600** resolution.\n    * Example: <coordinate>450,300</coordinate>\n- size: (optional) The width and height for the `resize` action.\n    * Example: <size>1280,720</size>\n- text: (optional) Use this for providing the text for the `type` action.\n    * Example: <text>Hello, world!</text>\nUsage:\n<browser_action>\n<action>Action to perform (e.g., launch, click, type, scroll_down, scroll_up, close)</action>\n<url>URL to launch the browser at (optional)</url>\n<coordinate>x,y coordinates (optional)</coordinate>\n<text>Text to type (optional)</text>\n</browser_action>\n\nExample: Requesting to launch a browser at https://example.com\n<browser_action>\n<action>launch</action>\n<url>https://example.com</url>\n</browser_action>\n\nExample: Requesting to click on the element at coordinates 450,300\n<browser_action>\n<action>click</action>\n<coordinate>450,300</coordinate>\n</browser_action>\n\n## ask_followup_question\nDescription: Ask the user a question to gather additional information needed to complete the task. This tool should be used when you encounter ambiguities, need clarification, or require more details to proceed effectively. It allows for interactive problem-solving by enabling direct communication with the user. Use this tool judiciously to maintain a balance between gathering necessary information and avoiding excessive back-and-forth.\nParameters:\n- question: (required) The question to ask the user. This should be a clear, specific question that addresses the information you need.\n- follow_up: (required) A list of 2-4 suggested answers that logically follow from the question, ordered by priority or logical sequence. Each suggestion must:\n  1. Be provided in its own <suggest> tag\n  2. Be specific, actionable, and directly related to the completed task\n  3. Be a complete answer to the question - the user should not need to provide additional information or fill in any missing details. DO NOT include placeholders with brackets or parentheses.\n  4. Optionally include a mode attribute to switch to a specific mode when the suggestion is selected: <suggest mode=\"mode-slug\">suggestion text</suggest>\n     - When using the mode attribute, focus the suggestion text on the action to be taken rather than mentioning the mode switch, as the mode change is handled automatically and indicated by a visual badge\nUsage:\n<ask_followup_question>\n<question>Your question here</question>\n<follow_up>\n<suggest>\nYour suggested answer here\n</suggest>\n<suggest mode=\"code\">\nImplement the solution\n</suggest>\n</follow_up>\n</ask_followup_question>\n\nExample: Requesting to ask the user for the path to the frontend-config.json file\n<ask_followup_question>\n<question>What is the path to the frontend-config.json file?</question>\n<follow_up>\n<suggest>./src/frontend-config.json</suggest>\n<suggest>./config/frontend-config.json</suggest>\n<suggest>./frontend-config.json</suggest>\n</follow_up>\n</ask_followup_question>\n\nExample: Asking a question with mode switching options\n<ask_followup_question>\n<question>How would you like to proceed with this task?</question>\n<follow_up>\n<suggest mode=\"code\">Start implementing the solution</suggest>\n<suggest mode=\"architect\">Plan the architecture first</suggest>\n<suggest>Continue with more details</suggest>\n</follow_up>\n</ask_followup_question>\n\n## attempt_completion\nDescription: After each tool use, the user will respond with the result of that tool use, i.e. if it succeeded or failed, along with any reasons for failure. Once you've received the results of tool uses and can confirm that the task is complete, use this tool to present the result of your work to the user. The user may respond with feedback if they are not satisfied with the result, which you can use to make improvements and try again.\nIMPORTANT NOTE: This tool CANNOT be used until you've confirmed from the user that any previous tool uses were successful. Failure to do so will result in code corruption and system failure. Before using this tool, you must ask yourself in <thinking></thinking> tags if you've confirmed from the user that any previous tool uses were successful. If not, then DO NOT use this tool.\nParameters:\n- result: (required) The result of the task. Formulate this result in a way that is final and does not require further input from the user. Don't end your result with questions or offers for further assistance.\nUsage:\n<attempt_completion>\n<result>\nYour final result description here\n</result>\n</attempt_completion>\n\nExample: Requesting to attempt completion with a result\n<attempt_completion>\n<result>\nI've updated the CSS\n</result>\n</attempt_completion>\n\n## switch_mode\nDescription: Request to switch to a different mode. This tool allows modes to request switching to another mode when needed, such as switching to Code mode to make code changes. The user must approve the mode switch.\nParameters:\n- mode_slug: (required) The slug of the mode to switch to (e.g., \"code\", \"ask\", \"architect\")\n- reason: (optional) The reason for switching modes\nUsage:\n<switch_mode>\n<mode_slug>Mode slug here</mode_slug>\n<reason>Reason for switching here</reason>\n</switch_mode>\n\nExample: Requesting to switch to code mode\n<switch_mode>\n<mode_slug>code</mode_slug>\n<reason>Need to make code changes</reason>\n</switch_mode>\n\n## new_task\nDescription: This will let you create a new task instance in the chosen mode using your provided message.\n\nParameters:\n- mode: (required) The slug of the mode to start the new task in (e.g., \"code\", \"debug\", \"architect\").\n- message: (required) The initial user message or instructions for this new task.\n\nUsage:\n<new_task>\n<mode>your-mode-slug-here</mode>\n<message>Your initial instructions here</message>\n</new_task>\n\nExample:\n<new_task>\n<mode>code</mode>\n<message>Implement a new feature for the application.</message>\n</new_task>\n\n\n## update_todo_list\n\n**Description:**\nReplace the entire TODO list with an updated checklist reflecting the current state. Always provide the full list; the system will overwrite the previous one. This tool is designed for step-by-step task tracking, allowing you to confirm completion of each step before updating, update multiple task statuses at once (e.g., mark one as completed and start the next), and dynamically add new todos discovered during long or complex tasks.\n\n**Checklist Format:**\n- Use a single-level markdown checklist (no nesting or subtasks).\n- List todos in the intended execution order.\n- Status options:\n\t - [ ] Task description (pending)\n\t - [x] Task description (completed)\n\t - [-] Task description (in progress)\n\n**Status Rules:**\n- [ ] = pending (not started)\n- [x] = completed (fully finished, no unresolved issues)\n- [-] = in_progress (currently being worked on)\n\n**Core Principles:**\n- Before updating, always confirm which todos have been completed since the last update.\n- You may update multiple statuses in a single update (e.g., mark the previous as completed and the next as in progress).\n- When a new actionable item is discovered during a long or complex task, add it to the todo list immediately.\n- Do not remove any unfinished todos unless explicitly instructed.\n- Always retain all unfinished tasks, updating their status as needed.\n- Only mark a task as completed when it is fully accomplished (no partials, no unresolved dependencies).\n- If a task is blocked, keep it as in_progress and add a new todo describing what needs to be resolved.\n- Remove tasks only if they are no longer relevant or if the user requests deletion.\n\n**Usage Example:**\n<update_todo_list>\n<todos>\n[x] Analyze requirements\n[x] Design architecture\n[-] Implement core logic\n[ ] Write tests\n[ ] Update documentation\n</todos>\n</update_todo_list>\n\n*After completing \"Implement core logic\" and starting \"Write tests\":*\n<update_todo_list>\n<todos>\n[x] Analyze requirements\n[x] Design architecture\n[x] Implement core logic\n[-] Write tests\n[ ] Update documentation\n[ ] Add performance benchmarks\n</todos>\n</update_todo_list>\n\n**When to Use:**\n- The task is complicated or involves multiple steps or requires ongoing tracking.\n- You need to update the status of several todos at once.\n- New actionable items are discovered during task execution.\n- The user requests a todo list or provides multiple tasks.\n- The task is complex and benefits from clear, stepwise progress tracking.\n\n**When NOT to Use:**\n- There is only a single, trivial task.\n- The task can be completed in one or two simple steps.\n- The request is purely conversational or informational.\n\n**Task Management Guidelines:**\n- Mark task as completed immediately after all work of the current task is done.\n- Start the next task by marking it as in_progress.\n- Add new todos as soon as they are identified.\n- Use clear, descriptive task names.\n\n\n# Tool Use Guidelines\n\n1. In <thinking> tags, assess what information you already have and what information you need to proceed with the task.\n2. **CRITICAL: For ANY exploration of code you haven't examined yet in this conversation, you MUST use the `codebase_search` tool FIRST before any other search or file exploration tools.** This applies throughout the entire conversation, not just at the beginning. The codebase_search tool uses semantic search to find relevant code based on meaning rather than just keywords, making it far more effective than regex-based search_files for understanding implementations. Even if you've already explored some code, any new area of exploration requires codebase_search first.\n3. Choose the most appropriate tool based on the task and the tool descriptions provided. After using codebase_search for initial exploration of any new code area, you may then use more specific tools like search_files (for regex patterns), list_files, or read_file for detailed examination. For example, using the list_files tool is more effective than running a command like `ls` in the terminal. It's critical that you think about each available tool and use the one that best fits the current step in the task.\n4. If multiple actions are needed, use one tool at a time per message to accomplish the task iteratively, with each tool use being informed by the result of the previous tool use. Do not assume the outcome of any tool use. Each step must be informed by the previous step's result.\n5. Formulate your tool use using the XML format specified for each tool.\n6. After each tool use, the user will respond with the result of that tool use. This result will provide you with the necessary information to continue your task or make further decisions. This response may include:\n  - Information about whether the tool succeeded or failed, along with any reasons for failure.\n  - Linter errors that may have arisen due to the changes you made, which you'll need to address.\n  - New terminal output in reaction to the changes, which you may need to consider or act upon.\n  - Any other relevant feedback or information related to the tool use.\n7. ALWAYS wait for user confirmation after each tool use before proceeding. Never assume the success of a tool use without explicit confirmation of the result from the user.\n\nIt is crucial to proceed step-by-step, waiting for the user's message after each tool use before moving forward with the task. This approach allows you to:\n1. Confirm the success of each step before proceeding.\n2. Address any issues or errors that arise immediately.\n3. Adapt your approach based on new information or unexpected results.\n4. Ensure that each action builds correctly on the previous ones.\n\nBy waiting for and carefully considering the user's response after each tool use, you can react accordingly and make informed decisions about how to proceed with the task. This iterative process helps ensure the overall success and accuracy of your work.\n\n\n\n====\n\nCAPABILITIES\n\n- You have access to tools that let you execute CLI commands on the user's computer, list files, view source code definitions, regex search, use the browser, read and write files, and ask follow-up questions. These tools help you effectively accomplish a wide range of tasks, such as writing code, making edits or improvements to existing files, understanding the current state of a project, performing system operations, and much more.\n- When the user initially gives you a task, a recursive list of all filepaths in the current workspace directory ('/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline') will be included in environment_details. This provides an overview of the project's file structure, offering key insights into the project from directory/file names (how developers conceptualize and organize their code) and file extensions (the language used). This can also guide decision-making on which files to explore further. If you need to further explore directories such as outside the current workspace directory, you can use the list_files tool. If you pass 'true' for the recursive parameter, it will list files recursively. Otherwise, it will list files at the top level, which is better suited for generic directories where you don't necessarily need the nested structure, like the Desktop.\n- You can use the `codebase_search` tool to perform semantic searches across your entire codebase. This tool is powerful for finding functionally relevant code, even if you don't know the exact keywords or file names. It's particularly useful for understanding how features are implemented across multiple files, discovering usages of a particular API, or finding code examples related to a concept. This capability relies on a pre-built index of your code.\n- You can use search_files to perform regex searches across files in a specified directory, outputting context-rich results that include surrounding lines. This is particularly useful for understanding code patterns, finding specific implementations, or identifying areas that need refactoring.\n- You can use the list_code_definition_names tool to get an overview of source code definitions for all files at the top level of a specified directory. This can be particularly useful when you need to understand the broader context and relationships between certain parts of the code. You may need to call this tool multiple times to understand various parts of the codebase related to the task.\n    - For example, when asked to make edits or improvements you might analyze the file structure in the initial environment_details to get an overview of the project, then use list_code_definition_names to get further insight using source code definitions for files located in relevant directories, then read_file to examine the contents of relevant files, analyze the code and suggest improvements or make necessary edits, then use the apply_diff or write_to_file tool to apply the changes. If you refactored code that could affect other parts of the codebase, you could use search_files to ensure you update other files as needed.\n- You can use the execute_command tool to run commands on the user's computer whenever you feel it can help accomplish the user's task. When you need to execute a CLI command, you must provide a clear explanation of what the command does. Prefer to execute complex CLI commands over creating executable scripts, since they are more flexible and easier to run. Interactive and long-running commands are allowed, since the commands are run in the user's VSCode terminal. The user may keep commands running in the background and you will be kept updated on their status along the way. Each command you execute is run in a new terminal instance.\n- You can use the browser_action tool to interact with websites (including html files and locally running development servers) through a Puppeteer-controlled browser when you feel it is necessary in accomplishing the user's task. This tool is particularly useful for web development tasks as it allows you to launch a browser, navigate to pages, interact with elements through clicks and keyboard input, and capture the results through screenshots and console logs. This tool may be useful at key stages of web development tasks-such as after implementing new features, making substantial changes, when troubleshooting issues, or to verify the result of your work. You can analyze the provided screenshots to ensure correct rendering or identify errors, and review console logs for runtime issues.\n  - For example, if asked to add a component to a react website, you might create the necessary files, use execute_command to run the site locally, then use browser_action to launch the browser, navigate to the local server, and verify the component renders & functions correctly before closing the browser.\n\n====\n\nMODES\n\n- These are the currently available modes:\n  * \"Architect\" mode (architect) - Use this mode when you need to plan, design, or strategize before implementation. Perfect for breaking down complex problems, creating technical specifications, designing system architecture, or brainstorming solutions before coding.\n  * \"Code\" mode (code) - Use this mode when you need to write, modify, or refactor code. Ideal for implementing features, fixing bugs, creating new files, or making code improvements across any programming language or framework.\n  * \"Ask\" mode (ask) - Use this mode when you need explanations, documentation, or answers to technical questions. Best for understanding concepts, analyzing existing code, getting recommendations, or learning about technologies without making changes.\n  * \"Debug\" mode (debug) - Use this mode when you're troubleshooting issues, investigating errors, or diagnosing problems. Specialized in systematic debugging, adding logging, analyzing stack traces, and identifying root causes before applying fixes.\n  * \"Orchestrator\" mode (orchestrator) - Use this mode for complex, multi-step projects that require coordination across different specialties. Ideal when you need to break down large tasks into subtasks, manage workflows, or coordinate work that spans multiple domains or expertise areas.\n  * \"代码分析\" mode (code-analysis) - - 当需要理解一个复杂或陌生的代码库时。\n    - 在进行大型重构前，用于存档和理解现有实现。\n    - 为新团队成员提供项目代码的入门培训材料。\n    - 为关键模块或核心功能生成详细的技术设计文档。\nIf the user asks you to create or edit a new mode for this project, you should read the instructions by using the fetch_instructions tool, like this:\n<fetch_instructions>\n<task>create_mode</task>\n</fetch_instructions>\n\n\n====\n\nRULES\n\n- The project base directory is: /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline\n- All file paths must be relative to this directory. However, commands may change directories in terminals, so respect working directory specified by the response to <execute_command>.\n- You cannot `cd` into a different directory to complete a task. You are stuck operating from '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline', so be sure to pass in the correct 'path' parameter when using tools that require a path.\n- Do not use the ~ character or $HOME to refer to the home directory.\n- Before using the execute_command tool, you must first think about the SYSTEM INFORMATION context provided to understand the user's environment and tailor your commands to ensure they are compatible with their system. You must also consider if the command you need to run should be executed in a specific directory outside of the current working directory '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline', and if so prepend with `cd`'ing into that directory && then executing the command (as one command since you are stuck operating from '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline'). For example, if you needed to run `npm install` in a project outside of '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline', you would need to prepend with a `cd` i.e. pseudocode for this would be `cd (path to project) && (command, in this case npm install)`.\n- **CRITICAL: For ANY exploration of code you haven't examined yet in this conversation, you MUST use the `codebase_search` tool FIRST before using search_files or other file exploration tools.** This requirement applies throughout the entire conversation, not just when starting a task. The codebase_search tool uses semantic search to find relevant code based on meaning, not just keywords, making it much more effective for understanding how features are implemented. Even if you've already explored some parts of the codebase, any new area or functionality you need to understand requires using codebase_search first.\n- When using the search_files tool (after codebase_search), craft your regex patterns carefully to balance specificity and flexibility. Based on the user's task you may use it to find code patterns, TODO comments, function definitions, or any text-based information across the project. The results include context, so analyze the surrounding code to better understand the matches. Leverage the search_files tool in combination with other tools for more comprehensive analysis. For example, use it to find specific code patterns, then use read_file to examine the full context of interesting matches before using apply_diff or write_to_file to make informed changes.\n- When creating a new project (such as an app, website, or any software project), organize all new files within a dedicated project directory unless the user specifies otherwise. Use appropriate file paths when writing files, as the write_to_file tool will automatically create any necessary directories. Structure the project logically, adhering to best practices for the specific type of project being created. Unless otherwise specified, new projects should be easily run without additional setup, for example most projects can be built in HTML, CSS, and JavaScript - which you can open in a browser.\n- For editing files, you have access to these tools: apply_diff (for surgical edits - targeted changes to specific lines or functions), write_to_file (for creating new files or complete file rewrites), insert_content (for adding lines to files), search_and_replace (for finding and replacing individual pieces of text).\n- The insert_content tool adds lines of text to files at a specific line number, such as adding a new function to a JavaScript file or inserting a new route in a Python file. Use line number 0 to append at the end of the file, or any positive number to insert before that line.\n- The search_and_replace tool finds and replaces text or regex in files. This tool allows you to search for a specific regex pattern or text and replace it with another value. Be cautious when using this tool to ensure you are replacing the correct text. It can support multiple operations at once.\n- You should always prefer using other editing tools over write_to_file when making changes to existing files since write_to_file is much slower and cannot handle large files.\n- When using the write_to_file tool to modify a file, use the tool directly with the desired content. You do not need to display the content before using the tool. ALWAYS provide the COMPLETE file content in your response. This is NON-NEGOTIABLE. Partial updates or placeholders like '// rest of code unchanged' are STRICTLY FORBIDDEN. You MUST include ALL parts of the file, even if they haven't been modified. Failure to do so will result in incomplete or broken code, severely impacting the user's project.\n- Some modes have restrictions on which files they can edit. If you attempt to edit a restricted file, the operation will be rejected with a FileRestrictionError that will specify which file patterns are allowed for the current mode.\n- Be sure to consider the type of project (e.g. Python, JavaScript, web application) when determining the appropriate structure and files to include. Also consider what files may be most relevant to accomplishing the task, for example looking at a project's manifest file would help you understand the project's dependencies, which you could incorporate into any code you write.\n  * For example, in architect mode trying to edit app.js would be rejected because architect mode can only edit files matching \"\\.md$\"\n- When making changes to code, always consider the context in which the code is being used. Ensure that your changes are compatible with the existing codebase and that they follow the project's coding standards and best practices.\n- Do not ask for more information than necessary. Use the tools provided to accomplish the user's request efficiently and effectively. When you've completed your task, you must use the attempt_completion tool to present the result to the user. The user may provide feedback, which you can use to make improvements and try again.\n- You are only allowed to ask the user questions using the ask_followup_question tool. Use this tool only when you need additional details to complete a task, and be sure to use a clear and concise question that will help you move forward with the task. When you ask a question, provide the user with 2-4 suggested answers based on your question so they don't need to do so much typing. The suggestions should be specific, actionable, and directly related to the completed task. They should be ordered by priority or logical sequence. However if you can use the available tools to avoid having to ask the user questions, you should do so. For example, if the user mentions a file that may be in an outside directory like the Desktop, you should use the list_files tool to list the files in the Desktop and check if the file they are talking about is there, rather than asking the user to provide the file path themselves.\n- When executing commands, if you don't see the expected output, assume the terminal executed the command successfully and proceed with the task. The user's terminal may be unable to stream the output back properly. If you absolutely need to see the actual terminal output, use the ask_followup_question tool to request the user to copy and paste it back to you.\n- The user may provide a file's contents directly in their message, in which case you shouldn't use the read_file tool to get the file contents again since you already have it.\n- Your goal is to try to accomplish the user's task, NOT engage in a back and forth conversation.\n- The user may ask generic non-development tasks, such as \"what's the latest news\" or \"look up the weather in San Diego\", in which case you might use the browser_action tool to complete the task if it makes sense to do so, rather than trying to create a website or using curl to answer the question. However, if an available MCP server tool or resource can be used instead, you should prefer to use it over browser_action.\n- NEVER end attempt_completion result with a question or request to engage in further conversation! Formulate the end of your result in a way that is final and does not require further input from the user.\n- You are STRICTLY FORBIDDEN from starting your messages with \"Great\", \"Certainly\", \"Okay\", \"Sure\". You should NOT be conversational in your responses, but rather direct and to the point. For example you should NOT say \"Great, I've updated the CSS\" but instead something like \"I've updated the CSS\". It is important you be clear and technical in your messages.\n- When presented with images, utilize your vision capabilities to thoroughly examine them and extract meaningful information. Incorporate these insights into your thought process as you accomplish the user's task.\n- At the end of each user message, you will automatically receive environment_details. This information is not written by the user themselves, but is auto-generated to provide potentially relevant context about the project structure and environment. While this information can be valuable for understanding the project context, do not treat it as a direct part of the user's request or response. Use it to inform your actions and decisions, but don't assume the user is explicitly asking about or referring to this information unless they clearly do so in their message. When using environment_details, explain your actions clearly to ensure the user understands, as they may not be aware of these details.\n- Before executing commands, check the \"Actively Running Terminals\" section in environment_details. If present, consider how these active processes might impact your task. For example, if a local development server is already running, you wouldn't need to start it again. If no active terminals are listed, proceed with command execution as normal.\n- MCP operations should be used one at a time, similar to other tool usage. Wait for confirmation of success before proceeding with additional operations.\n- It is critical you wait for the user's response after each tool use, in order to confirm the success of the tool use. For example, if asked to make a todo app, you would create a file, wait for the user's response it was created successfully, then create another file if needed, wait for the user's response it was created successfully, etc. Then if you want to test your work, you might use browser_action to launch the site, wait for the user's response confirming the site was launched along with a screenshot, then perhaps e.g., click a button to test functionality if needed, wait for the user's response confirming the button was clicked along with a screenshot of the new state, before finally closing the browser.\n\n====\n\nSYSTEM INFORMATION\n\nOperating System: macOS Sequoia\nDefault Shell: zsh\nHome Directory: /Users/chenfengqing\nCurrent Workspace Directory: /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/cline\n\nThe Current Workspace Directory is the active VS Code project directory, and is therefore the default directory for all tool operations. New terminals will be created in the current workspace directory, however if you change directories in a terminal it will then have a different working directory; changing directories in a terminal does not modify the workspace directory, because you do not have access to change the workspace directory. When the user initially gives you a task, a recursive list of all filepaths in the current workspace directory ('/test/path') will be included in environment_details. This provides an overview of the project's file structure, offering key insights into the project from directory/file names (how developers conceptualize and organize their code) and file extensions (the language used). This can also guide decision-making on which files to explore further. If you need to further explore directories such as outside the current workspace directory, you can use the list_files tool. If you pass 'true' for the recursive parameter, it will list files recursively. Otherwise, it will list files at the top level, which is better suited for generic directories where you don't necessarily need the nested structure, like the Desktop.\n\n====\n\nOBJECTIVE\n\nYou accomplish a given task iteratively, breaking it down into clear steps and working through them methodically.\n\n1. Analyze the user's task and set clear, achievable goals to accomplish it. Prioritize these goals in a logical order.\n2. Work through these goals sequentially, utilizing available tools one at a time as necessary. Each goal should correspond to a distinct step in your problem-solving process. You will be informed on the work completed and what's remaining as you go.\n3. Remember, you have extensive capabilities with access to a wide range of tools that can be used in powerful and clever ways as necessary to accomplish each goal. Before calling a tool, do some analysis within <thinking></thinking> tags. First, for ANY exploration of code you haven't examined yet in this conversation, you MUST use the `codebase_search` tool to search for relevant code based on the task's intent BEFORE using any other search or file exploration tools. This applies throughout the entire task, not just at the beginning - whenever you need to explore a new area of code, codebase_search must come first. Then, analyze the file structure provided in environment_details to gain context and insights for proceeding effectively. Next, think about which of the provided tools is the most relevant tool to accomplish the user's task. Go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool use. BUT, if one of the values for a required parameter is missing, DO NOT invoke the tool (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters using the ask_followup_question tool. DO NOT ask for more information on optional parameters if it is not provided.\n4. Once you've completed the user's task, you must use the attempt_completion tool to present the result of the task to the user.\n5. The user may provide feedback, which you can use to make improvements and try again. But DO NOT continue in pointless back and forth conversations, i.e. don't end your responses with questions or offers for further assistance.\n\n\n====\n\nUSER'S CUSTOM INSTRUCTIONS\n\nThe following additional instructions are provided by the user, and should be followed to the best of your ability without interfering with the TOOL USE guidelines.\n\nLanguage Preference:\nYou should always speak and think in the \"简体中文\" (zh-CN) language unless the user gives you instructions below to do otherwise.\n\nMode-specific Instructions:\n# 代码分析模式专属规则\n\n1.  **任务启动与代码阅读:**\n    -   首要任务是理解分析范围。如果用户未指定具体文件，请使用 `list_files` 工具来勘察项目结构。\n    -   使用 `read_file` 工具仔细阅读用户指定或与任务相关的核心源代码文件。\n\n2.  **核心代码分析:**\n    -   **代码结构:** 分析代码的整体组织方式，包括模块、类、函数和它们之间的关系。\n    -   **代码逻辑:** 详细梳理核心功能和复杂算法的业务逻辑与执行流程。\n    -   **关键节点解释:** 识别代码中的难点、关键决策点或重要的数据转换，并进行重点解释。\n\n3.  **图表辅助分析 (Mermaid):**\n    -   对于复杂的业务逻辑或函数调用链，必须使用 **Mermaid** 绘制`流程图` (graph TD) 或`时序图` (sequenceDiagram)。\n    -   图表节点应清晰简洁，使用 `[\"节点描述\"]` 格式，并可包含关键变量或状态。\n    -   如果时序图涉及多个文件，必须明确标出参与者（Participant）对应的文件名。\n    -   在图表下方，必须对图表的关键步骤进行详细的文字解释，并可附上对应的代码片段作为参考。\n\n4.  **生成分析文档:**\n    -   所有分析结果最终需要汇总成一份完整的 Markdown 格式的分析文档。\n    -   文档结构应遵循您在 `.rules/代码解释规则.md` 中定义的规范。\n    -   分析完成后，使用 `write_to_file` 工具将文档保存到 `jnpf-web-vue3-docs/docs/` 目录下，并根据分析主题进行命名（例如 `登录功能代码分析.md`）。\n\n5.  **模式定位:**\n    -   此模式严格禁止任何形式的代码修改。其最终产出物是 **分析文档**。\n    -   如果分析过程中发现需要修改代码的潜在问题（如BUG或优化点），应在文档中明确指出，并建议用户切换到\"Code\"模式来执行修改。\n\nRules:\n\n# Rules from /Users/chenfengqing/.kilocode/rules/.kilocode/mcp.json:\n{\n    \"mcpServers\": {\n        \"zen\": {\n            \"type\": \"stdio\",\n            \"command\": \"/Users/chenfengqing/docker/zen-mcp-server/zen-mcp-server/.zen_venv/bin/python\",\n            \"args\": [\n                \"/Users/chenfengqing/docker/zen-mcp-server/zen-mcp-server/server.py\"\n            ],\n            \"env\": {},\n            \"alwaysAllow\": [\n                \"thinkdeep\"\n            ]\n        }\n    }\n}"
      }
    ]
  }
}

模型名称:
gemini-2.5-flash


请求时间:
2025/08/07 12:30:15


关闭