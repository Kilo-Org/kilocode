{
	"tools": [
		{
			"urlContext": {},
			"googleSearch": {}
		}
	],
	"contents": [
		{
			"role": "user",
			"parts": [
				{
					"text": "<task>\n请分析kilo，在architect模式下，点击发送信息，与大模型整个交互的全过程，调用链\n</task>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\n.kilocode/system-prompt-code-analysis\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:17:21.785Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.00\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n\n\n# Current Workspace Directory (/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git) Files\nNo files found.\nYou have not created a todo list yet. Create one with `update_todo_list` if your task is complicated or involves multiple steps.\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "Failure: I did not provide a response."
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\n.kilocode/system-prompt-code-analysis\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:17:27.113Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.00\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\nYou have not created a todo list yet. Create one with `update_todo_list` if your task is complicated or involves multiple steps.\n</environment_details>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\n.kilocode/system-prompt-code-analysis\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:18:34.904Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.00\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n\n\n# Current Workspace Directory (/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git) Files\nNo files found.\nYou have not created a todo list yet. Create one with `update_todo_list` if your task is complicated or involves multiple steps.\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<ask_followup_question>\n<question>当前工作区 `/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git` 中没有找到任何文件。请问 Kilo 项目的源代码位于哪个路径？</question>\n<follow_up>\n<suggest>Kilo 项目的源代码在当前工作区根目录下。</suggest>\n<suggest>Kilo 项目的源代码在 `/Users/chenfengqing/path/to/kilo`。</suggest>\n<suggest>Kilo 项目的源代码在 `/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/kilo`。</suggest>\n</follow_up>\n</ask_followup_question>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ask_followup_question for '当前工作区 `/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git` 中没有找到任何文件。请问 Kilo 项目的源代码位于哪个路径？'] Result:"
				},
				{
					"text": "<answer>\n/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/kilocode 这个目录\n</answer>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:19:15.308Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.00\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\nYou have not created a todo list yet. Create one with `update_todo_list` if your task is complicated or involves multiple steps.\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<list_files>\n<path>kilocode</path>\n<recursive>true</recursive>\n</list_files>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[list_files for 'kilocode'] Result:"
				},
				{
					"text": ".gitattributes\n.gitconfig\n??? .kilocodemodes\n??? .rooignore\nDEVELOPMENT.md\nellipsis.yaml\npnpm-workspace.yaml\napps/web-evals/components.json\napps/web-evals/postcss.config.mjs\napps/web-evals/tsconfig.json\napps/web-evals/vitest.config.ts\napps/web-evals/scripts/check-services.sh\napps/web-evals/src/lib/actions.ts\napps/web-evals/src/lib/formatters.ts\napps/web-evals/src/lib/schemas.ts\napps/web-evals/src/lib/utils.ts\napps/web-evals/src/lib/server/redis.ts\napps/web-evals/src/lib/server/sse-stream.ts\napps/web-evals/src/lib/server/__tests__/sse-stream.spec.ts\napps/web-roo-code/.env.example\napps/web-roo-code/eslint.config.mjs\napps/web-roo-code/next.config.ts\napps/web-roo-code/tsconfig.json\napps/web-roo-code/src/actions/evals.ts\napps/web-roo-code/src/app/globals.css\napps/web-roo-code/src/app/layout.tsx\napps/web-roo-code/src/app/page.tsx\napps/web-roo-code/src/app/shell.tsx\napps/web-roo-code/src/app/sitemap.xml\napps/web-roo-code/src/app/enterprise/page.tsx\napps/web-roo-code/src/app/evals/evals.tsx\napps/web-roo-code/src/app/evals/page.tsx\napps/web-roo-code/src/app/terms/page.tsx\napps/web-roo-code/src/components/animated-text.tsx\napps/web-roo-code/src/components/enterprise/contact-form.tsx\napps/web-roo-code/src/components/providers/index.ts\napps/web-roo-code/src/components/providers/posthog-provider.tsx\napps/web-roo-code/src/components/providers/providers.tsx\napps/web-roo-code/src/lib/constants.ts\napps/web-roo-code/src/lib/format-currency.ts\napps/web-roo-code/src/lib/format-duration.ts\napps/web-roo-code/src/lib/format-score.ts\napps/web-roo-code/src/lib/format-tokens.ts\napps/web-roo-code/src/lib/index.ts\napps/web-roo-code/src/lib/stats.ts\napps/web-roo-code/src/lib/utils.ts\napps/web-roo-code/src/lib/hooks/use-open-router-models.ts\npackages/config-eslint/next.js\npackages/config-eslint/package.json\npackages/config-eslint/react.js\npackages/evals/ADDING-EVALS.md\npackages/evals/eslint.config.mjs\npackages/evals/README.md\npackages/evals/tsconfig.json\npackages/evals/vitest-global-setup.ts\npackages/evals/scripts/setup.sh\npackages/evals/src/index.ts\npackages/evals/src/cli/redis.ts\npackages/evals/src/cli/runCi.ts\npackages/evals/src/cli/runTask.ts\npackages/evals/src/cli/utils.ts\npackages/evals/src/db/db.ts\npackages/evals/src/db/index.ts\npackages/evals/src/db/migrations/0000_young_trauma.sql\npackages/evals/src/db/migrations/0001_lowly_captain_flint.sql\npackages/evals/src/db/migrations/meta/_journal.json\npackages/evals/src/db/migrations/meta/0000_snapshot.json\npackages/evals/src/db/migrations/meta/0001_snapshot.json\npackages/evals/src/db/queries/copyRun.ts\npackages/evals/src/db/queries/errors.ts\npackages/evals/src/db/queries/runs.ts\npackages/evals/src/db/queries/taskMetrics.ts\npackages/evals/src/db/queries/tasks.ts\npackages/evals/src/db/queries/toolErrors.ts\npackages/evals/src/db/queries/__tests__/copyRun.spec.ts\npackages/evals/src/db/queries/__tests__/runs.test.ts\npackages/evals/src/exercises/index.ts\npackages/types/npm/package.json\npackages/types/src/followup.ts\npackages/types/src/mcp.ts\npackages/types/src/providers/anthropic.ts\npackages/types/src/providers/bedrock.ts\npackages/types/src/providers/bigmodel.ts\npackages/types/src/providers/chutes.ts\npackages/types/src/providers/claude-code.ts\npackages/types/src/providers/deepseek.ts\npackages/types/src/providers/doubao.ts\npackages/types/src/providers/fireworks.ts\npackages/types/src/providers/gemini-cli.ts\npackages/types/src/providers/gemini.ts\npackages/types/src/providers/glama.ts\npackages/types/src/providers/groq.ts\npackages/types/src/providers/huggingface.ts\npackages/types/src/providers/index.ts\npackages/types/src/providers/lite-llm.ts\npackages/types/src/providers/lm-studio.ts\npackages/types/src/providers/mistral.ts\npackages/types/src/providers/moonshot.ts\npackages/types/src/providers/ollama.ts\npackages/types/src/providers/openai.ts\npackages/types/src/providers/openrouter.ts\npackages/types/src/providers/requesty.ts\npackages/types/src/providers/sambanova.ts\npackages/types/src/providers/unbound.ts\npackages/types/src/providers/vertex.ts\npackages/types/src/providers/vscode-llm.ts\npackages/types/src/providers/xai.ts\npackages/types/src/providers/zai.ts\npackages/types/src/providers/__tests__/claude-code.spec.ts\nsrc/.vscodeignore\nsrc/esbuild.mjs\nsrc/eslint.config.mjs\nsrc/package.nls.ca.json\nsrc/package.nls.cs.json\nsrc/package.nls.de.json\nsrc/package.nls.fr.json\nsrc/package.nls.hi.json\nsrc/package.nls.id.json\nsrc/package.nls.it.json\nsrc/package.nls.json\nsrc/package.nls.ko.json\nsrc/package.nls.pl.json\nsrc/package.nls.pt-BR.json\nsrc/package.nls.ru.json\nsrc/vitest.setup.ts\nsrc/__mocks__/fs/promises.ts\nsrc/assets/icons/kilo-dark.svg\nsrc/assets/icons/kilo-light.svg\nsrc/assets/icons/logo-outline-black.gif\nsrc/assets/icons/logo-outline-black.png\nsrc/assets/icons/logo-outline-yellow.gif\nsrc/core/kilocode.ts\nsrc/core/assistant-message/index.ts\nsrc/core/assistant-message/parseAssistantMessageV2.ts\nsrc/core/assistant-message/presentAssistantMessage.ts\nsrc/core/assistant-message/__tests__/parseAssistantMessage.spec.ts\nsrc/core/assistant-message/__tests__/parseAssistantMessageBenchmark.ts\nsrc/core/condense/index.ts\nsrc/core/condense/__tests__/index.spec.ts\nsrc/core/context-tracking/FileContextTracker.ts\nsrc/core/context-tracking/FileContextTrackerTypes.ts\nsrc/core/diff/insert-groups.ts\nsrc/core/environment/getEnvironmentDetails.ts\nsrc/core/environment/reminder.ts\nsrc/core/environment/__tests__/getEnvironmentDetails.spec.ts\nsrc/core/mentions/index.ts\nsrc/core/mentions/processKiloUserContentMentions.ts\nsrc/core/mentions/processUserContentMentions.ts\nsrc/core/mentions/__tests__/index.spec.ts\nsrc/core/mentions/__tests__/processUserContentMentions.spec.ts\nsrc/core/prompts/commands.ts\nsrc/core/prompts/responses.ts\nsrc/core/prompts/system.ts\nsrc/core/prompts/types.ts\nsrc/core/prompts/__tests__/add-custom-instructions.spec.ts\nsrc/core/prompts/__tests__/custom-system-prompt.spec.ts\nsrc/core/prompts/__tests__/get-prompt-component.spec.ts\nsrc/core/prompts/__tests__/responses-rooignore.spec.ts\nsrc/core/prompts/__tests__/sections.spec.ts\nsrc/core/prompts/__tests__/system-prompt.spec.ts\nsrc/core/prompts/__tests__/utils.ts\nsrc/core/prompts/__tests__/__snapshots__/add-custom-instructions/code-mode-rules.snap\nsrc/core/prompts/__tests__/__snapshots__/add-custom-instructions/trimmed-mode-instructions.snap\nsrc/core/prompts/__tests__/__snapshots__/system-prompt/consistent-system-prompt.snap\nsrc/core/prompts/__tests__/__snapshots__/system-prompt/with-computer-use-support.snap\nsrc/core/prompts/__tests__/__snapshots__/system-prompt/with-diff-enabled-false.snap\nsrc/core/prompts/instructions/create-mcp-server.ts\nsrc/core/prompts/instructions/create-mode.ts\nsrc/core/prompts/instructions/instructions.ts\nsrc/core/prompts/sections/capabilities.ts\nsrc/core/prompts/sections/custom-instructions.ts\nsrc/core/prompts/sections/custom-system-prompt.ts\nsrc/core/prompts/sections/index.ts\nsrc/core/prompts/sections/kilo.ts\nsrc/core/prompts/sections/markdown-formatting.ts\nsrc/core/prompts/sections/mcp-servers.ts\nsrc/core/prompts/sections/modes.ts\nsrc/core/prompts/sections/objective.ts\nsrc/core/prompts/sections/rules.ts\nsrc/core/prompts/sections/system-info.ts\nsrc/core/prompts/sections/tool-use-guidelines.ts\nsrc/core/prompts/sections/tool-use.ts\nsrc/core/prompts/utilities/mermaid.ts\nsrc/core/webview/getUri.ts\nsrc/core/webview/kilorules.ts\nsrc/core/webview/messageEnhancer.ts\nsrc/core/webview/__tests__/ClineProvider.spec.ts\nsrc/core/webview/__tests__/ClineProvider.sticky-mode.spec.ts\nsrc/core/webview/__tests__/messageEnhancer.test.ts\nsrc/core/webview/__tests__/webviewMessageHandler.spec.ts\nsrc/extension/api.ts\nsrc/i18n/index.ts\nsrc/services/commit-message/CommitMessageProvider.ts\nsrc/services/commit-message/exclusionUtils.ts\nsrc/services/commit-message/GitExtensionService.ts\nsrc/services/commit-message/index.ts\nsrc/services/commit-message/__tests__/CommitMessageProvider.test.ts\nsrc/services/commit-message/__tests__/GitExtensionService.spec.ts\nsrc/services/commit-message/__tests__/progress-reporting.spec.ts\nsrc/services/ripgrep/index.ts\n\n(File list truncated. Use list_files on specific subdirectories if you need to explore further.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:19:21.648Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.01\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\nYou have not created a todo list yet. Create one with `update_todo_list` if your task is complicated or involves multiple steps.\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<update_todo_list>\n<todos>\n[-] 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。\n[ ] 根据 `src/core/kilocode.ts` 的内容，识别与大模型交互相关的函数或模块。\n[ ] 阅读识别出的相关文件，分析请求构建、发送和响应处理的详细过程。\n[ ] 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。\n[ ] 编写代码分析文档，并保存到指定目录。\n</todos>\n</update_todo_list>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[update_todo_list] Result:"
				},
				{
					"text": "Todo list updated successfully."
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:19:30.360Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.01\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | In Progress |\n| 2 | 根据 `src/core/kilocode.ts` 的内容，识别与大模型交互相关的函数或模块。 | Pending |\n| 3 | 阅读识别出的相关文件，分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "Failure: I did not provide a response."
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:19:47.293Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.01\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | In Progress |\n| 2 | 根据 `src/core/kilocode.ts` 的内容，识别与大模型交互相关的函数或模块。 | Pending |\n| 3 | 阅读识别出的相关文件，分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "Failure: I did not provide a response."
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:19:53.583Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.01\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | In Progress |\n| 2 | 根据 `src/core/kilocode.ts` 的内容，识别与大模型交互相关的函数或模块。 | Pending |\n| 3 | 阅读识别出的相关文件，分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "Failure: I did not provide a response."
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:21:53.093Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.01\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | In Progress |\n| 2 | 根据 `src/core/kilocode.ts` 的内容，识别与大模型交互相关的函数或模块。 | Pending |\n| 3 | 阅读识别出的相关文件，分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<read_file>\n<args>\n<file>\n<path>kilocode/src/core/kilocode.ts</path>\n</file>\n</args>\n</read_file>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[read_file for 'kilocode/src/core/kilocode.ts'. Reading multiple files at once is more efficient for the LLM. If other files are relevant to your current task, please read them simultaneously.] Result:"
				},
				{
					"text": "<files>\n<file><path>kilocode/src/core/kilocode.ts</path>\n<content lines=\"1-12\">\n 1 | import { TelemetryService } from \"@roo-code/telemetry\"\n 2 | import { TelemetryEventName } from \"@roo-code/types\"\n 3 | \n 4 | export function reportExcessiveRecursion(functionName: string, recursionDepth: number) {\n 5 | \tif (recursionDepth > 10 && Number.isInteger(Math.log10(recursionDepth))) {\n 6 | \t\tTelemetryService.instance.captureEvent(TelemetryEventName.EXCESSIVE_RECURSION, { functionName, recursionDepth })\n 7 | \t}\n 8 | }\n 9 | \n10 | export function yieldPromise() {\n11 | \treturn new Promise<void>((resolve) => setTimeout(() => resolve(), 0))\n12 | }\n</content>\n</file>\n</files>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:21:58.768Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.02\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | In Progress |\n| 2 | 根据 `src/core/kilocode.ts` 的内容，识别与大模型交互相关的函数或模块。 | Pending |\n| 3 | 阅读识别出的相关文件，分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<update_todo_list>\n<todos>\n[x] 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。\n[-] 识别与大模型交互相关的函数或模块，并阅读相关文件。\n[ ] 分析请求构建、发送和响应处理的详细过程。\n[ ] 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。\n[ ] 编写代码分析文档，并保存到指定目录。\n</todos>\n</update_todo_list>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[update_todo_list] Result:"
				},
				{
					"text": "Todo list updated successfully."
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:22:05.531Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.02\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | In Progress |\n| 3 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<read_file>\n<args>\n<file>\n<path>packages/types/src/providers/index.ts</path>\n</file>\n</args>\n</read_file>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[read_file for 'packages/types/src/providers/index.ts'. Reading multiple files at once is more efficient for the LLM. If other files are relevant to your current task, please read them simultaneously.] Result:"
				},
				{
					"text": "The tool execution failed with the following error:\n<error>\nError reading file packages/types/src/providers/index.ts: {\"name\":\"Error\",\"message\":\"File not found: /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/packages/types/src/providers/index.ts\",\"stack\":\"Error: File not found: /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/packages/types/src/providers/index.ts\\n    at wje (/Users/chenfengqing/.trae/extensions/kilocode.kilo-code-4.75.0/integrations/misc/line-counter.ts:15:9)\\n    at async Promise.all (index 0)\\n    at rKi (/Users/chenfengqing/.trae/extensions/kilocode.kilo-code-4.75.0/core/tools/readFileTool.ts:458:36)\\n    at xce (/Users/chenfengqing/.trae/extensions/kilocode.kilo-code-4.75.0/core/assistant-message/presentAssistantMessage.ts:477:6)\\n    at xce (/Users/chenfengqing/.trae/extensions/kilocode.kilo-code-4.75.0/core/assistant-message/presentAssistantMessage.ts:614:4)\"}\n</error>"
				},
				{
					"text": "[read_file for 'packages/types/src/providers/index.ts'. Reading multiple files at once is more efficient for the LLM. If other files are relevant to your current task, please read them simultaneously.] Result:"
				},
				{
					"text": "<files>\n<file><path>packages/types/src/providers/index.ts</path><error>Error reading file: File not found: /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/packages/types/src/providers/index.ts</error></file>\n</files>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:22:11.697Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.02\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | In Progress |\n| 3 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<read_file>\n<args>\n<file>\n<path>packages/types/src/mcp.ts</path>\n</file>\n<file>\n<path>apps/web-roo-code/src/actions/evals.ts</path>\n</file>\n</args>\n</read_file>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[read_file for 'packages/types/src/mcp.ts', 'apps/web-roo-code/src/actions/evals.ts'] Result:"
				},
				{
					"text": "The tool execution failed with the following error:\n<error>\nError reading file packages/types/src/mcp.ts: {\"errno\":-2,\"code\":\"ENOENT\",\"syscall\":\"stat\",\"path\":\"/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/packages/types/src/mcp.ts\",\"name\":\"Error\",\"message\":\"ENOENT: no such file or directory, stat '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/packages/types/src/mcp.ts'\",\"stack\":\"Error: ENOENT: no such file or directory, stat '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/packages/types/src/mcp.ts'\"}\n</error>"
				},
				{
					"text": "[read_file for 'packages/types/src/mcp.ts', 'apps/web-roo-code/src/actions/evals.ts'] Result:"
				},
				{
					"text": "The tool execution failed with the following error:\n<error>\nError reading file apps/web-roo-code/src/actions/evals.ts: {\"errno\":-2,\"code\":\"ENOENT\",\"syscall\":\"stat\",\"path\":\"/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/apps/web-roo-code/src/actions/evals.ts\",\"name\":\"Error\",\"message\":\"ENOENT: no such file or directory, stat '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/apps/web-roo-code/src/actions/evals.ts'\",\"stack\":\"Error: ENOENT: no such file or directory, stat '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/apps/web-roo-code/src/actions/evals.ts'\"}\n</error>"
				},
				{
					"text": "[read_file for 'packages/types/src/mcp.ts', 'apps/web-roo-code/src/actions/evals.ts'] Result:"
				},
				{
					"text": "<files>\n<file><path>packages/types/src/mcp.ts</path><error>Error reading file: ENOENT: no such file or directory, stat '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/packages/types/src/mcp.ts'</error></file>\n<file><path>apps/web-roo-code/src/actions/evals.ts</path><error>Error reading file: ENOENT: no such file or directory, stat '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/apps/web-roo-code/src/actions/evals.ts'</error></file>\n</files>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:22:18.911Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.03\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | In Progress |\n| 3 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<read_file>\n<args>\n<file>\n<path>kilocode/packages/types/src/mcp.ts</path>\n</file>\n<file>\n<path>kilocode/apps/web-roo-code/src/actions/evals.ts</path>\n</file>\n</args>\n</read_file>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[read_file for 'kilocode/packages/types/src/mcp.ts', 'kilocode/apps/web-roo-code/src/actions/evals.ts'] Result:"
				},
				{
					"text": "<files>\n<file><path>kilocode/packages/types/src/mcp.ts</path>\n<content lines=\"1-31\">\n 1 | import { z } from \"zod\"\n 2 | \n 3 | /**\n 4 |  * McpExecutionStatus\n 5 |  */\n 6 | \n 7 | export const mcpExecutionStatusSchema = z.discriminatedUnion(\"status\", [\n 8 | \tz.object({\n 9 | \t\texecutionId: z.string(),\n10 | \t\tstatus: z.literal(\"started\"),\n11 | \t\tserverName: z.string(),\n12 | \t\ttoolName: z.string(),\n13 | \t}),\n14 | \tz.object({\n15 | \t\texecutionId: z.string(),\n16 | \t\tstatus: z.literal(\"output\"),\n17 | \t\tresponse: z.string(),\n18 | \t}),\n19 | \tz.object({\n20 | \t\texecutionId: z.string(),\n21 | \t\tstatus: z.literal(\"completed\"),\n22 | \t\tresponse: z.string().optional(),\n23 | \t}),\n24 | \tz.object({\n25 | \t\texecutionId: z.string(),\n26 | \t\tstatus: z.literal(\"error\"),\n27 | \t\terror: z.string().optional(),\n28 | \t}),\n29 | ])\n30 | \n31 | export type McpExecutionStatus = z.infer<typeof mcpExecutionStatusSchema>\n</content>\n</file>\n<file><path>kilocode/apps/web-roo-code/src/actions/evals.ts</path>\n<content lines=\"1-29\">\n 1 | \"use server\"\n 2 | \n 3 | import { getModelId, rooCodeSettingsSchema } from \"@roo-code/types\"\n 4 | import { getRuns, getLanguageScores } from \"@roo-code/evals\"\n 5 | \n 6 | import { formatScore } from \"@/lib\"\n 7 | \n 8 | export async function getEvalRuns() {\n 9 | \tconst languageScores = await getLanguageScores()\n10 | \n11 | \tconst runs = (await getRuns())\n12 | \t\t.filter((run) => !!run.taskMetrics)\n13 | \t\t.filter(({ settings }) => rooCodeSettingsSchema.safeParse(settings).success)\n14 | \t\t.sort((a, b) => b.passed - a.passed)\n15 | \t\t.map((run) => {\n16 | \t\t\tconst settings = rooCodeSettingsSchema.parse(run.settings)\n17 | \n18 | \t\t\treturn {\n19 | \t\t\t\t...run,\n20 | \t\t\t\tlabel: run.description || run.model,\n21 | \t\t\t\tscore: formatScore(run.passed / (run.passed + run.failed)),\n22 | \t\t\t\tlanguageScores: languageScores[run.id],\n23 | \t\t\t\ttaskMetrics: run.taskMetrics!,\n24 | \t\t\t\tmodelId: getModelId(settings),\n25 | \t\t\t}\n26 | \t\t})\n27 | \n28 | \treturn runs\n29 | }\n</content>\n</file>\n</files>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:22:25.821Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.03\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | In Progress |\n| 3 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 4 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 5 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<update_todo_list>\n<todos>\n[x] 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。\n[x] 识别与大模型交互相关的函数或模块，并阅读相关文件。\n[-] 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。\n[ ] 分析请求构建、发送和响应处理的详细过程。\n[ ] 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。\n[ ] 编写代码分析文档，并保存到指定目录。\n</todos>\n</update_todo_list>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[update_todo_list] Result:"
				},
				{
					"text": "Todo list updated successfully."
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:22:33.114Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.04\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | In Progress |\n| 4 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 5 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 6 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<search_files>\n<path>kilocode/src/extension</path>\n<regex>model|llm|chat|message|send|request</regex>\n<file_pattern>*.ts</file_pattern>\n</search_files>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[search_files for 'model|llm|chat|message|send|request' in '*.ts'] Result:"
				},
				{
					"text": "Found 8 results.\n\n# kilocode/src/extension/api.ts\n 53 | \n 54 | \t\t\tthis.logfile = path.join(os.tmpdir(), \"kilo-code-messages.log\")\n 55 | \t\t} else {\n----\n148 | \t\tawait provider.postStateToWebview()\n149 | \t\tawait provider.postMessageToWebview({ type: \"action\", action: \"chatButtonClicked\" })\n150 | \t\tawait provider.postMessageToWebview({ type: \"invoke\", invoke: \"newChat\", text, images })\n----\n165 | \t\tawait this.sidebarProvider.initClineWithHistoryItem(historyItem)\n166 | \t\tawait this.sidebarProvider.postMessageToWebview({ type: \"action\", action: \"chatButtonClicked\" })\n167 | \t}\n----\n199 | \n200 | \tpublic async sendMessage(text?: string, images?: string[]) {\n201 | \t\tawait this.sidebarProvider.postMessageToWebview({ type: \"invoke\", invoke: \"sendMessage\", text, images })\n202 | \t}\n----\n223 | \n224 | \t\t\tcline.on(\"message\", async (message) => {\n225 | \t\t\t\tthis.emit(RooCodeEventName.Message, { taskId: cline.taskId, ...message })\n226 | \n227 | \t\t\t\tif (message.message.partial !== true) {\n228 | \t\t\t\t\tawait this.fileLog(`[${new Date().toISOString()}] ${JSON.stringify(message.message, null, 2)}\\n`)\n229 | \t\t\t\t}\n----\n282 | \t\t\t} else if (arg instanceof Error) {\n283 | \t\t\t\tthis.outputChannel.appendLine(`Error: ${arg.message}\\n${arg.stack || \"\"}`)\n284 | \t\t\t} else {\n----\n304 | \n305 | \tprivate async fileLog(message: string) {\n306 | \t\tif (!this.logfile) {\n----\n310 | \t\ttry {\n311 | \t\t\tawait fs.appendFile(this.logfile, message, \"utf8\")\n312 | \t\t} catch (_) {\n----"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:22:40.733Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.05\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | In Progress |\n| 4 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 5 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 6 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<update_todo_list>\n<todos>\n[x] 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。\n[x] 识别与大模型交互相关的函数或模块，并阅读相关文件。\n[x] 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。\n[-] 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。\n[ ] 分析请求构建、发送和响应处理的详细过程。\n[ ] 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。\n[ ] 编写代码分析文档，并保存到指定目录。\n</todos>\n</update_todo_list>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[update_todo_list] Result:"
				},
				{
					"text": "Todo list updated successfully."
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:22:48.197Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.06\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | In Progress |\n| 5 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 6 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 7 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<read_file>\n<args>\n<file>\n<path>kilocode/src/extension/api.ts</path>\n</file>\n</args>\n</read_file>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[read_file for 'kilocode/src/extension/api.ts'. Reading multiple files at once is more efficient for the LLM. If other files are relevant to your current task, please read them simultaneously.] Result:"
				},
				{
					"text": "<files>\n<file><path>kilocode/src/extension/api.ts</path>\n<content lines=\"1-415\">\n  1 | import { EventEmitter } from \"events\"\n  2 | import * as vscode from \"vscode\"\n  3 | import fs from \"fs/promises\"\n  4 | import * as path from \"path\"\n  5 | import * as os from \"os\"\n  6 | \n  7 | import {\n  8 | \tRooCodeAPI,\n  9 | \tRooCodeSettings,\n 10 | \tRooCodeEvents,\n 11 | \tRooCodeEventName,\n 12 | \tProviderSettings,\n 13 | \tProviderSettingsEntry,\n 14 | \tisSecretStateKey,\n 15 | \tIpcOrigin,\n 16 | \tIpcMessageType,\n 17 | \tTaskCommandName,\n 18 | \tTaskEvent,\n 19 | } from \"@roo-code/types\"\n 20 | import { IpcServer } from \"@roo-code/ipc\"\n 21 | \n 22 | import { Package } from \"../shared/package\"\n 23 | import { getWorkspacePath } from \"../utils/path\"\n 24 | import { ClineProvider } from \"../core/webview/ClineProvider\"\n 25 | import { openClineInNewTab } from \"../activate/registerCommands\"\n 26 | \n 27 | export class API extends EventEmitter<RooCodeEvents> implements RooCodeAPI {\n 28 | \tprivate readonly outputChannel: vscode.OutputChannel\n 29 | \tprivate readonly sidebarProvider: ClineProvider\n 30 | \tprivate readonly context: vscode.ExtensionContext\n 31 | \tprivate readonly ipc?: IpcServer\n 32 | \tprivate readonly taskMap = new Map<string, ClineProvider>()\n 33 | \tprivate readonly log: (...args: unknown[]) => void\n 34 | \tprivate logfile?: string\n 35 | \n 36 | \tconstructor(\n 37 | \t\toutputChannel: vscode.OutputChannel,\n 38 | \t\tprovider: ClineProvider,\n 39 | \t\tsocketPath?: string,\n 40 | \t\tenableLogging = false,\n 41 | \t) {\n 42 | \t\tsuper()\n 43 | \n 44 | \t\tthis.outputChannel = outputChannel\n 45 | \t\tthis.sidebarProvider = provider\n 46 | \t\tthis.context = provider.context\n 47 | \n 48 | \t\tif (enableLogging) {\n 49 | \t\t\tthis.log = (...args: unknown[]) => {\n 50 | \t\t\t\tthis.outputChannelLog(...args)\n 51 | \t\t\t\tconsole.log(args)\n 52 | \t\t\t}\n 53 | \n 54 | \t\t\tthis.logfile = path.join(os.tmpdir(), \"kilo-code-messages.log\")\n 55 | \t\t} else {\n 56 | \t\t\tthis.log = () => {}\n 57 | \t\t}\n 58 | \n 59 | \t\tthis.registerListeners(this.sidebarProvider)\n 60 | \n 61 | \t\tif (socketPath) {\n 62 | \t\t\tconst ipc = (this.ipc = new IpcServer(socketPath, this.log))\n 63 | \n 64 | \t\t\tipc.listen()\n 65 | \t\t\tthis.log(`[API] ipc server started: socketPath=${socketPath}, pid=${process.pid}, ppid=${process.ppid}`)\n 66 | \n 67 | \t\t\tipc.on(IpcMessageType.TaskCommand, async (_clientId, { commandName, data }) => {\n 68 | \t\t\t\tswitch (commandName) {\n 69 | \t\t\t\t\tcase TaskCommandName.StartNewTask:\n 70 | \t\t\t\t\t\tthis.log(`[API] StartNewTask -> ${data.text}, ${JSON.stringify(data.configuration)}`)\n 71 | \t\t\t\t\t\tawait this.startNewTask(data)\n 72 | \t\t\t\t\t\tbreak\n 73 | \t\t\t\t\tcase TaskCommandName.CancelTask:\n 74 | \t\t\t\t\t\tthis.log(`[API] CancelTask -> ${data}`)\n 75 | \t\t\t\t\t\tawait this.cancelTask(data)\n 76 | \t\t\t\t\t\tbreak\n 77 | \t\t\t\t\tcase TaskCommandName.CloseTask:\n 78 | \t\t\t\t\t\tthis.log(`[API] CloseTask -> ${data}`)\n 79 | \t\t\t\t\t\tawait vscode.commands.executeCommand(\"workbench.action.files.saveFiles\")\n 80 | \t\t\t\t\t\tawait vscode.commands.executeCommand(\"workbench.action.closeWindow\")\n 81 | \t\t\t\t\t\tbreak\n 82 | \t\t\t\t}\n 83 | \t\t\t})\n 84 | \t\t}\n 85 | \t}\n 86 | \n 87 | \tpublic override emit<K extends keyof RooCodeEvents>(\n 88 | \t\teventName: K,\n 89 | \t\t...args: K extends keyof RooCodeEvents ? RooCodeEvents[K] : never\n 90 | \t) {\n 91 | \t\tconst data = { eventName: eventName as RooCodeEventName, payload: args } as TaskEvent\n 92 | \t\tthis.ipc?.broadcast({ type: IpcMessageType.TaskEvent, origin: IpcOrigin.Server, data })\n 93 | \t\treturn super.emit(eventName, ...args)\n 94 | \t}\n 95 | \n 96 | \tpublic async startNewTask({\n 97 | \t\tconfiguration,\n 98 | \t\ttext,\n 99 | \t\timages,\n100 | \t\tnewTab,\n101 | \t}: {\n102 | \t\tconfiguration: RooCodeSettings\n103 | \t\ttext?: string\n104 | \t\timages?: string[]\n105 | \t\tnewTab?: boolean\n106 | \t}) {\n107 | \t\tlet provider: ClineProvider\n108 | \n109 | \t\tif (newTab) {\n110 | \t\t\tawait vscode.commands.executeCommand(\"workbench.action.files.revert\")\n111 | \t\t\tawait vscode.commands.executeCommand(\"workbench.action.closeAllEditors\")\n112 | \n113 | \t\t\tprovider = await openClineInNewTab({ context: this.context, outputChannel: this.outputChannel })\n114 | \t\t\tthis.registerListeners(provider)\n115 | \t\t} else {\n116 | \t\t\tawait vscode.commands.executeCommand(`${Package.name}.SidebarProvider.focus`)\n117 | \n118 | \t\t\tprovider = this.sidebarProvider\n119 | \t\t}\n120 | \n121 | \t\tif (configuration) {\n122 | \t\t\tawait provider.setValues(configuration)\n123 | \n124 | \t\t\tif (configuration.allowedCommands) {\n125 | \t\t\t\tawait vscode.workspace\n126 | \t\t\t\t\t.getConfiguration(Package.name)\n127 | \t\t\t\t\t.update(\"allowedCommands\", configuration.allowedCommands, vscode.ConfigurationTarget.Global)\n128 | \t\t\t}\n129 | \n130 | \t\t\tif (configuration.deniedCommands) {\n131 | \t\t\t\tawait vscode.workspace\n132 | \t\t\t\t\t.getConfiguration(Package.name)\n133 | \t\t\t\t\t.update(\"deniedCommands\", configuration.deniedCommands, vscode.ConfigurationTarget.Global)\n134 | \t\t\t}\n135 | \n136 | \t\t\tif (configuration.commandExecutionTimeout !== undefined) {\n137 | \t\t\t\tawait vscode.workspace\n138 | \t\t\t\t\t.getConfiguration(Package.name)\n139 | \t\t\t\t\t.update(\n140 | \t\t\t\t\t\t\"commandExecutionTimeout\",\n141 | \t\t\t\t\t\tconfiguration.commandExecutionTimeout,\n142 | \t\t\t\t\t\tvscode.ConfigurationTarget.Global,\n143 | \t\t\t\t\t)\n144 | \t\t\t}\n145 | \t\t}\n146 | \n147 | \t\tawait provider.removeClineFromStack()\n148 | \t\tawait provider.postStateToWebview()\n149 | \t\tawait provider.postMessageToWebview({ type: \"action\", action: \"chatButtonClicked\" })\n150 | \t\tawait provider.postMessageToWebview({ type: \"invoke\", invoke: \"newChat\", text, images })\n151 | \n152 | \t\tconst cline = await provider.initClineWithTask(text, images, undefined, {\n153 | \t\t\tconsecutiveMistakeLimit: Number.MAX_SAFE_INTEGER,\n154 | \t\t})\n155 | \n156 | \t\tif (!cline) {\n157 | \t\t\tthrow new Error(\"Failed to create task due to policy restrictions\")\n158 | \t\t}\n159 | \n160 | \t\treturn cline.taskId\n161 | \t}\n162 | \n163 | \tpublic async resumeTask(taskId: string): Promise<void> {\n164 | \t\tconst { historyItem } = await this.sidebarProvider.getTaskWithId(taskId)\n165 | \t\tawait this.sidebarProvider.initClineWithHistoryItem(historyItem)\n166 | \t\tawait this.sidebarProvider.postMessageToWebview({ type: \"action\", action: \"chatButtonClicked\" })\n167 | \t}\n168 | \n169 | \tpublic async isTaskInHistory(taskId: string): Promise<boolean> {\n170 | \t\ttry {\n171 | \t\t\tawait this.sidebarProvider.getTaskWithId(taskId)\n172 | \t\t\treturn true\n173 | \t\t} catch {\n174 | \t\t\treturn false\n175 | \t\t}\n176 | \t}\n177 | \n178 | \tpublic getCurrentTaskStack() {\n179 | \t\treturn this.sidebarProvider.getCurrentTaskStack()\n180 | \t}\n181 | \n182 | \tpublic async clearCurrentTask(lastMessage?: string) {\n183 | \t\tawait this.sidebarProvider.finishSubTask(lastMessage ?? \"\")\n184 | \t\tawait this.sidebarProvider.postStateToWebview()\n185 | \t}\n186 | \n187 | \tpublic async cancelCurrentTask() {\n188 | \t\tawait this.sidebarProvider.cancelTask()\n189 | \t}\n190 | \n191 | \tpublic async cancelTask(taskId: string) {\n192 | \t\tconst provider = this.taskMap.get(taskId)\n193 | \n194 | \t\tif (provider) {\n195 | \t\t\tawait provider.cancelTask()\n196 | \t\t\tthis.taskMap.delete(taskId)\n197 | \t\t}\n198 | \t}\n199 | \n200 | \tpublic async sendMessage(text?: string, images?: string[]) {\n201 | \t\tawait this.sidebarProvider.postMessageToWebview({ type: \"invoke\", invoke: \"sendMessage\", text, images })\n202 | \t}\n203 | \n204 | \tpublic async pressPrimaryButton() {\n205 | \t\tawait this.sidebarProvider.postMessageToWebview({ type: \"invoke\", invoke: \"primaryButtonClick\" })\n206 | \t}\n207 | \n208 | \tpublic async pressSecondaryButton() {\n209 | \t\tawait this.sidebarProvider.postMessageToWebview({ type: \"invoke\", invoke: \"secondaryButtonClick\" })\n210 | \t}\n211 | \n212 | \tpublic isReady() {\n213 | \t\treturn this.sidebarProvider.viewLaunched\n214 | \t}\n215 | \n216 | \tprivate registerListeners(provider: ClineProvider) {\n217 | \t\tprovider.on(\"taskCreated\", (cline) => {\n218 | \t\t\tcline.on(\"taskStarted\", async () => {\n219 | \t\t\t\tthis.emit(RooCodeEventName.TaskStarted, cline.taskId)\n220 | \t\t\t\tthis.taskMap.set(cline.taskId, provider)\n221 | \t\t\t\tawait this.fileLog(`[${new Date().toISOString()}] taskStarted -> ${cline.taskId}\\n`)\n222 | \t\t\t})\n223 | \n224 | \t\t\tcline.on(\"message\", async (message) => {\n225 | \t\t\t\tthis.emit(RooCodeEventName.Message, { taskId: cline.taskId, ...message })\n226 | \n227 | \t\t\t\tif (message.message.partial !== true) {\n228 | \t\t\t\t\tawait this.fileLog(`[${new Date().toISOString()}] ${JSON.stringify(message.message, null, 2)}\\n`)\n229 | \t\t\t\t}\n230 | \t\t\t})\n231 | \n232 | \t\t\tcline.on(\"taskModeSwitched\", (taskId, mode) => this.emit(RooCodeEventName.TaskModeSwitched, taskId, mode))\n233 | \n234 | \t\t\tcline.on(\"taskAskResponded\", () => this.emit(RooCodeEventName.TaskAskResponded, cline.taskId))\n235 | \n236 | \t\t\tcline.on(\"taskAborted\", () => {\n237 | \t\t\t\tthis.emit(RooCodeEventName.TaskAborted, cline.taskId)\n238 | \t\t\t\tthis.taskMap.delete(cline.taskId)\n239 | \t\t\t})\n240 | \n241 | \t\t\tcline.on(\"taskCompleted\", async (_, tokenUsage, toolUsage) => {\n242 | \t\t\t\tlet isSubtask = false\n243 | \n244 | \t\t\t\tif (cline.rootTask != undefined) {\n245 | \t\t\t\t\tisSubtask = true\n246 | \t\t\t\t}\n247 | \n248 | \t\t\t\tthis.emit(RooCodeEventName.TaskCompleted, cline.taskId, tokenUsage, toolUsage, { isSubtask: isSubtask })\n249 | \t\t\t\tthis.taskMap.delete(cline.taskId)\n250 | \n251 | \t\t\t\tawait this.fileLog(\n252 | \t\t\t\t\t`[${new Date().toISOString()}] taskCompleted -> ${cline.taskId} | ${JSON.stringify(tokenUsage, null, 2)} | ${JSON.stringify(toolUsage, null, 2)}\\n`,\n253 | \t\t\t\t)\n254 | \t\t\t})\n255 | \n256 | \t\t\tcline.on(\"taskSpawned\", (childTaskId) => this.emit(RooCodeEventName.TaskSpawned, cline.taskId, childTaskId))\n257 | \t\t\tcline.on(\"taskPaused\", () => this.emit(RooCodeEventName.TaskPaused, cline.taskId))\n258 | \t\t\tcline.on(\"taskUnpaused\", () => this.emit(RooCodeEventName.TaskUnpaused, cline.taskId))\n259 | \n260 | \t\t\tcline.on(\"taskTokenUsageUpdated\", (_, usage) =>\n261 | \t\t\t\tthis.emit(RooCodeEventName.TaskTokenUsageUpdated, cline.taskId, usage),\n262 | \t\t\t)\n263 | \n264 | \t\t\tcline.on(\"taskToolFailed\", (taskId, tool, error) =>\n265 | \t\t\t\tthis.emit(RooCodeEventName.TaskToolFailed, taskId, tool, error),\n266 | \t\t\t)\n267 | \n268 | \t\t\tthis.emit(RooCodeEventName.TaskCreated, cline.taskId)\n269 | \t\t})\n270 | \t}\n271 | \n272 | \t// Logging\n273 | \n274 | \tprivate outputChannelLog(...args: unknown[]) {\n275 | \t\tfor (const arg of args) {\n276 | \t\t\tif (arg === null) {\n277 | \t\t\t\tthis.outputChannel.appendLine(\"null\")\n278 | \t\t\t} else if (arg === undefined) {\n279 | \t\t\t\tthis.outputChannel.appendLine(\"undefined\")\n280 | \t\t\t} else if (typeof arg === \"string\") {\n281 | \t\t\t\tthis.outputChannel.appendLine(arg)\n282 | \t\t\t} else if (arg instanceof Error) {\n283 | \t\t\t\tthis.outputChannel.appendLine(`Error: ${arg.message}\\n${arg.stack || \"\"}`)\n284 | \t\t\t} else {\n285 | \t\t\t\ttry {\n286 | \t\t\t\t\tthis.outputChannel.appendLine(\n287 | \t\t\t\t\t\tJSON.stringify(\n288 | \t\t\t\t\t\t\targ,\n289 | \t\t\t\t\t\t\t(key, value) => {\n290 | \t\t\t\t\t\t\t\tif (typeof value === \"bigint\") return `BigInt(${value})`\n291 | \t\t\t\t\t\t\t\tif (typeof value === \"function\") return `Function: ${value.name || \"anonymous\"}`\n292 | \t\t\t\t\t\t\t\tif (typeof value === \"symbol\") return value.toString()\n293 | \t\t\t\t\t\t\t\treturn value\n294 | \t\t\t\t\t\t\t},\n295 | \t\t\t\t\t\t\t2,\n296 | \t\t\t\t\t\t),\n297 | \t\t\t\t\t)\n298 | \t\t\t\t} catch (error) {\n299 | \t\t\t\t\tthis.outputChannel.appendLine(`[Non-serializable object: ${Object.prototype.toString.call(arg)}]`)\n300 | \t\t\t\t}\n301 | \t\t\t}\n302 | \t\t}\n303 | \t}\n304 | \n305 | \tprivate async fileLog(message: string) {\n306 | \t\tif (!this.logfile) {\n307 | \t\t\treturn\n308 | \t\t}\n309 | \n310 | \t\ttry {\n311 | \t\t\tawait fs.appendFile(this.logfile, message, \"utf8\")\n312 | \t\t} catch (_) {\n313 | \t\t\tthis.logfile = undefined\n314 | \t\t}\n315 | \t}\n316 | \n317 | \t// Global Settings Management\n318 | \n319 | \tpublic getConfiguration(): RooCodeSettings {\n320 | \t\treturn Object.fromEntries(\n321 | \t\t\tObject.entries(this.sidebarProvider.getValues()).filter(([key]) => !isSecretStateKey(key)),\n322 | \t\t)\n323 | \t}\n324 | \n325 | \tpublic async setConfiguration(values: RooCodeSettings) {\n326 | \t\tawait this.sidebarProvider.contextProxy.setValues(values)\n327 | \t\tawait this.sidebarProvider.providerSettingsManager.saveConfig(values.currentApiConfigName || \"default\", values)\n328 | \t\tawait this.sidebarProvider.postStateToWebview()\n329 | \t}\n330 | \n331 | \t// Provider Profile Management\n332 | \n333 | \tpublic getProfiles(): string[] {\n334 | \t\treturn this.sidebarProvider.getProviderProfileEntries().map(({ name }) => name)\n335 | \t}\n336 | \n337 | \tpublic getProfileEntry(name: string): ProviderSettingsEntry | undefined {\n338 | \t\treturn this.sidebarProvider.getProviderProfileEntry(name)\n339 | \t}\n340 | \n341 | \tpublic async createProfile(name: string, profile?: ProviderSettings, activate: boolean = true) {\n342 | \t\tconst entry = this.getProfileEntry(name)\n343 | \n344 | \t\tif (entry) {\n345 | \t\t\tthrow new Error(`Profile with name \"${name}\" already exists`)\n346 | \t\t}\n347 | \n348 | \t\tconst id = await this.sidebarProvider.upsertProviderProfile(name, profile ?? {}, activate)\n349 | \n350 | \t\tif (!id) {\n351 | \t\t\tthrow new Error(`Failed to create profile with name \"${name}\"`)\n352 | \t\t}\n353 | \n354 | \t\treturn id\n355 | \t}\n356 | \n357 | \tpublic async updateProfile(\n358 | \t\tname: string,\n359 | \t\tprofile: ProviderSettings,\n360 | \t\tactivate: boolean = true,\n361 | \t): Promise<string | undefined> {\n362 | \t\tconst entry = this.getProfileEntry(name)\n363 | \n364 | \t\tif (!entry) {\n365 | \t\t\tthrow new Error(`Profile with name \"${name}\" does not exist`)\n366 | \t\t}\n367 | \n368 | \t\tconst id = await this.sidebarProvider.upsertProviderProfile(name, profile, activate)\n369 | \n370 | \t\tif (!id) {\n371 | \t\t\tthrow new Error(`Failed to update profile with name \"${name}\"`)\n372 | \t\t}\n373 | \n374 | \t\treturn id\n375 | \t}\n376 | \n377 | \tpublic async upsertProfile(\n378 | \t\tname: string,\n379 | \t\tprofile: ProviderSettings,\n380 | \t\tactivate: boolean = true,\n381 | \t): Promise<string | undefined> {\n382 | \t\tconst id = await this.sidebarProvider.upsertProviderProfile(name, profile, activate)\n383 | \n384 | \t\tif (!id) {\n385 | \t\t\tthrow new Error(`Failed to upsert profile with name \"${name}\"`)\n386 | \t\t}\n387 | \n388 | \t\treturn id\n389 | \t}\n390 | \n391 | \tpublic async deleteProfile(name: string): Promise<void> {\n392 | \t\tconst entry = this.getProfileEntry(name)\n393 | \n394 | \t\tif (!entry) {\n395 | \t\t\tthrow new Error(`Profile with name \"${name}\" does not exist`)\n396 | \t\t}\n397 | \n398 | \t\tawait this.sidebarProvider.deleteProviderProfile(entry)\n399 | \t}\n400 | \n401 | \tpublic getActiveProfile(): string | undefined {\n402 | \t\treturn this.getConfiguration().currentApiConfigName\n403 | \t}\n404 | \n405 | \tpublic async setActiveProfile(name: string): Promise<string | undefined> {\n406 | \t\tconst entry = this.getProfileEntry(name)\n407 | \n408 | \t\tif (!entry) {\n409 | \t\t\tthrow new Error(`Profile with name \"${name}\" does not exist`)\n410 | \t\t}\n411 | \n412 | \t\tawait this.sidebarProvider.activateProviderProfile({ name })\n413 | \t\treturn this.getActiveProfile()\n414 | \t}\n415 | }\n</content>\n</file>\n</files>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:22:56.214Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.06\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | In Progress |\n| 5 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 6 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 7 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<update_todo_list>\n<todos>\n[x] 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。\n[x] 识别与大模型交互相关的函数或模块，并阅读相关文件。\n[x] 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。\n[x] 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。\n[-] 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。\n[ ] 分析请求构建、发送和响应处理的详细过程。\n[ ] 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。\n[ ] 编写代码分析文档，并保存到指定目录。\n</todos>\n</update_todo_list>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[update_todo_list] Result:"
				},
				{
					"text": "Todo list updated successfully."
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:23:04.123Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.07\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | Completed |\n| 5 | 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。 | In Progress |\n| 6 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 7 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 8 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<read_file>\n<args>\n<file>\n<path>kilocode/src/core/webview/ClineProvider.ts</path>\n</file>\n</args>\n</read_file>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[read_file for 'kilocode/src/core/webview/ClineProvider.ts'. Reading multiple files at once is more efficient for the LLM. If other files are relevant to your current task, please read them simultaneously.] Result:"
				},
				{
					"text": "<files>\n<file><path>kilocode/src/core/webview/ClineProvider.ts</path>\n<content lines=\"1-2367\">\n   1 | import os from \"os\"\n   2 | import * as path from \"path\"\n   3 | import fs from \"fs/promises\"\n   4 | import EventEmitter from \"events\"\n   5 | \n   6 | import { Anthropic } from \"@anthropic-ai/sdk\"\n   7 | import delay from \"delay\"\n   8 | import axios from \"axios\"\n   9 | import pWaitFor from \"p-wait-for\"\n  10 | import * as vscode from \"vscode\"\n  11 | \n  12 | import {\n  13 | \ttype GlobalState,\n  14 | \ttype ProviderName,\n  15 | \ttype ProviderSettings,\n  16 | \ttype RooCodeSettings,\n  17 | \ttype ProviderSettingsEntry,\n  18 | \ttype TelemetryProperties,\n  19 | \ttype TelemetryPropertiesProvider,\n  20 | \ttype CodeActionId,\n  21 | \ttype CodeActionName,\n  22 | \ttype TerminalActionId,\n  23 | \ttype TerminalActionPromptType,\n  24 | \ttype HistoryItem,\n  25 | \ttype CloudUserInfo,\n  26 | \trequestyDefaultModelId,\n  27 | \topenRouterDefaultModelId,\n  28 | \tglamaDefaultModelId,\n  29 | \tORGANIZATION_ALLOW_ALL,\n  30 | \tDEFAULT_TERMINAL_OUTPUT_CHARACTER_LIMIT,\n  31 | \tDEFAULT_WRITE_DELAY_MS,\n  32 | } from \"@roo-code/types\"\n  33 | import { TelemetryService } from \"@roo-code/telemetry\"\n  34 | import { CloudService, getRooCodeApiUrl } from \"@roo-code/cloud\"\n  35 | \n  36 | import { t } from \"../../i18n\"\n  37 | import { setPanel } from \"../../activate/registerCommands\"\n  38 | import { Package } from \"../../shared/package\"\n  39 | import { findLast } from \"../../shared/array\"\n  40 | import { supportPrompt } from \"../../shared/support-prompt\"\n  41 | import { GlobalFileNames } from \"../../shared/globalFileNames\"\n  42 | import { ExtensionMessage, MarketplaceInstalledMetadata } from \"../../shared/ExtensionMessage\"\n  43 | import { Mode, defaultModeSlug, getModeBySlug } from \"../../shared/modes\"\n  44 | import { experimentDefault } from \"../../shared/experiments\"\n  45 | import { formatLanguage } from \"../../shared/language\"\n  46 | import { Terminal } from \"../../integrations/terminal/Terminal\"\n  47 | import { downloadTask } from \"../../integrations/misc/export-markdown\"\n  48 | import { getTheme } from \"../../integrations/theme/getTheme\"\n  49 | import WorkspaceTracker from \"../../integrations/workspace/WorkspaceTracker\"\n  50 | import { McpHub } from \"../../services/mcp/McpHub\"\n  51 | import { McpServerManager } from \"../../services/mcp/McpServerManager\"\n  52 | import { MarketplaceManager } from \"../../services/marketplace\"\n  53 | import { ShadowCheckpointService } from \"../../services/checkpoints/ShadowCheckpointService\"\n  54 | import { CodeIndexManager } from \"../../services/code-index/manager\"\n  55 | import type { IndexProgressUpdate } from \"../../services/code-index/interfaces/manager\"\n  56 | import { MdmService } from \"../../services/mdm/MdmService\"\n  57 | import { fileExistsAtPath } from \"../../utils/fs\"\n  58 | import { setTtsEnabled, setTtsSpeed } from \"../../utils/tts\"\n  59 | import { ContextProxy } from \"../config/ContextProxy\"\n  60 | import { getEnabledRules } from \"./kilorules\"\n  61 | import { ProviderSettingsManager } from \"../config/ProviderSettingsManager\"\n  62 | import { CustomModesManager } from \"../config/CustomModesManager\"\n  63 | import { buildApiHandler } from \"../../api\"\n  64 | import { Task, TaskOptions } from \"../task/Task\"\n  65 | import { getNonce } from \"./getNonce\"\n  66 | import { getUri } from \"./getUri\"\n  67 | import { getSystemPromptFilePath } from \"../prompts/sections/custom-system-prompt\"\n  68 | import { getWorkspacePath } from \"../../utils/path\"\n  69 | import { webviewMessageHandler } from \"./webviewMessageHandler\"\n  70 | import { WebviewMessage } from \"../../shared/WebviewMessage\"\n  71 | import { EMBEDDING_MODEL_PROFILES } from \"../../shared/embeddingModels\"\n  72 | import { ProfileValidator } from \"../../shared/ProfileValidator\"\n  73 | import { getWorkspaceGitInfo } from \"../../utils/git\"\n  74 | \n  75 | import { McpDownloadResponse, McpMarketplaceCatalog } from \"../../shared/kilocode/mcp\" //kilocode_change\n  76 | import { McpServer } from \"../../shared/mcp\" // kilocode_change\n  77 | import { OpenRouterHandler } from \"../../api/providers\" // kilocode_change\n  78 | import { stringifyError } from \"../../shared/kilocode/errorUtils\"\n  79 | \n  80 | /**\n  81 |  * https://github.com/microsoft/vscode-webview-ui-toolkit-samples/blob/main/default/weather-webview/src/providers/WeatherViewProvider.ts\n  82 |  * https://github.com/KumarVariable/vscode-extension-sidebar-html/blob/master/src/customSidebarViewProvider.ts\n  83 |  */\n  84 | \n  85 | export type ClineProviderEvents = {\n  86 | \ttaskCreated: [task: Task]\n  87 | }\n  88 | \n  89 | export class ClineProvider\n  90 | \textends EventEmitter<ClineProviderEvents>\n  91 | \timplements vscode.WebviewViewProvider, TelemetryPropertiesProvider\n  92 | {\n  93 | \t// Used in package.json as the view's id. This value cannot be changed due\n  94 | \t// to how VSCode caches views based on their id, and updating the id would\n  95 | \t// break existing instances of the extension.\n  96 | \tpublic static readonly sideBarId = `${Package.name}.SidebarProvider`\n  97 | \tpublic static readonly tabPanelId = `${Package.name}.TabPanelProvider`\n  98 | \tprivate static activeInstances: Set<ClineProvider> = new Set()\n  99 | \tprivate disposables: vscode.Disposable[] = []\n 100 | \tprivate webviewDisposables: vscode.Disposable[] = []\n 101 | \tprivate view?: vscode.WebviewView | vscode.WebviewPanel\n 102 | \tprivate clineStack: Task[] = []\n 103 | \tprivate codeIndexStatusSubscription?: vscode.Disposable\n 104 | \tprivate _workspaceTracker?: WorkspaceTracker // workSpaceTracker read-only for access outside this class\n 105 | \tpublic get workspaceTracker(): WorkspaceTracker | undefined {\n 106 | \t\treturn this._workspaceTracker\n 107 | \t}\n 108 | \tprotected mcpHub?: McpHub // Change from private to protected\n 109 | \tprivate marketplaceManager: MarketplaceManager\n 110 | \tprivate mdmService?: MdmService\n 111 | \n 112 | \tpublic isViewLaunched = false\n 113 | \tpublic settingsImportedAt?: number\n 114 | \tpublic readonly latestAnnouncementId = \"jul-29-2025-3-25-0\" // Update for v3.25.0 announcement\n 115 | \tpublic readonly providerSettingsManager: ProviderSettingsManager\n 116 | \tpublic readonly customModesManager: CustomModesManager\n 117 | \n 118 | \tconstructor(\n 119 | \t\treadonly context: vscode.ExtensionContext,\n 120 | \t\tprivate readonly outputChannel: vscode.OutputChannel,\n 121 | \t\tprivate readonly renderContext: \"sidebar\" | \"editor\" = \"sidebar\",\n 122 | \t\tpublic readonly contextProxy: ContextProxy,\n 123 | \t\tpublic readonly codeIndexManager?: CodeIndexManager,\n 124 | \t\tmdmService?: MdmService,\n 125 | \t) {\n 126 | \t\tsuper()\n 127 | \n 128 | \t\tthis.log(\"ClineProvider instantiated\")\n 129 | \t\tClineProvider.activeInstances.add(this)\n 130 | \n 131 | \t\tthis.codeIndexManager = codeIndexManager\n 132 | \t\tthis.mdmService = mdmService\n 133 | \t\tthis.updateGlobalState(\"codebaseIndexModels\", EMBEDDING_MODEL_PROFILES)\n 134 | \n 135 | \t\t// Start configuration loading (which might trigger indexing) in the background.\n 136 | \t\t// Don't await, allowing activation to continue immediately.\n 137 | \n 138 | \t\t// Register this provider with the telemetry service to enable it to add\n 139 | \t\t// properties like mode and provider.\n 140 | \t\tTelemetryService.instance.setProvider(this)\n 141 | \n 142 | \t\tthis._workspaceTracker = new WorkspaceTracker(this)\n 143 | \n 144 | \t\tthis.providerSettingsManager = new ProviderSettingsManager(this.context)\n 145 | \n 146 | \t\tthis.customModesManager = new CustomModesManager(this.context, async () => {\n 147 | \t\t\tawait this.postStateToWebview()\n 148 | \t\t})\n 149 | \n 150 | \t\t// Initialize MCP Hub through the singleton manager\n 151 | \t\tMcpServerManager.getInstance(this.context, this)\n 152 | \t\t\t.then((hub) => {\n 153 | \t\t\t\tthis.mcpHub = hub\n 154 | \t\t\t\tthis.mcpHub.registerClient()\n 155 | \t\t\t})\n 156 | \t\t\t.catch((error) => {\n 157 | \t\t\t\tthis.log(`Failed to initialize MCP Hub: ${error}`)\n 158 | \t\t\t})\n 159 | \n 160 | \t\tthis.marketplaceManager = new MarketplaceManager(this.context, this.customModesManager)\n 161 | \t}\n 162 | \n 163 | \t// Adds a new Cline instance to clineStack, marking the start of a new task.\n 164 | \t// The instance is pushed to the top of the stack (LIFO order).\n 165 | \t// When the task is completed, the top instance is removed, reactivating the previous task.\n 166 | \tasync addClineToStack(cline: Task) {\n 167 | \t\tconsole.log(`[subtasks] adding task ${cline.taskId}.${cline.instanceId} to stack`)\n 168 | \n 169 | \t\t// Add this cline instance into the stack that represents the order of all the called tasks.\n 170 | \t\tthis.clineStack.push(cline)\n 171 | \n 172 | \t\t// Ensure getState() resolves correctly.\n 173 | \t\tconst state = await this.getState()\n 174 | \n 175 | \t\tif (!state || typeof state.mode !== \"string\") {\n 176 | \t\t\tthrow new Error(t(\"common:errors.retrieve_current_mode\"))\n 177 | \t\t}\n 178 | \t}\n 179 | \n 180 | \t// Removes and destroys the top Cline instance (the current finished task),\n 181 | \t// activating the previous one (resuming the parent task).\n 182 | \tasync removeClineFromStack() {\n 183 | \t\tif (this.clineStack.length === 0) {\n 184 | \t\t\treturn\n 185 | \t\t}\n 186 | \n 187 | \t\t// Pop the top Cline instance from the stack.\n 188 | \t\tlet cline = this.clineStack.pop()\n 189 | \n 190 | \t\tif (cline) {\n 191 | \t\t\tconsole.log(`[subtasks] removing task ${cline.taskId}.${cline.instanceId} from stack`)\n 192 | \n 193 | \t\t\ttry {\n 194 | \t\t\t\t// Abort the running task and set isAbandoned to true so\n 195 | \t\t\t\t// all running promises will exit as well.\n 196 | \t\t\t\tawait cline.abortTask(true)\n 197 | \t\t\t} catch (e) {\n 198 | \t\t\t\tthis.log(\n 199 | \t\t\t\t\t`[subtasks] encountered error while aborting task ${cline.taskId}.${cline.instanceId}: ${e.message}`,\n 200 | \t\t\t\t)\n 201 | \t\t\t}\n 202 | \n 203 | \t\t\t// Make sure no reference kept, once promises end it will be\n 204 | \t\t\t// garbage collected.\n 205 | \t\t\tcline = undefined\n 206 | \t\t}\n 207 | \t}\n 208 | \n 209 | \t// returns the current cline object in the stack (the top one)\n 210 | \t// if the stack is empty, returns undefined\n 211 | \tgetCurrentCline(): Task | undefined {\n 212 | \t\tif (this.clineStack.length === 0) {\n 213 | \t\t\treturn undefined\n 214 | \t\t}\n 215 | \t\treturn this.clineStack[this.clineStack.length - 1]\n 216 | \t}\n 217 | \n 218 | \t// returns the current clineStack length (how many cline objects are in the stack)\n 219 | \tgetClineStackSize(): number {\n 220 | \t\treturn this.clineStack.length\n 221 | \t}\n 222 | \n 223 | \tpublic getCurrentTaskStack(): string[] {\n 224 | \t\treturn this.clineStack.map((cline) => cline.taskId)\n 225 | \t}\n 226 | \n 227 | \t// remove the current task/cline instance (at the top of the stack), so this task is finished\n 228 | \t// and resume the previous task/cline instance (if it exists)\n 229 | \t// this is used when a sub task is finished and the parent task needs to be resumed\n 230 | \tasync finishSubTask(lastMessage: string) {\n 231 | \t\tconsole.log(`[subtasks] finishing subtask ${lastMessage}`)\n 232 | \t\t// remove the last cline instance from the stack (this is the finished sub task)\n 233 | \t\tawait this.removeClineFromStack()\n 234 | \t\t// resume the last cline instance in the stack (if it exists - this is the 'parent' calling task)\n 235 | \t\tawait this.getCurrentCline()?.resumePausedTask(lastMessage)\n 236 | \t}\n 237 | \n 238 | \t// Clear the current task without treating it as a subtask\n 239 | \t// This is used when the user cancels a task that is not a subtask\n 240 | \tasync clearTask() {\n 241 | \t\tawait this.removeClineFromStack()\n 242 | \t}\n 243 | \n 244 | \t/*\n 245 | \tVSCode extensions use the disposable pattern to clean up resources when the sidebar/editor tab is closed by the user or system. This applies to event listening, commands, interacting with the UI, etc.\n 246 | \t- https://vscode-docs.readthedocs.io/en/stable/extensions/patterns-and-principles/\n 247 | \t- https://github.com/microsoft/vscode-extension-samples/blob/main/webview-sample/src/extension.ts\n 248 | \t*/\n 249 | \tprivate clearWebviewResources() {\n 250 | \t\twhile (this.webviewDisposables.length) {\n 251 | \t\t\tconst x = this.webviewDisposables.pop()\n 252 | \t\t\tif (x) {\n 253 | \t\t\t\tx.dispose()\n 254 | \t\t\t}\n 255 | \t\t}\n 256 | \t}\n 257 | \n 258 | \tasync dispose() {\n 259 | \t\tthis.log(\"Disposing ClineProvider...\")\n 260 | \t\tawait this.removeClineFromStack()\n 261 | \t\tthis.log(\"Cleared task\")\n 262 | \n 263 | \t\tif (this.view && \"dispose\" in this.view) {\n 264 | \t\t\tthis.view.dispose()\n 265 | \t\t\tthis.log(\"Disposed webview\")\n 266 | \t\t}\n 267 | \n 268 | \t\tthis.clearWebviewResources()\n 269 | \n 270 | \t\twhile (this.disposables.length) {\n 271 | \t\t\tconst x = this.disposables.pop()\n 272 | \n 273 | \t\t\tif (x) {\n 274 | \t\t\t\tx.dispose()\n 275 | \t\t\t}\n 276 | \t\t}\n 277 | \n 278 | \t\tthis._workspaceTracker?.dispose()\n 279 | \t\tthis._workspaceTracker = undefined\n 280 | \t\tawait this.mcpHub?.unregisterClient()\n 281 | \t\tthis.mcpHub = undefined\n 282 | \t\tthis.marketplaceManager?.cleanup()\n 283 | \t\tthis.customModesManager?.dispose()\n 284 | \t\tthis.log(\"Disposed all disposables\")\n 285 | \t\tClineProvider.activeInstances.delete(this)\n 286 | \n 287 | \t\tMcpServerManager.unregisterProvider(this)\n 288 | \t}\n 289 | \n 290 | \tpublic static getVisibleInstance(): ClineProvider | undefined {\n 291 | \t\treturn findLast(Array.from(this.activeInstances), (instance) => instance.view?.visible === true)\n 292 | \t}\n 293 | \n 294 | \tpublic static async getInstance(): Promise<ClineProvider | undefined> {\n 295 | \t\tlet visibleProvider = ClineProvider.getVisibleInstance()\n 296 | \n 297 | \t\t// If no visible provider, try to show the sidebar view\n 298 | \t\tif (!visibleProvider) {\n 299 | \t\t\tawait vscode.commands.executeCommand(`${Package.name}.SidebarProvider.focus`)\n 300 | \t\t\t// Wait briefly for the view to become visible\n 301 | \t\t\tawait delay(100)\n 302 | \t\t\tvisibleProvider = ClineProvider.getVisibleInstance()\n 303 | \t\t}\n 304 | \n 305 | \t\t// If still no visible provider, return\n 306 | \t\tif (!visibleProvider) {\n 307 | \t\t\treturn\n 308 | \t\t}\n 309 | \n 310 | \t\treturn visibleProvider\n 311 | \t}\n 312 | \n 313 | \tpublic static async isActiveTask(): Promise<boolean> {\n 314 | \t\tconst visibleProvider = await ClineProvider.getInstance()\n 315 | \t\tif (!visibleProvider) {\n 316 | \t\t\treturn false\n 317 | \t\t}\n 318 | \n 319 | \t\t// Check if there is a cline instance in the stack (if this provider has an active task)\n 320 | \t\tif (visibleProvider.getCurrentCline()) {\n 321 | \t\t\treturn true\n 322 | \t\t}\n 323 | \n 324 | \t\treturn false\n 325 | \t}\n 326 | \n 327 | \tpublic static async handleCodeAction(\n 328 | \t\tcommand: CodeActionId,\n 329 | \t\tpromptType: CodeActionName,\n 330 | \t\tparams: Record<string, string | any[]>,\n 331 | \t): Promise<void> {\n 332 | \t\t// Capture telemetry for code action usage\n 333 | \t\tTelemetryService.instance.captureCodeActionUsed(promptType)\n 334 | \n 335 | \t\tconst visibleProvider = await ClineProvider.getInstance()\n 336 | \n 337 | \t\tif (!visibleProvider) {\n 338 | \t\t\treturn\n 339 | \t\t}\n 340 | \n 341 | \t\tconst { customSupportPrompts } = await visibleProvider.getState()\n 342 | \n 343 | \t\t// TODO: Improve type safety for promptType.\n 344 | \t\tconst prompt = supportPrompt.create(promptType, params, customSupportPrompts)\n 345 | \n 346 | \t\tif (command === \"addToContext\") {\n 347 | \t\t\tawait visibleProvider.postMessageToWebview({ type: \"invoke\", invoke: \"setChatBoxMessage\", text: prompt })\n 348 | \t\t\treturn\n 349 | \t\t}\n 350 | \n 351 | \t\tawait visibleProvider.initClineWithTask(prompt)\n 352 | \t}\n 353 | \n 354 | \tpublic static async handleTerminalAction(\n 355 | \t\tcommand: TerminalActionId,\n 356 | \t\tpromptType: TerminalActionPromptType,\n 357 | \t\tparams: Record<string, string | any[]>,\n 358 | \t): Promise<void> {\n 359 | \t\tTelemetryService.instance.captureCodeActionUsed(promptType)\n 360 | \n 361 | \t\tconst visibleProvider = await ClineProvider.getInstance()\n 362 | \n 363 | \t\tif (!visibleProvider) {\n 364 | \t\t\treturn\n 365 | \t\t}\n 366 | \n 367 | \t\tconst { customSupportPrompts } = await visibleProvider.getState()\n 368 | \t\tconst prompt = supportPrompt.create(promptType, params, customSupportPrompts)\n 369 | \n 370 | \t\tif (command === \"terminalAddToContext\") {\n 371 | \t\t\tawait visibleProvider.postMessageToWebview({ type: \"invoke\", invoke: \"setChatBoxMessage\", text: prompt })\n 372 | \t\t\treturn\n 373 | \t\t}\n 374 | \n 375 | \t\ttry {\n 376 | \t\t\tawait visibleProvider.initClineWithTask(prompt)\n 377 | \t\t} catch (error) {\n 378 | \t\t\tif (error instanceof OrganizationAllowListViolationError) {\n 379 | \t\t\t\t// Errors from terminal commands seem to get swallowed / ignored.\n 380 | \t\t\t\tvscode.window.showErrorMessage(error.message)\n 381 | \t\t\t}\n 382 | \n 383 | \t\t\tthrow error\n 384 | \t\t}\n 385 | \t}\n 386 | \n 387 | \tasync resolveWebviewView(webviewView: vscode.WebviewView | vscode.WebviewPanel) {\n 388 | \t\tthis.log(\"Resolving webview view\")\n 389 | \n 390 | \t\tthis.view = webviewView\n 391 | \n 392 | \t\t// kilocode_change start: extract constant inTabMode\n 393 | \t\t// Set panel reference according to webview type\n 394 | \t\tconst inTabMode = \"onDidChangeViewState\" in webviewView\n 395 | \t\tif (inTabMode) {\n 396 | \t\t\t// Tag page type\n 397 | \t\t\tsetPanel(webviewView, \"tab\")\n 398 | \t\t} else if (\"onDidChangeVisibility\" in webviewView) {\n 399 | \t\t\t// Sidebar Type\n 400 | \t\t\tsetPanel(webviewView, \"sidebar\")\n 401 | \t\t}\n 402 | \t\t// kilocode_change end\n 403 | \n 404 | \t\t// Initialize out-of-scope variables that need to receive persistent global state values\n 405 | \t\tthis.getState().then(\n 406 | \t\t\t({\n 407 | \t\t\t\tterminalShellIntegrationTimeout = Terminal.defaultShellIntegrationTimeout,\n 408 | \t\t\t\tterminalShellIntegrationDisabled = true, // kilocode_change: default\n 409 | \t\t\t\tterminalCommandDelay = 0,\n 410 | \t\t\t\tterminalZshClearEolMark = true,\n 411 | \t\t\t\tterminalZshOhMy = false,\n 412 | \t\t\t\tterminalZshP10k = false,\n 413 | \t\t\t\tterminalPowershellCounter = false,\n 414 | \t\t\t\tterminalZdotdir = false,\n 415 | \t\t\t}) => {\n 416 | \t\t\t\tTerminal.setShellIntegrationTimeout(terminalShellIntegrationTimeout)\n 417 | \t\t\t\tTerminal.setShellIntegrationDisabled(terminalShellIntegrationDisabled)\n 418 | \t\t\t\tTerminal.setCommandDelay(terminalCommandDelay)\n 419 | \t\t\t\tTerminal.setTerminalZshClearEolMark(terminalZshClearEolMark)\n 420 | \t\t\t\tTerminal.setTerminalZshOhMy(terminalZshOhMy)\n 421 | \t\t\t\tTerminal.setTerminalZshP10k(terminalZshP10k)\n 422 | \t\t\t\tTerminal.setPowershellCounter(terminalPowershellCounter)\n 423 | \t\t\t\tTerminal.setTerminalZdotdir(terminalZdotdir)\n 424 | \t\t\t},\n 425 | \t\t)\n 426 | \n 427 | \t\t// Initialize tts enabled state\n 428 | \t\tthis.getState().then(({ ttsEnabled }) => {\n 429 | \t\t\tsetTtsEnabled(ttsEnabled ?? false)\n 430 | \t\t})\n 431 | \n 432 | \t\t// Initialize tts speed state\n 433 | \t\tthis.getState().then(({ ttsSpeed }) => {\n 434 | \t\t\tsetTtsSpeed(ttsSpeed ?? 1)\n 435 | \t\t})\n 436 | \n 437 | \t\twebviewView.webview.options = {\n 438 | \t\t\t// Allow scripts in the webview\n 439 | \t\t\tenableScripts: true,\n 440 | \t\t\tlocalResourceRoots: [this.contextProxy.extensionUri],\n 441 | \t\t}\n 442 | \n 443 | \t\twebviewView.webview.html =\n 444 | \t\t\tthis.contextProxy.extensionMode === vscode.ExtensionMode.Development\n 445 | \t\t\t\t? await this.getHMRHtmlContent(webviewView.webview)\n 446 | \t\t\t\t: this.getHtmlContent(webviewView.webview)\n 447 | \n 448 | \t\t// Sets up an event listener to listen for messages passed from the webview view context\n 449 | \t\t// and executes code based on the message that is received\n 450 | \t\tthis.setWebviewMessageListener(webviewView.webview)\n 451 | \n 452 | \t\t// Subscribe to code index status updates if the manager exists\n 453 | \t\tif (this.codeIndexManager) {\n 454 | \t\t\tthis.codeIndexStatusSubscription = this.codeIndexManager.onProgressUpdate((update: IndexProgressUpdate) => {\n 455 | \t\t\t\tthis.postMessageToWebview({\n 456 | \t\t\t\t\ttype: \"indexingStatusUpdate\",\n 457 | \t\t\t\t\tvalues: update,\n 458 | \t\t\t\t})\n 459 | \t\t\t})\n 460 | \t\t\tthis.webviewDisposables.push(this.codeIndexStatusSubscription)\n 461 | \t\t}\n 462 | \n 463 | \t\t// Logs show up in bottom panel > Debug Console\n 464 | \t\t//console.log(\"registering listener\")\n 465 | \n 466 | \t\t// Listen for when the panel becomes visible\n 467 | \t\t// https://github.com/microsoft/vscode-discussions/discussions/840\n 468 | \t\tif (\"onDidChangeViewState\" in webviewView) {\n 469 | \t\t\t// WebviewView and WebviewPanel have all the same properties except for this visibility listener\n 470 | \t\t\t// panel\n 471 | \t\t\tconst viewStateDisposable = webviewView.onDidChangeViewState(() => {\n 472 | \t\t\t\tif (this.view?.visible) {\n 473 | \t\t\t\t\tthis.postMessageToWebview({ type: \"action\", action: \"didBecomeVisible\" })\n 474 | \t\t\t\t}\n 475 | \t\t\t})\n 476 | \t\t\tthis.webviewDisposables.push(viewStateDisposable)\n 477 | \t\t} else if (\"onDidChangeVisibility\" in webviewView) {\n 478 | \t\t\t// sidebar\n 479 | \t\t\tconst visibilityDisposable = webviewView.onDidChangeVisibility(() => {\n 480 | \t\t\t\tif (this.view?.visible) {\n 481 | \t\t\t\t\tthis.postMessageToWebview({ type: \"action\", action: \"didBecomeVisible\" })\n 482 | \t\t\t\t}\n 483 | \t\t\t})\n 484 | \t\t\tthis.webviewDisposables.push(visibilityDisposable)\n 485 | \t\t}\n 486 | \n 487 | \t\t// Listen for when the view is disposed\n 488 | \t\t// This happens when the user closes the view or when the view is closed programmatically\n 489 | \t\twebviewView.onDidDispose(\n 490 | \t\t\tasync () => {\n 491 | \t\t\t\tif (inTabMode) {\n 492 | \t\t\t\t\tthis.log(\"Disposing ClineProvider instance for tab view\")\n 493 | \t\t\t\t\tawait this.dispose()\n 494 | \t\t\t\t} else {\n 495 | \t\t\t\t\tthis.log(\"Clearing webview resources for sidebar view\")\n 496 | \t\t\t\t\tthis.clearWebviewResources()\n 497 | \t\t\t\t\tthis.codeIndexStatusSubscription?.dispose()\n 498 | \t\t\t\t\tthis.codeIndexStatusSubscription = undefined\n 499 | \t\t\t\t}\n 500 | \t\t\t},\n 501 | \t\t\tnull,\n 502 | \t\t\tthis.disposables,\n 503 | \t\t)\n 504 | \n 505 | \t\t// Listen for when color changes\n 506 | \t\tconst configDisposable = vscode.workspace.onDidChangeConfiguration(async (e) => {\n 507 | \t\t\tif (e && e.affectsConfiguration(\"workbench.colorTheme\")) {\n 508 | \t\t\t\t// Sends latest theme name to webview\n 509 | \t\t\t\tawait this.postMessageToWebview({ type: \"theme\", text: JSON.stringify(await getTheme()) })\n 510 | \t\t\t}\n 511 | \t\t})\n 512 | \t\tthis.webviewDisposables.push(configDisposable)\n 513 | \n 514 | \t\t// If the extension is starting a new session, clear previous task state.\n 515 | \t\tawait this.removeClineFromStack()\n 516 | \n 517 | \t\tthis.log(\"Webview view resolved\")\n 518 | \t}\n 519 | \n 520 | \tpublic async initClineWithSubTask(parent: Task, task?: string, images?: string[]) {\n 521 | \t\treturn this.initClineWithTask(task, images, parent)\n 522 | \t}\n 523 | \n 524 | \t// When initializing a new task, (not from history but from a tool command\n 525 | \t// new_task) there is no need to remove the previous task since the new\n 526 | \t// task is a subtask of the previous one, and when it finishes it is removed\n 527 | \t// from the stack and the caller is resumed in this way we can have a chain\n 528 | \t// of tasks, each one being a sub task of the previous one until the main\n 529 | \t// task is finished.\n 530 | \tpublic async initClineWithTask(\n 531 | \t\ttext?: string,\n 532 | \t\timages?: string[],\n 533 | \t\tparentTask?: Task,\n 534 | \t\toptions: Partial<\n 535 | \t\t\tPick<\n 536 | \t\t\t\tTaskOptions,\n 537 | \t\t\t\t\"enableDiff\" | \"enableCheckpoints\" | \"fuzzyMatchThreshold\" | \"consecutiveMistakeLimit\" | \"experiments\"\n 538 | \t\t\t>\n 539 | \t\t> = {},\n 540 | \t) {\n 541 | \t\tconst {\n 542 | \t\t\tapiConfiguration,\n 543 | \t\t\torganizationAllowList,\n 544 | \t\t\tdiffEnabled: enableDiff,\n 545 | \t\t\tenableCheckpoints,\n 546 | \t\t\tfuzzyMatchThreshold,\n 547 | \t\t\texperiments,\n 548 | \t\t} = await this.getState()\n 549 | \n 550 | \t\tif (!ProfileValidator.isProfileAllowed(apiConfiguration, organizationAllowList)) {\n 551 | \t\t\tthrow new OrganizationAllowListViolationError(t(\"common:errors.violated_organization_allowlist\"))\n 552 | \t\t}\n 553 | \n 554 | \t\tconst task = new Task({\n 555 | \t\t\tcontext: this.context, // kilocode_change\n 556 | \t\t\tprovider: this,\n 557 | \t\t\tapiConfiguration,\n 558 | \t\t\tenableDiff,\n 559 | \t\t\tenableCheckpoints,\n 560 | \t\t\tfuzzyMatchThreshold,\n 561 | \t\t\tconsecutiveMistakeLimit: apiConfiguration.consecutiveMistakeLimit,\n 562 | \t\t\ttask: text,\n 563 | \t\t\timages,\n 564 | \t\t\texperiments,\n 565 | \t\t\trootTask: this.clineStack.length > 0 ? this.clineStack[0] : undefined,\n 566 | \t\t\tparentTask,\n 567 | \t\t\ttaskNumber: this.clineStack.length + 1,\n 568 | \t\t\tonCreated: (instance) => this.emit(\"taskCreated\", instance),\n 569 | \t\t\t...options,\n 570 | \t\t})\n 571 | \n 572 | \t\tawait this.addClineToStack(task)\n 573 | \n 574 | \t\tthis.log(\n 575 | \t\t\t`[subtasks] ${task.parentTask ? \"child\" : \"parent\"} task ${task.taskId}.${task.instanceId} instantiated`,\n 576 | \t\t)\n 577 | \n 578 | \t\treturn task\n 579 | \t}\n 580 | \n 581 | \tpublic async initClineWithHistoryItem(historyItem: HistoryItem & { rootTask?: Task; parentTask?: Task }) {\n 582 | \t\tawait this.removeClineFromStack()\n 583 | \n 584 | \t\t// If the history item has a saved mode, restore it and its associated API configuration\n 585 | \t\tif (historyItem.mode) {\n 586 | \t\t\t// Validate that the mode still exists\n 587 | \t\t\tconst customModes = await this.customModesManager.getCustomModes()\n 588 | \t\t\tconst modeExists = getModeBySlug(historyItem.mode, customModes) !== undefined\n 589 | \n 590 | \t\t\tif (!modeExists) {\n 591 | \t\t\t\t// Mode no longer exists, fall back to default mode\n 592 | \t\t\t\tthis.log(\n 593 | \t\t\t\t\t`Mode '${historyItem.mode}' from history no longer exists. Falling back to default mode '${defaultModeSlug}'.`,\n 594 | \t\t\t\t)\n 595 | \t\t\t\thistoryItem.mode = defaultModeSlug\n 596 | \t\t\t}\n 597 | \n 598 | \t\t\tawait this.updateGlobalState(\"mode\", historyItem.mode)\n 599 | \n 600 | \t\t\t// Load the saved API config for the restored mode if it exists\n 601 | \t\t\tconst savedConfigId = await this.providerSettingsManager.getModeConfigId(historyItem.mode)\n 602 | \t\t\tconst listApiConfig = await this.providerSettingsManager.listConfig()\n 603 | \n 604 | \t\t\t// Update listApiConfigMeta first to ensure UI has latest data\n 605 | \t\t\tawait this.updateGlobalState(\"listApiConfigMeta\", listApiConfig)\n 606 | \n 607 | \t\t\t// If this mode has a saved config, use it\n 608 | \t\t\tif (savedConfigId) {\n 609 | \t\t\t\tconst profile = listApiConfig.find(({ id }) => id === savedConfigId)\n 610 | \n 611 | \t\t\t\tif (profile?.name) {\n 612 | \t\t\t\t\ttry {\n 613 | \t\t\t\t\t\tawait this.activateProviderProfile({ name: profile.name })\n 614 | \t\t\t\t\t} catch (error) {\n 615 | \t\t\t\t\t\t// Log the error but continue with task restoration\n 616 | \t\t\t\t\t\tthis.log(\n 617 | \t\t\t\t\t\t\t`Failed to restore API configuration for mode '${historyItem.mode}': ${\n 618 | \t\t\t\t\t\t\t\terror instanceof Error ? error.message : String(error)\n 619 | \t\t\t\t\t\t\t}. Continuing with default configuration.`,\n 620 | \t\t\t\t\t\t)\n 621 | \t\t\t\t\t\t// The task will continue with the current/default configuration\n 622 | \t\t\t\t\t}\n 623 | \t\t\t\t}\n 624 | \t\t\t}\n 625 | \t\t}\n 626 | \n 627 | \t\tconst {\n 628 | \t\t\tapiConfiguration,\n 629 | \t\t\tdiffEnabled: enableDiff,\n 630 | \t\t\tenableCheckpoints,\n 631 | \t\t\tfuzzyMatchThreshold,\n 632 | \t\t\texperiments,\n 633 | \t\t} = await this.getState()\n 634 | \n 635 | \t\tconst task = new Task({\n 636 | \t\t\tcontext: this.context, // kilocode_change\n 637 | \t\t\tprovider: this,\n 638 | \t\t\tapiConfiguration,\n 639 | \t\t\tenableDiff,\n 640 | \t\t\tenableCheckpoints,\n 641 | \t\t\tfuzzyMatchThreshold,\n 642 | \t\t\tconsecutiveMistakeLimit: apiConfiguration.consecutiveMistakeLimit,\n 643 | \t\t\thistoryItem,\n 644 | \t\t\texperiments,\n 645 | \t\t\trootTask: historyItem.rootTask,\n 646 | \t\t\tparentTask: historyItem.parentTask,\n 647 | \t\t\ttaskNumber: historyItem.number,\n 648 | \t\t\tonCreated: (instance) => this.emit(\"taskCreated\", instance),\n 649 | \t\t})\n 650 | \n 651 | \t\tawait this.addClineToStack(task)\n 652 | \n 653 | \t\tthis.log(\n 654 | \t\t\t`[subtasks] ${task.parentTask ? \"child\" : \"parent\"} task ${task.taskId}.${task.instanceId} instantiated`,\n 655 | \t\t)\n 656 | \n 657 | \t\treturn task\n 658 | \t}\n 659 | \n 660 | \tpublic async postMessageToWebview(message: ExtensionMessage) {\n 661 | \t\tawait this.view?.webview.postMessage(message)\n 662 | \t}\n 663 | \n 664 | \tprivate async getHMRHtmlContent(webview: vscode.Webview): Promise<string> {\n 665 | \t\t// Try to read the port from the file\n 666 | \t\tlet localPort = \"5173\" // Default fallback\n 667 | \t\ttry {\n 668 | \t\t\tconst fs = require(\"fs\")\n 669 | \t\t\tconst path = require(\"path\")\n 670 | \t\t\tconst portFilePath = path.resolve(__dirname, \"../../.vite-port\")\n 671 | \n 672 | \t\t\tif (fs.existsSync(portFilePath)) {\n 673 | \t\t\t\tlocalPort = fs.readFileSync(portFilePath, \"utf8\").trim()\n 674 | \t\t\t\tconsole.log(`[ClineProvider:Vite] Using Vite server port from ${portFilePath}: ${localPort}`)\n 675 | \t\t\t} else {\n 676 | \t\t\t\tconsole.log(\n 677 | \t\t\t\t\t`[ClineProvider:Vite] Port file not found at ${portFilePath}, using default port: ${localPort}`,\n 678 | \t\t\t\t)\n 679 | \t\t\t}\n 680 | \t\t} catch (err) {\n 681 | \t\t\tconsole.error(\"[ClineProvider:Vite] Failed to read Vite port file:\", err)\n 682 | \t\t\t// Continue with default port if file reading fails\n 683 | \t\t}\n 684 | \n 685 | \t\tconst localServerUrl = `localhost:${localPort}`\n 686 | \n 687 | \t\t// Check if local dev server is running.\n 688 | \t\ttry {\n 689 | \t\t\tawait axios.get(`http://${localServerUrl}`)\n 690 | \t\t} catch (error) {\n 691 | \t\t\tvscode.window.showErrorMessage(t(\"common:errors.hmr_not_running\"))\n 692 | \n 693 | \t\t\treturn this.getHtmlContent(webview)\n 694 | \t\t}\n 695 | \n 696 | \t\tconst nonce = getNonce()\n 697 | \n 698 | \t\tconst stylesUri = getUri(webview, this.contextProxy.extensionUri, [\n 699 | \t\t\t\"webview-ui\",\n 700 | \t\t\t\"build\",\n 701 | \t\t\t\"assets\",\n 702 | \t\t\t\"index.css\",\n 703 | \t\t])\n 704 | \n 705 | \t\tconst codiconsUri = getUri(webview, this.contextProxy.extensionUri, [\"assets\", \"codicons\", \"codicon.css\"])\n 706 | \t\tconst materialIconsUri = getUri(webview, this.contextProxy.extensionUri, [\n 707 | \t\t\t\"assets\",\n 708 | \t\t\t\"vscode-material-icons\",\n 709 | \t\t\t\"icons\",\n 710 | \t\t])\n 711 | \t\tconst imagesUri = getUri(webview, this.contextProxy.extensionUri, [\"assets\", \"images\"])\n 712 | \t\tconst audioUri = getUri(webview, this.contextProxy.extensionUri, [\"webview-ui\", \"audio\"])\n 713 | \n 714 | \t\tconst file = \"src/index.tsx\"\n 715 | \t\tconst scriptUri = `http://${localServerUrl}/${file}`\n 716 | \n 717 | \t\tconst reactRefresh = /*html*/ `\n 718 | \t\t\t<script nonce=\"${nonce}\" type=\"module\">\n 719 | \t\t\t\timport RefreshRuntime from \"http://localhost:${localPort}/@react-refresh\"\n 720 | \t\t\t\tRefreshRuntime.injectIntoGlobalHook(window)\n 721 | \t\t\t\twindow.$RefreshReg$ = () => {}\n 722 | \t\t\t\twindow.$RefreshSig$ = () => (type) => type\n 723 | \t\t\t\twindow.__vite_plugin_react_preamble_installed__ = true\n 724 | \t\t\t</script>\n 725 | \t\t`\n 726 | \n 727 | \t\tconst csp = [\n 728 | \t\t\t\"default-src 'none'\",\n 729 | \t\t\t`font-src ${webview.cspSource} data:`,\n 730 | \t\t\t`style-src ${webview.cspSource} 'unsafe-inline' https://* http://${localServerUrl} http://0.0.0.0:${localPort}`,\n 731 | \t\t\t`img-src ${webview.cspSource} https://storage.googleapis.com https://img.clerk.com data: https://*.googleusercontent.com https://*.googleapis.com https://*.githubusercontent.com`, // kilocode_change: add https://*.googleusercontent.com and https://*.googleapis.com and https://*.githubusercontent.com\n 732 | \t\t\t`media-src ${webview.cspSource}`,\n 733 | \t\t\t`script-src 'unsafe-eval' ${webview.cspSource} https://* https://*.posthog.com http://${localServerUrl} http://0.0.0.0:${localPort} 'nonce-${nonce}'`,\n 734 | \t\t\t`connect-src ${webview.cspSource} https://* https://*.posthog.com ws://${localServerUrl} ws://0.0.0.0:${localPort} http://${localServerUrl} http://0.0.0.0:${localPort}`,\n 735 | \t\t]\n 736 | \n 737 | \t\treturn /*html*/ `\n 738 | \t\t\t<!DOCTYPE html>\n 739 | \t\t\t<html lang=\"en\">\n 740 | \t\t\t\t<head>\n 741 | \t\t\t\t\t<meta charset=\"utf-8\">\n 742 | \t\t\t\t\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n 743 | \t\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"${csp.join(\"; \")}\">\n 744 | \t\t\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"${stylesUri}\">\n 745 | \t\t\t\t\t<link href=\"${codiconsUri}\" rel=\"stylesheet\" />\n 746 | \t\t\t\t\t<script nonce=\"${nonce}\">\n 747 | \t\t\t\t\t\twindow.IMAGES_BASE_URI = \"${imagesUri}\"\n 748 | \t\t\t\t\t\twindow.AUDIO_BASE_URI = \"${audioUri}\"\n 749 | \t\t\t\t\t\twindow.MATERIAL_ICONS_BASE_URI = \"${materialIconsUri}\"\n 750 | \t\t\t\t\t</script>\n 751 | \t\t\t\t\t<title>Kilo Code</title>\n 752 | \t\t\t\t</head>\n 753 | \t\t\t\t<body>\n 754 | \t\t\t\t\t<div id=\"root\"></div>\n 755 | \t\t\t\t\t${reactRefresh}\n 756 | \t\t\t\t\t<script type=\"module\" src=\"${scriptUri}\"></script>\n 757 | \t\t\t\t</body>\n 758 | \t\t\t</html>\n 759 | \t\t`\n 760 | \t}\n 761 | \n 762 | \t/**\n 763 | \t * Defines and returns the HTML that should be rendered within the webview panel.\n 764 | \t *\n 765 | \t * @remarks This is also the place where references to the React webview build files\n 766 | \t * are created and inserted into the webview HTML.\n 767 | \t *\n 768 | \t * @param webview A reference to the extension webview\n 769 | \t * @param extensionUri The URI of the directory containing the extension\n 770 | \t * @returns A template string literal containing the HTML that should be\n 771 | \t * rendered within the webview panel\n 772 | \t */\n 773 | \tprivate getHtmlContent(webview: vscode.Webview): string {\n 774 | \t\t// Get the local path to main script run in the webview,\n 775 | \t\t// then convert it to a uri we can use in the webview.\n 776 | \n 777 | \t\t// The CSS file from the React build output\n 778 | \t\tconst stylesUri = getUri(webview, this.contextProxy.extensionUri, [\n 779 | \t\t\t\"webview-ui\",\n 780 | \t\t\t\"build\",\n 781 | \t\t\t\"assets\",\n 782 | \t\t\t\"index.css\",\n 783 | \t\t])\n 784 | \n 785 | \t\tconst scriptUri = getUri(webview, this.contextProxy.extensionUri, [\"webview-ui\", \"build\", \"assets\", \"index.js\"])\n 786 | \t\tconst codiconsUri = getUri(webview, this.contextProxy.extensionUri, [\"assets\", \"codicons\", \"codicon.css\"])\n 787 | \t\tconst materialIconsUri = getUri(webview, this.contextProxy.extensionUri, [\n 788 | \t\t\t\"assets\",\n 789 | \t\t\t\"vscode-material-icons\",\n 790 | \t\t\t\"icons\",\n 791 | \t\t])\n 792 | \t\tconst imagesUri = getUri(webview, this.contextProxy.extensionUri, [\"assets\", \"images\"])\n 793 | \t\tconst audioUri = getUri(webview, this.contextProxy.extensionUri, [\"webview-ui\", \"audio\"])\n 794 | \n 795 | \t\t// Use a nonce to only allow a specific script to be run.\n 796 | \t\t/*\n 797 | \t\tcontent security policy of your webview to only allow scripts that have a specific nonce\n 798 | \t\tcreate a content security policy meta tag so that only loading scripts with a nonce is allowed\n 799 | \t\tAs your extension grows you will likely want to add custom styles, fonts, and/or images to your webview. If you do, you will need to update the content security policy meta tag to explicitly allow for these resources. E.g.\n 800 | \t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; font-src ${webview.cspSource}; img-src ${webview.cspSource} https:; script-src 'nonce-${nonce}';\">\n 801 | \t\t- 'unsafe-inline' is required for styles due to vscode-webview-toolkit's dynamic style injection\n 802 | \t\t- since we pass base64 images to the webview, we need to specify img-src ${webview.cspSource} data:;\n 803 | \n 804 | \t\tin meta tag we add nonce attribute: A cryptographic nonce (only used once) to allow scripts. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial.\n 805 | \t\t*/\n 806 | \t\tconst nonce = getNonce()\n 807 | \n 808 | \t\t// Tip: Install the es6-string-html VS Code extension to enable code highlighting below\n 809 | \t\treturn /*html*/ `\n 810 |         <!DOCTYPE html>\n 811 |         <html lang=\"en\">\n 812 |           <head>\n 813 |             <meta charset=\"utf-8\">\n 814 |             <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,shrink-to-fit=no\">\n 815 |             <meta name=\"theme-color\" content=\"#000000\">\n 816 | \t\t\t<!-- kilocode_change: add https://*.googleusercontent.com https://*.googleapis.com https://*.githubusercontent.com to img-src, https://* to connect-src -->\n 817 |             <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; font-src ${webview.cspSource} data:; style-src ${webview.cspSource} 'unsafe-inline'; img-src ${webview.cspSource} https://*.googleusercontent.com https://storage.googleapis.com https://*.githubusercontent.com https://img.clerk.com data: https://*.googleapis.com; media-src ${webview.cspSource}; script-src ${webview.cspSource} 'wasm-unsafe-eval' 'nonce-${nonce}' https://us-assets.i.posthog.com 'strict-dynamic'; connect-src ${webview.cspSource} https://* https://openrouter.ai https://api.requesty.ai https://us.i.posthog.com https://us-assets.i.posthog.com;\">\n 818 |             <link rel=\"stylesheet\" type=\"text/css\" href=\"${stylesUri}\">\n 819 | \t\t\t<link href=\"${codiconsUri}\" rel=\"stylesheet\" />\n 820 | \t\t\t<script nonce=\"${nonce}\">\n 821 | \t\t\t\twindow.IMAGES_BASE_URI = \"${imagesUri}\"\n 822 | \t\t\t\twindow.AUDIO_BASE_URI = \"${audioUri}\"\n 823 | \t\t\t\twindow.MATERIAL_ICONS_BASE_URI = \"${materialIconsUri}\"\n 824 | \t\t\t</script>\n 825 |             <title>Kilo Code</title>\n 826 |           </head>\n 827 |           <body>\n 828 |             <noscript>You need to enable JavaScript to run this app.</noscript>\n 829 |             <div id=\"root\"></div>\n 830 |             <script nonce=\"${nonce}\" type=\"module\" src=\"${scriptUri}\"></script>\n 831 |           </body>\n 832 |         </html>\n 833 |       `\n 834 | \t}\n 835 | \n 836 | \t/**\n 837 | \t * Sets up an event listener to listen for messages passed from the webview context and\n 838 | \t * executes code based on the message that is received.\n 839 | \t *\n 840 | \t * @param webview A reference to the extension webview\n 841 | \t */\n 842 | \tprivate setWebviewMessageListener(webview: vscode.Webview) {\n 843 | \t\tconst onReceiveMessage = async (message: WebviewMessage) =>\n 844 | \t\t\twebviewMessageHandler(this, message, this.marketplaceManager)\n 845 | \n 846 | \t\tconst messageDisposable = webview.onDidReceiveMessage(onReceiveMessage)\n 847 | \t\tthis.webviewDisposables.push(messageDisposable)\n 848 | \t}\n 849 | \n 850 | \t/**\n 851 | \t * Handle switching to a new mode, including updating the associated API configuration\n 852 | \t * @param newMode The mode to switch to\n 853 | \t */\n 854 | \tpublic async handleModeSwitch(newMode: Mode) {\n 855 | \t\tconst cline = this.getCurrentCline()\n 856 | \n 857 | \t\tif (cline) {\n 858 | \t\t\tTelemetryService.instance.captureModeSwitch(cline.taskId, newMode)\n 859 | \t\t\tcline.emit(\"taskModeSwitched\", cline.taskId, newMode)\n 860 | \n 861 | \t\t\t// Store the current mode in case we need to rollback\n 862 | \t\t\tconst previousMode = (cline as any)._taskMode\n 863 | \n 864 | \t\t\ttry {\n 865 | \t\t\t\t// Update the task history with the new mode first\n 866 | \t\t\t\tconst history = this.getGlobalState(\"taskHistory\") ?? []\n 867 | \t\t\t\tconst taskHistoryItem = history.find((item) => item.id === cline.taskId)\n 868 | \t\t\t\tif (taskHistoryItem) {\n 869 | \t\t\t\t\ttaskHistoryItem.mode = newMode\n 870 | \t\t\t\t\tawait this.updateTaskHistory(taskHistoryItem)\n 871 | \t\t\t\t}\n 872 | \n 873 | \t\t\t\t// Only update the task's mode after successful persistence\n 874 | \t\t\t\t;(cline as any)._taskMode = newMode\n 875 | \t\t\t} catch (error) {\n 876 | \t\t\t\t// If persistence fails, log the error but don't update the in-memory state\n 877 | \t\t\t\tthis.log(\n 878 | \t\t\t\t\t`Failed to persist mode switch for task ${cline.taskId}: ${error instanceof Error ? error.message : String(error)}`,\n 879 | \t\t\t\t)\n 880 | \n 881 | \t\t\t\t// Optionally, we could emit an event to notify about the failure\n 882 | \t\t\t\t// This ensures the in-memory state remains consistent with persisted state\n 883 | \t\t\t\tthrow error\n 884 | \t\t\t}\n 885 | \t\t}\n 886 | \n 887 | \t\tawait this.updateGlobalState(\"mode\", newMode)\n 888 | \n 889 | \t\t// Load the saved API config for the new mode if it exists\n 890 | \t\tconst savedConfigId = await this.providerSettingsManager.getModeConfigId(newMode)\n 891 | \t\tconst listApiConfig = await this.providerSettingsManager.listConfig()\n 892 | \n 893 | \t\t// Update listApiConfigMeta first to ensure UI has latest data\n 894 | \t\tawait this.updateGlobalState(\"listApiConfigMeta\", listApiConfig)\n 895 | \n 896 | \t\t// If this mode has a saved config, use it.\n 897 | \t\tif (savedConfigId) {\n 898 | \t\t\tconst profile = listApiConfig.find(({ id }) => id === savedConfigId)\n 899 | \n 900 | \t\t\tif (profile?.name) {\n 901 | \t\t\t\tawait this.activateProviderProfile({ name: profile.name })\n 902 | \t\t\t}\n 903 | \t\t} else {\n 904 | \t\t\t// If no saved config for this mode, save current config as default.\n 905 | \t\t\tconst currentApiConfigName = this.getGlobalState(\"currentApiConfigName\")\n 906 | \n 907 | \t\t\tif (currentApiConfigName) {\n 908 | \t\t\t\tconst config = listApiConfig.find((c) => c.name === currentApiConfigName)\n 909 | \n 910 | \t\t\t\tif (config?.id) {\n 911 | \t\t\t\t\tawait this.providerSettingsManager.setModeConfig(newMode, config.id)\n 912 | \t\t\t\t}\n 913 | \t\t\t}\n 914 | \t\t}\n 915 | \n 916 | \t\tawait this.postStateToWebview()\n 917 | \t}\n 918 | \n 919 | \t// Provider Profile Management\n 920 | \n 921 | \tgetProviderProfileEntries(): ProviderSettingsEntry[] {\n 922 | \t\treturn this.contextProxy.getValues().listApiConfigMeta || []\n 923 | \t}\n 924 | \n 925 | \tgetProviderProfileEntry(name: string): ProviderSettingsEntry | undefined {\n 926 | \t\treturn this.getProviderProfileEntries().find((profile) => profile.name === name)\n 927 | \t}\n 928 | \n 929 | \tpublic hasProviderProfileEntry(name: string): boolean {\n 930 | \t\treturn !!this.getProviderProfileEntry(name)\n 931 | \t}\n 932 | \n 933 | \tasync upsertProviderProfile(\n 934 | \t\tname: string,\n 935 | \t\tproviderSettings: ProviderSettings,\n 936 | \t\tactivate: boolean = true,\n 937 | \t): Promise<string | undefined> {\n 938 | \t\ttry {\n 939 | \t\t\t// TODO: Do we need to be calling `activateProfile`? It's not\n 940 | \t\t\t// clear to me what the source of truth should be; in some cases\n 941 | \t\t\t// we rely on the `ContextProxy`'s data store and in other cases\n 942 | \t\t\t// we rely on the `ProviderSettingsManager`'s data store. It might\n 943 | \t\t\t// be simpler to unify these two.\n 944 | \t\t\tconst id = await this.providerSettingsManager.saveConfig(name, providerSettings)\n 945 | \n 946 | \t\t\tif (activate) {\n 947 | \t\t\t\tconst { mode } = await this.getState()\n 948 | \n 949 | \t\t\t\t// These promises do the following:\n 950 | \t\t\t\t// 1. Adds or updates the list of provider profiles.\n 951 | \t\t\t\t// 2. Sets the current provider profile.\n 952 | \t\t\t\t// 3. Sets the current mode's provider profile.\n 953 | \t\t\t\t// 4. Copies the provider settings to the context.\n 954 | \t\t\t\t//\n 955 | \t\t\t\t// Note: 1, 2, and 4 can be done in one `ContextProxy` call:\n 956 | \t\t\t\t// this.contextProxy.setValues({ ...providerSettings, listApiConfigMeta: ..., currentApiConfigName: ... })\n 957 | \t\t\t\t// We should probably switch to that and verify that it works.\n 958 | \t\t\t\t// I left the original implementation in just to be safe.\n 959 | \t\t\t\tawait Promise.all([\n 960 | \t\t\t\t\tthis.updateGlobalState(\"listApiConfigMeta\", await this.providerSettingsManager.listConfig()),\n 961 | \t\t\t\t\tthis.updateGlobalState(\"currentApiConfigName\", name),\n 962 | \t\t\t\t\tthis.providerSettingsManager.setModeConfig(mode, id),\n 963 | \t\t\t\t\tthis.contextProxy.setProviderSettings(providerSettings),\n 964 | \t\t\t\t])\n 965 | \n 966 | \t\t\t\t// Change the provider for the current task.\n 967 | \t\t\t\t// TODO: We should rename `buildApiHandler` for clarity (e.g. `getProviderClient`).\n 968 | \t\t\t\tconst task = this.getCurrentCline()\n 969 | \n 970 | \t\t\t\tif (task) {\n 971 | \t\t\t\t\ttask.api = buildApiHandler(providerSettings)\n 972 | \t\t\t\t}\n 973 | \n 974 | \t\t\t\tawait TelemetryService.instance.updateIdentity(providerSettings.kilocodeToken ?? \"\") // kilocode_change\n 975 | \t\t\t} else {\n 976 | \t\t\t\tawait this.updateGlobalState(\"listApiConfigMeta\", await this.providerSettingsManager.listConfig())\n 977 | \t\t\t}\n 978 | \n 979 | \t\t\tawait this.postStateToWebview()\n 980 | \t\t\treturn id\n 981 | \t\t} catch (error) {\n 982 | \t\t\tthis.log(\n 983 | \t\t\t\t`Error create new api configuration: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n 984 | \t\t\t)\n 985 | \n 986 | \t\t\tvscode.window.showErrorMessage(t(\"common:errors.create_api_config\"))\n 987 | \t\t\treturn undefined\n 988 | \t\t}\n 989 | \t}\n 990 | \n 991 | \tasync deleteProviderProfile(profileToDelete: ProviderSettingsEntry) {\n 992 | \t\tconst globalSettings = this.contextProxy.getValues()\n 993 | \t\tlet profileToActivate: string | undefined = globalSettings.currentApiConfigName\n 994 | \n 995 | \t\tif (profileToDelete.name === profileToActivate) {\n 996 | \t\t\tprofileToActivate = this.getProviderProfileEntries().find(({ name }) => name !== profileToDelete.name)?.name\n 997 | \t\t}\n 998 | \n 999 | \t\tif (!profileToActivate) {\n1000 | \t\t\tthrow new Error(\"You cannot delete the last profile\")\n1001 | \t\t}\n1002 | \n1003 | \t\tconst entries = this.getProviderProfileEntries().filter(({ name }) => name !== profileToDelete.name)\n1004 | \n1005 | \t\tawait this.contextProxy.setValues({\n1006 | \t\t\t...globalSettings,\n1007 | \t\t\tcurrentApiConfigName: profileToActivate,\n1008 | \t\t\tlistApiConfigMeta: entries,\n1009 | \t\t})\n1010 | \n1011 | \t\tawait this.postStateToWebview()\n1012 | \t}\n1013 | \n1014 | \tasync activateProviderProfile(args: { name: string } | { id: string }) {\n1015 | \t\tconst { name, id, ...providerSettings } = await this.providerSettingsManager.activateProfile(args)\n1016 | \n1017 | \t\t// See `upsertProviderProfile` for a description of what this is doing.\n1018 | \t\tawait Promise.all([\n1019 | \t\t\tthis.contextProxy.setValue(\"listApiConfigMeta\", await this.providerSettingsManager.listConfig()),\n1020 | \t\t\tthis.contextProxy.setValue(\"currentApiConfigName\", name),\n1021 | \t\t\tthis.contextProxy.setProviderSettings(providerSettings),\n1022 | \t\t])\n1023 | \n1024 | \t\tconst { mode } = await this.getState()\n1025 | \n1026 | \t\tif (id) {\n1027 | \t\t\tawait this.providerSettingsManager.setModeConfig(mode, id)\n1028 | \t\t}\n1029 | \n1030 | \t\t// Change the provider for the current task.\n1031 | \t\tconst task = this.getCurrentCline()\n1032 | \n1033 | \t\tif (task) {\n1034 | \t\t\ttask.api = buildApiHandler(providerSettings)\n1035 | \t\t}\n1036 | \n1037 | \t\tawait this.postStateToWebview()\n1038 | \t\tawait TelemetryService.instance.updateIdentity(providerSettings.kilocodeToken ?? \"\") // kilocode_change\n1039 | \t}\n1040 | \n1041 | \t// Task Management\n1042 | \n1043 | \tasync cancelTask() {\n1044 | \t\tconst cline = this.getCurrentCline()\n1045 | \n1046 | \t\tif (!cline) {\n1047 | \t\t\treturn\n1048 | \t\t}\n1049 | \n1050 | \t\tconsole.log(`[subtasks] cancelling task ${cline.taskId}.${cline.instanceId}`)\n1051 | \n1052 | \t\tconst { historyItem } = await this.getTaskWithId(cline.taskId)\n1053 | \t\t// Preserve parent and root task information for history item.\n1054 | \t\tconst rootTask = cline.rootTask\n1055 | \t\tconst parentTask = cline.parentTask\n1056 | \n1057 | \t\tcline.abortTask()\n1058 | \n1059 | \t\tawait pWaitFor(\n1060 | \t\t\t() =>\n1061 | \t\t\t\tthis.getCurrentCline()! === undefined ||\n1062 | \t\t\t\tthis.getCurrentCline()!.isStreaming === false ||\n1063 | \t\t\t\tthis.getCurrentCline()!.didFinishAbortingStream ||\n1064 | \t\t\t\t// If only the first chunk is processed, then there's no\n1065 | \t\t\t\t// need to wait for graceful abort (closes edits, browser,\n1066 | \t\t\t\t// etc).\n1067 | \t\t\t\tthis.getCurrentCline()!.isWaitingForFirstChunk,\n1068 | \t\t\t{\n1069 | \t\t\t\ttimeout: 3_000,\n1070 | \t\t\t},\n1071 | \t\t).catch(() => {\n1072 | \t\t\tconsole.error(\"Failed to abort task\")\n1073 | \t\t})\n1074 | \n1075 | \t\tif (this.getCurrentCline()) {\n1076 | \t\t\t// 'abandoned' will prevent this Cline instance from affecting\n1077 | \t\t\t// future Cline instances. This may happen if its hanging on a\n1078 | \t\t\t// streaming request.\n1079 | \t\t\tthis.getCurrentCline()!.abandoned = true\n1080 | \t\t}\n1081 | \n1082 | \t\t// Clears task again, so we need to abortTask manually above.\n1083 | \t\tawait this.initClineWithHistoryItem({ ...historyItem, rootTask, parentTask })\n1084 | \t}\n1085 | \n1086 | \tasync updateCustomInstructions(instructions?: string) {\n1087 | \t\t// User may be clearing the field.\n1088 | \t\tawait this.updateGlobalState(\"customInstructions\", instructions || undefined)\n1089 | \t\tawait this.postStateToWebview()\n1090 | \t}\n1091 | \n1092 | \t// MCP\n1093 | \n1094 | \tasync ensureMcpServersDirectoryExists(): Promise<string> {\n1095 | \t\t// Get platform-specific application data directory\n1096 | \t\tlet mcpServersDir: string\n1097 | \t\tif (process.platform === \"win32\") {\n1098 | \t\t\t// Windows: %APPDATA%\\Kilo-Code\\MCP\n1099 | \t\t\tmcpServersDir = path.join(os.homedir(), \"AppData\", \"Roaming\", \"Kilo-Code\", \"MCP\")\n1100 | \t\t} else if (process.platform === \"darwin\") {\n1101 | \t\t\t// macOS: ~/Documents/Kilo-Code/MCP\n1102 | \t\t\tmcpServersDir = path.join(os.homedir(), \"Documents\", \"Kilo-Code\", \"MCP\")\n1103 | \t\t} else {\n1104 | \t\t\t// Linux: ~/.local/share/Kilo-Code/MCP\n1105 | \t\t\tmcpServersDir = path.join(os.homedir(), \".local\", \"share\", \"Kilo-Code\", \"MCP\")\n1106 | \t\t}\n1107 | \n1108 | \t\ttry {\n1109 | \t\t\tawait fs.mkdir(mcpServersDir, { recursive: true })\n1110 | \t\t} catch (error) {\n1111 | \t\t\t// Fallback to a relative path if directory creation fails\n1112 | \t\t\treturn path.join(os.homedir(), \".kilocode\", \"mcp\")\n1113 | \t\t}\n1114 | \t\treturn mcpServersDir\n1115 | \t}\n1116 | \n1117 | \tasync ensureSettingsDirectoryExists(): Promise<string> {\n1118 | \t\tconst { getSettingsDirectoryPath } = await import(\"../../utils/storage\")\n1119 | \t\tconst globalStoragePath = this.contextProxy.globalStorageUri.fsPath\n1120 | \t\treturn getSettingsDirectoryPath(globalStoragePath)\n1121 | \t}\n1122 | \n1123 | \t// OpenRouter\n1124 | \n1125 | \tasync handleOpenRouterCallback(code: string) {\n1126 | \t\tlet { apiConfiguration, currentApiConfigName } = await this.getState()\n1127 | \n1128 | \t\tlet apiKey: string\n1129 | \t\ttry {\n1130 | \t\t\tconst baseUrl = apiConfiguration.openRouterBaseUrl || \"https://openrouter.ai/api/v1\"\n1131 | \t\t\t// Extract the base domain for the auth endpoint\n1132 | \t\t\tconst baseUrlDomain = baseUrl.match(/^(https?:\\/\\/[^\\/]+)/)?.[1] || \"https://openrouter.ai\"\n1133 | \t\t\tconst response = await axios.post(`${baseUrlDomain}/api/v1/auth/keys`, { code })\n1134 | \t\t\tif (response.data && response.data.key) {\n1135 | \t\t\t\tapiKey = response.data.key\n1136 | \t\t\t} else {\n1137 | \t\t\t\tthrow new Error(\"Invalid response from OpenRouter API\")\n1138 | \t\t\t}\n1139 | \t\t} catch (error) {\n1140 | \t\t\tthis.log(\n1141 | \t\t\t\t`Error exchanging code for API key: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1142 | \t\t\t)\n1143 | \t\t\tthrow error\n1144 | \t\t}\n1145 | \n1146 | \t\tconst newConfiguration: ProviderSettings = {\n1147 | \t\t\t...apiConfiguration,\n1148 | \t\t\tapiProvider: \"openrouter\",\n1149 | \t\t\topenRouterApiKey: apiKey,\n1150 | \t\t\topenRouterModelId: apiConfiguration?.openRouterModelId || openRouterDefaultModelId,\n1151 | \t\t}\n1152 | \n1153 | \t\tawait this.upsertProviderProfile(currentApiConfigName, newConfiguration)\n1154 | \t}\n1155 | \n1156 | \t// Glama\n1157 | \n1158 | \tasync handleGlamaCallback(code: string) {\n1159 | \t\tlet apiKey: string\n1160 | \t\ttry {\n1161 | \t\t\tconst response = await axios.post(\"https://glama.ai/api/gateway/v1/auth/exchange-code\", { code })\n1162 | \t\t\tif (response.data && response.data.apiKey) {\n1163 | \t\t\t\tapiKey = response.data.apiKey\n1164 | \t\t\t} else {\n1165 | \t\t\t\tthrow new Error(\"Invalid response from Glama API\")\n1166 | \t\t\t}\n1167 | \t\t} catch (error) {\n1168 | \t\t\tthis.log(\n1169 | \t\t\t\t`Error exchanging code for API key: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1170 | \t\t\t)\n1171 | \t\t\tthrow error\n1172 | \t\t}\n1173 | \n1174 | \t\tconst { apiConfiguration, currentApiConfigName } = await this.getState()\n1175 | \n1176 | \t\tconst newConfiguration: ProviderSettings = {\n1177 | \t\t\t...apiConfiguration,\n1178 | \t\t\tapiProvider: \"glama\",\n1179 | \t\t\tglamaApiKey: apiKey,\n1180 | \t\t\tglamaModelId: apiConfiguration?.glamaModelId || glamaDefaultModelId,\n1181 | \t\t}\n1182 | \n1183 | \t\tawait this.upsertProviderProfile(currentApiConfigName, newConfiguration)\n1184 | \t}\n1185 | \n1186 | \t// Requesty\n1187 | \n1188 | \tasync handleRequestyCallback(code: string) {\n1189 | \t\tlet { apiConfiguration, currentApiConfigName } = await this.getState()\n1190 | \n1191 | \t\tconst newConfiguration: ProviderSettings = {\n1192 | \t\t\t...apiConfiguration,\n1193 | \t\t\tapiProvider: \"requesty\",\n1194 | \t\t\trequestyApiKey: code,\n1195 | \t\t\trequestyModelId: apiConfiguration?.requestyModelId || requestyDefaultModelId,\n1196 | \t\t}\n1197 | \n1198 | \t\tawait this.upsertProviderProfile(currentApiConfigName, newConfiguration)\n1199 | \t}\n1200 | \n1201 | \t// kilocode_change:\n1202 | \tasync handleKiloCodeCallback(token: string) {\n1203 | \t\tconst kilocode: ProviderName = \"kilocode\"\n1204 | \t\tlet { apiConfiguration, currentApiConfigName } = await this.getState()\n1205 | \n1206 | \t\tawait this.upsertProviderProfile(currentApiConfigName, {\n1207 | \t\t\t...apiConfiguration,\n1208 | \t\t\tapiProvider: \"kilocode\",\n1209 | \t\t\tkilocodeToken: token,\n1210 | \t\t})\n1211 | \n1212 | \t\tvscode.window.showInformationMessage(\"Kilo Code successfully configured!\")\n1213 | \n1214 | \t\tif (this.getCurrentCline()) {\n1215 | \t\t\tthis.getCurrentCline()!.api = buildApiHandler({\n1216 | \t\t\t\tapiProvider: kilocode,\n1217 | \t\t\t\tkilocodeToken: token,\n1218 | \t\t\t})\n1219 | \t\t}\n1220 | \t}\n1221 | \n1222 | \t// Task history\n1223 | \n1224 | \tasync getTaskWithId(id: string): Promise<{\n1225 | \t\thistoryItem: HistoryItem\n1226 | \t\ttaskDirPath: string\n1227 | \t\tapiConversationHistoryFilePath: string\n1228 | \t\tuiMessagesFilePath: string\n1229 | \t\tapiConversationHistory: Anthropic.MessageParam[]\n1230 | \t}> {\n1231 | \t\tconst history = this.getGlobalState(\"taskHistory\") ?? []\n1232 | \t\tconst historyItem = history.find((item) => item.id === id)\n1233 | \n1234 | \t\tif (historyItem) {\n1235 | \t\t\tconst { getTaskDirectoryPath } = await import(\"../../utils/storage\")\n1236 | \t\t\tconst globalStoragePath = this.contextProxy.globalStorageUri.fsPath\n1237 | \t\t\tconst taskDirPath = await getTaskDirectoryPath(globalStoragePath, id)\n1238 | \t\t\tconst apiConversationHistoryFilePath = path.join(taskDirPath, GlobalFileNames.apiConversationHistory)\n1239 | \t\t\tconst uiMessagesFilePath = path.join(taskDirPath, GlobalFileNames.uiMessages)\n1240 | \t\t\tconst fileExists = await fileExistsAtPath(apiConversationHistoryFilePath)\n1241 | \n1242 | \t\t\tif (fileExists) {\n1243 | \t\t\t\tconst apiConversationHistory = JSON.parse(await fs.readFile(apiConversationHistoryFilePath, \"utf8\"))\n1244 | \n1245 | \t\t\t\treturn {\n1246 | \t\t\t\t\thistoryItem,\n1247 | \t\t\t\t\ttaskDirPath,\n1248 | \t\t\t\t\tapiConversationHistoryFilePath,\n1249 | \t\t\t\t\tuiMessagesFilePath,\n1250 | \t\t\t\t\tapiConversationHistory,\n1251 | \t\t\t\t}\n1252 | \t\t\t} else {\n1253 | \t\t\t\tvscode.window.showErrorMessage(\n1254 | \t\t\t\t\t`Task file not found for task ID: ${id} (file ${apiConversationHistoryFilePath})`,\n1255 | \t\t\t\t) //kilocode_change show extra debugging information to debug task not found issues\n1256 | \t\t\t}\n1257 | \t\t} else {\n1258 | \t\t\tvscode.window.showErrorMessage(`Task with ID: ${id} not found in history.`) // kilocode_change show extra debugging information to debug task not found issues\n1259 | \t\t}\n1260 | \n1261 | \t\t// if we tried to get a task that doesn't exist, remove it from state\n1262 | \t\t// FIXME: this seems to happen sometimes when the json file doesnt save to disk for some reason\n1263 | \t\t// await this.deleteTaskFromState(id) // kilocode_change disable confusing behaviour\n1264 | \t\tawait this.setTaskFileNotFound(id) // kilocode_change\n1265 | \t\tthrow new Error(\"Task not found\")\n1266 | \t}\n1267 | \n1268 | \tasync showTaskWithId(id: string) {\n1269 | \t\tif (id !== this.getCurrentCline()?.taskId) {\n1270 | \t\t\t// Non-current task.\n1271 | \t\t\tconst { historyItem } = await this.getTaskWithId(id)\n1272 | \t\t\tawait this.initClineWithHistoryItem(historyItem) // Clears existing task.\n1273 | \t\t}\n1274 | \n1275 | \t\tawait this.postMessageToWebview({ type: \"action\", action: \"chatButtonClicked\" })\n1276 | \t}\n1277 | \n1278 | \tasync exportTaskWithId(id: string) {\n1279 | \t\tconst { historyItem, apiConversationHistory } = await this.getTaskWithId(id)\n1280 | \t\tawait downloadTask(historyItem.ts, apiConversationHistory)\n1281 | \t}\n1282 | \n1283 | \t/* Condenses a task's message history to use fewer tokens. */\n1284 | \tasync condenseTaskContext(taskId: string) {\n1285 | \t\tlet task: Task | undefined\n1286 | \t\tfor (let i = this.clineStack.length - 1; i >= 0; i--) {\n1287 | \t\t\tif (this.clineStack[i].taskId === taskId) {\n1288 | \t\t\t\ttask = this.clineStack[i]\n1289 | \t\t\t\tbreak\n1290 | \t\t\t}\n1291 | \t\t}\n1292 | \t\tif (!task) {\n1293 | \t\t\tthrow new Error(`Task with id ${taskId} not found in stack`)\n1294 | \t\t}\n1295 | \t\tawait task.condenseContext()\n1296 | \t\tawait this.postMessageToWebview({ type: \"condenseTaskContextResponse\", text: taskId })\n1297 | \t}\n1298 | \n1299 | \t// this function deletes a task from task hidtory, and deletes it's checkpoints and delete the task folder\n1300 | \tasync deleteTaskWithId(id: string) {\n1301 | \t\ttry {\n1302 | \t\t\t// get the task directory full path\n1303 | \t\t\tconst { taskDirPath } = await this.getTaskWithId(id)\n1304 | \n1305 | \t\t\t// kilocode_change start\n1306 | \t\t\t// Check if task is favorited\n1307 | \t\t\tconst history = this.getGlobalState(\"taskHistory\") ?? []\n1308 | \t\t\tconst task = history.find((item) => item.id === id)\n1309 | \t\t\tif (task?.isFavorited) {\n1310 | \t\t\t\tthrow new Error(\"Cannot delete a favorited task. Please unfavorite it first.\")\n1311 | \t\t\t}\n1312 | \t\t\t// kilocode_change end\n1313 | \n1314 | \t\t\t// remove task from stack if it's the current task\n1315 | \t\t\tif (id === this.getCurrentCline()?.taskId) {\n1316 | \t\t\t\t// if we found the taskid to delete - call finish to abort this task and allow a new task to be started,\n1317 | \t\t\t\t// if we are deleting a subtask and parent task is still waiting for subtask to finish - it allows the parent to resume (this case should neve exist)\n1318 | \t\t\t\tawait this.finishSubTask(t(\"common:tasks.deleted\"))\n1319 | \t\t\t}\n1320 | \n1321 | \t\t\t// delete task from the task history state\n1322 | \t\t\tawait this.deleteTaskFromState(id)\n1323 | \n1324 | \t\t\t// Delete associated shadow repository or branch.\n1325 | \t\t\t// TODO: Store `workspaceDir` in the `HistoryItem` object.\n1326 | \t\t\tconst globalStorageDir = this.contextProxy.globalStorageUri.fsPath\n1327 | \t\t\tconst workspaceDir = this.cwd\n1328 | \n1329 | \t\t\ttry {\n1330 | \t\t\t\tawait ShadowCheckpointService.deleteTask({ taskId: id, globalStorageDir, workspaceDir })\n1331 | \t\t\t} catch (error) {\n1332 | \t\t\t\tconsole.error(\n1333 | \t\t\t\t\t`[deleteTaskWithId${id}] failed to delete associated shadow repository or branch: ${error instanceof Error ? error.message : String(error)}`,\n1334 | \t\t\t\t)\n1335 | \t\t\t}\n1336 | \n1337 | \t\t\t// delete the entire task directory including checkpoints and all content\n1338 | \t\t\ttry {\n1339 | \t\t\t\tawait fs.rm(taskDirPath, { recursive: true, force: true })\n1340 | \t\t\t\tconsole.log(`[deleteTaskWithId${id}] removed task directory`)\n1341 | \t\t\t} catch (error) {\n1342 | \t\t\t\tconsole.error(\n1343 | \t\t\t\t\t`[deleteTaskWithId${id}] failed to remove task directory: ${error instanceof Error ? error.message : String(error)}`,\n1344 | \t\t\t\t)\n1345 | \t\t\t}\n1346 | \t\t} catch (error) {\n1347 | \t\t\t// If task is not found, just remove it from state\n1348 | \t\t\tif (error instanceof Error && error.message === \"Task not found\") {\n1349 | \t\t\t\tawait this.deleteTaskFromState(id)\n1350 | \t\t\t\treturn\n1351 | \t\t\t}\n1352 | \t\t\tthrow error\n1353 | \t\t}\n1354 | \t}\n1355 | \n1356 | \tasync deleteTaskFromState(id: string) {\n1357 | \t\tconst taskHistory = this.getGlobalState(\"taskHistory\") ?? []\n1358 | \t\tconst updatedTaskHistory = taskHistory.filter((task) => task.id !== id)\n1359 | \t\tawait this.updateGlobalState(\"taskHistory\", updatedTaskHistory)\n1360 | \t\tawait this.postStateToWebview()\n1361 | \t}\n1362 | \n1363 | \tasync postStateToWebview() {\n1364 | \t\tconst state = await this.getStateToPostToWebview()\n1365 | \t\tthis.postMessageToWebview({ type: \"state\", state })\n1366 | \n1367 | \t\t// Check MDM compliance and send user to account tab if not compliant\n1368 | \t\tif (!this.checkMdmCompliance()) {\n1369 | \t\t\tawait this.postMessageToWebview({ type: \"action\", action: \"accountButtonClicked\" })\n1370 | \t\t}\n1371 | \t}\n1372 | \n1373 | \t// kilocode_change start\n1374 | \tasync postRulesDataToWebview() {\n1375 | \t\tconst workspacePath = this.cwd\n1376 | \t\tif (workspacePath) {\n1377 | \t\t\tthis.postMessageToWebview({\n1378 | \t\t\t\ttype: \"rulesData\",\n1379 | \t\t\t\t...(await getEnabledRules(workspacePath, this.contextProxy, this.context)),\n1380 | \t\t\t})\n1381 | \t\t}\n1382 | \t}\n1383 | \t// kilocode_change end\n1384 | \n1385 | \t/**\n1386 | \t * Fetches marketplace dataon demand to avoid blocking main state updates\n1387 | \t */\n1388 | \tasync fetchMarketplaceData() {\n1389 | \t\ttry {\n1390 | \t\t\tconst [marketplaceResult, marketplaceInstalledMetadata] = await Promise.all([\n1391 | \t\t\t\tthis.marketplaceManager.getMarketplaceItems().catch((error) => {\n1392 | \t\t\t\t\tconsole.error(\"Failed to fetch marketplace items:\", error)\n1393 | \t\t\t\t\treturn { organizationMcps: [], marketplaceItems: [], errors: [error.message] }\n1394 | \t\t\t\t}),\n1395 | \t\t\t\tthis.marketplaceManager.getInstallationMetadata().catch((error) => {\n1396 | \t\t\t\t\tconsole.error(\"Failed to fetch installation metadata:\", error)\n1397 | \t\t\t\t\treturn { project: {}, global: {} } as MarketplaceInstalledMetadata\n1398 | \t\t\t\t}),\n1399 | \t\t\t])\n1400 | \n1401 | \t\t\t// Send marketplace data separately\n1402 | \t\t\tthis.postMessageToWebview({\n1403 | \t\t\t\ttype: \"marketplaceData\",\n1404 | \t\t\t\torganizationMcps: marketplaceResult.organizationMcps || [],\n1405 | \t\t\t\tmarketplaceItems: marketplaceResult.marketplaceItems || [],\n1406 | \t\t\t\tmarketplaceInstalledMetadata: marketplaceInstalledMetadata || { project: {}, global: {} },\n1407 | \t\t\t\terrors: marketplaceResult.errors,\n1408 | \t\t\t})\n1409 | \t\t} catch (error) {\n1410 | \t\t\tconsole.error(\"Failed to fetch marketplace data:\", error)\n1411 | \t\t\t// Send empty data on error to prevent UI from hanging\n1412 | \t\t\tthis.postMessageToWebview({\n1413 | \t\t\t\ttype: \"marketplaceData\",\n1414 | \t\t\t\torganizationMcps: [],\n1415 | \t\t\t\tmarketplaceItems: [],\n1416 | \t\t\t\tmarketplaceInstalledMetadata: { project: {}, global: {} },\n1417 | \t\t\t\terrors: [error instanceof Error ? error.message : String(error)],\n1418 | \t\t\t})\n1419 | \n1420 | \t\t\t// Show user-friendly error notification for network issues\n1421 | \t\t\tif (error instanceof Error && error.message.includes(\"timeout\")) {\n1422 | \t\t\t\tvscode.window.showWarningMessage(\n1423 | \t\t\t\t\t\"Marketplace data could not be loaded due to network restrictions. Core functionality remains available.\",\n1424 | \t\t\t\t)\n1425 | \t\t\t}\n1426 | \t\t}\n1427 | \t}\n1428 | \n1429 | \t/**\n1430 | \t * Checks if there is a file-based system prompt override for the given mode\n1431 | \t */\n1432 | \tasync hasFileBasedSystemPromptOverride(mode: Mode): Promise<boolean> {\n1433 | \t\tconst promptFilePath = getSystemPromptFilePath(this.cwd, mode)\n1434 | \t\treturn await fileExistsAtPath(promptFilePath)\n1435 | \t}\n1436 | \n1437 | \t/**\n1438 | \t * Merges allowed commands from global state and workspace configuration\n1439 | \t * with proper validation and deduplication\n1440 | \t */\n1441 | \tprivate mergeAllowedCommands(globalStateCommands?: string[]): string[] {\n1442 | \t\treturn this.mergeCommandLists(\"allowedCommands\", \"allowed\", globalStateCommands)\n1443 | \t}\n1444 | \n1445 | \t/**\n1446 | \t * Merges denied commands from global state and workspace configuration\n1447 | \t * with proper validation and deduplication\n1448 | \t */\n1449 | \tprivate mergeDeniedCommands(globalStateCommands?: string[]): string[] {\n1450 | \t\treturn this.mergeCommandLists(\"deniedCommands\", \"denied\", globalStateCommands)\n1451 | \t}\n1452 | \n1453 | \t/**\n1454 | \t * Common utility for merging command lists from global state and workspace configuration.\n1455 | \t * Implements the Command Denylist feature's merging strategy with proper validation.\n1456 | \t *\n1457 | \t * @param configKey - VSCode workspace configuration key\n1458 | \t * @param commandType - Type of commands for error logging\n1459 | \t * @param globalStateCommands - Commands from global state\n1460 | \t * @returns Merged and deduplicated command list\n1461 | \t */\n1462 | \tprivate mergeCommandLists(\n1463 | \t\tconfigKey: \"allowedCommands\" | \"deniedCommands\",\n1464 | \t\tcommandType: \"allowed\" | \"denied\",\n1465 | \t\tglobalStateCommands?: string[],\n1466 | \t): string[] {\n1467 | \t\ttry {\n1468 | \t\t\t// Validate and sanitize global state commands\n1469 | \t\t\tconst validGlobalCommands = Array.isArray(globalStateCommands)\n1470 | \t\t\t\t? globalStateCommands.filter((cmd) => typeof cmd === \"string\" && cmd.trim().length > 0)\n1471 | \t\t\t\t: []\n1472 | \n1473 | \t\t\t// Get workspace configuration commands\n1474 | \t\t\tconst workspaceCommands = vscode.workspace.getConfiguration(Package.name).get<string[]>(configKey) || []\n1475 | \n1476 | \t\t\t// Validate and sanitize workspace commands\n1477 | \t\t\tconst validWorkspaceCommands = Array.isArray(workspaceCommands)\n1478 | \t\t\t\t? workspaceCommands.filter((cmd) => typeof cmd === \"string\" && cmd.trim().length > 0)\n1479 | \t\t\t\t: []\n1480 | \n1481 | \t\t\t// Combine and deduplicate commands\n1482 | \t\t\t// Global state takes precedence over workspace configuration\n1483 | \t\t\tconst mergedCommands = [...new Set([...validGlobalCommands, ...validWorkspaceCommands])]\n1484 | \n1485 | \t\t\treturn mergedCommands\n1486 | \t\t} catch (error) {\n1487 | \t\t\tconsole.error(`Error merging ${commandType} commands:`, error)\n1488 | \t\t\t// Return empty array as fallback to prevent crashes\n1489 | \t\t\treturn []\n1490 | \t\t}\n1491 | \t}\n1492 | \n1493 | \tasync getStateToPostToWebview() {\n1494 | \t\tconst {\n1495 | \t\t\tapiConfiguration,\n1496 | \t\t\tcustomInstructions,\n1497 | \t\t\talwaysAllowReadOnly,\n1498 | \t\t\talwaysAllowReadOnlyOutsideWorkspace,\n1499 | \t\t\talwaysAllowWrite,\n1500 | \t\t\talwaysAllowWriteOutsideWorkspace,\n1501 | \t\t\talwaysAllowWriteProtected,\n1502 | \t\t\talwaysAllowExecute,\n1503 | \t\t\tallowedCommands,\n1504 | \t\t\tdeniedCommands,\n1505 | \t\t\talwaysAllowBrowser,\n1506 | \t\t\talwaysAllowMcp,\n1507 | \t\t\talwaysAllowModeSwitch,\n1508 | \t\t\talwaysAllowSubtasks,\n1509 | \t\t\talwaysAllowUpdateTodoList,\n1510 | \t\t\tallowedMaxRequests,\n1511 | \t\t\tautoCondenseContext,\n1512 | \t\t\tautoCondenseContextPercent,\n1513 | \t\t\tsoundEnabled,\n1514 | \t\t\tttsEnabled,\n1515 | \t\t\tttsSpeed,\n1516 | \t\t\tdiffEnabled,\n1517 | \t\t\tenableCheckpoints,\n1518 | \t\t\ttaskHistory,\n1519 | \t\t\tsoundVolume,\n1520 | \t\t\tbrowserViewportSize,\n1521 | \t\t\tscreenshotQuality,\n1522 | \t\t\tremoteBrowserHost,\n1523 | \t\t\tremoteBrowserEnabled,\n1524 | \t\t\tcachedChromeHostUrl,\n1525 | \t\t\twriteDelayMs,\n1526 | \t\t\tterminalOutputLineLimit,\n1527 | \t\t\tterminalOutputCharacterLimit,\n1528 | \t\t\tterminalShellIntegrationTimeout,\n1529 | \t\t\tterminalShellIntegrationDisabled,\n1530 | \t\t\tterminalCommandDelay,\n1531 | \t\t\tterminalPowershellCounter,\n1532 | \t\t\tterminalZshClearEolMark,\n1533 | \t\t\tterminalZshOhMy,\n1534 | \t\t\tterminalZshP10k,\n1535 | \t\t\tterminalZdotdir,\n1536 | \t\t\tfuzzyMatchThreshold,\n1537 | \t\t\t// mcpEnabled,  // kilocode_change: always true\n1538 | \t\t\tenableMcpServerCreation,\n1539 | \t\t\talwaysApproveResubmit,\n1540 | \t\t\trequestDelaySeconds,\n1541 | \t\t\tcurrentApiConfigName,\n1542 | \t\t\tlistApiConfigMeta,\n1543 | \t\t\tpinnedApiConfigs,\n1544 | \t\t\tmode,\n1545 | \t\t\tcustomModePrompts,\n1546 | \t\t\tcustomSupportPrompts,\n1547 | \t\t\tenhancementApiConfigId,\n1548 | \t\t\tcommitMessageApiConfigId, // kilocode_change\n1549 | \t\t\tterminalCommandApiConfigId, // kilocode_change\n1550 | \t\t\tautoApprovalEnabled,\n1551 | \t\t\tcustomModes,\n1552 | \t\t\texperiments,\n1553 | \t\t\tmaxOpenTabsContext,\n1554 | \t\t\tmaxWorkspaceFiles,\n1555 | \t\t\tbrowserToolEnabled,\n1556 | \t\t\ttelemetrySetting,\n1557 | \t\t\tshowRooIgnoredFiles,\n1558 | \t\t\tlanguage,\n1559 | \t\t\tshowAutoApproveMenu, // kilocode_change\n1560 | \t\t\tshowTaskTimeline, // kilocode_change\n1561 | \t\t\tmaxReadFileLine,\n1562 | \t\t\tmaxImageFileSize,\n1563 | \t\t\tmaxTotalImageSize,\n1564 | \t\t\tterminalCompressProgressBar,\n1565 | \t\t\thistoryPreviewCollapsed,\n1566 | \t\t\tcloudUserInfo,\n1567 | \t\t\tcloudIsAuthenticated,\n1568 | \t\t\tsharingEnabled,\n1569 | \t\t\torganizationAllowList,\n1570 | \t\t\torganizationSettingsVersion,\n1571 | \t\t\tmaxConcurrentFileReads,\n1572 | \t\t\tallowVeryLargeReads, // kilocode_change\n1573 | \t\t\tghostServiceSettings, // kilocode_changes\n1574 | \t\t\tcondensingApiConfigId,\n1575 | \t\t\tcustomCondensingPrompt,\n1576 | \t\t\tcodebaseIndexConfig,\n1577 | \t\t\tcodebaseIndexModels,\n1578 | \t\t\tprofileThresholds,\n1579 | \t\t\tsystemNotificationsEnabled, // kilocode_change\n1580 | \t\t\tdismissedNotificationIds, // kilocode_change\n1581 | \t\t\talwaysAllowFollowupQuestions,\n1582 | \t\t\tfollowupAutoApproveTimeoutMs,\n1583 | \t\t\tincludeDiagnosticMessages,\n1584 | \t\t\tmaxDiagnosticMessages,\n1585 | \t\t\tincludeTaskHistoryInEnhance,\n1586 | \t\t} = await this.getState()\n1587 | \n1588 | \t\tconst telemetryKey = process.env.KILOCODE_POSTHOG_API_KEY\n1589 | \t\tconst machineId = vscode.env.machineId\n1590 | \n1591 | \t\tconst mergedAllowedCommands = this.mergeAllowedCommands(allowedCommands)\n1592 | \t\tconst mergedDeniedCommands = this.mergeDeniedCommands(deniedCommands)\n1593 | \t\tconst cwd = this.cwd\n1594 | \n1595 | \t\t// Check if there's a system prompt override for the current mode\n1596 | \t\tconst currentMode = mode ?? defaultModeSlug\n1597 | \t\tconst hasSystemPromptOverride = await this.hasFileBasedSystemPromptOverride(currentMode)\n1598 | \n1599 | \t\treturn {\n1600 | \t\t\tversion: this.context.extension?.packageJSON?.version ?? \"\",\n1601 | \t\t\tapiConfiguration,\n1602 | \t\t\tcustomInstructions,\n1603 | \t\t\talwaysAllowReadOnly: alwaysAllowReadOnly ?? true,\n1604 | \t\t\talwaysAllowReadOnlyOutsideWorkspace: alwaysAllowReadOnlyOutsideWorkspace ?? true,\n1605 | \t\t\talwaysAllowWrite: alwaysAllowWrite ?? true,\n1606 | \t\t\talwaysAllowWriteOutsideWorkspace: alwaysAllowWriteOutsideWorkspace ?? true,\n1607 | \t\t\talwaysAllowWriteProtected: alwaysAllowWriteProtected ?? false,\n1608 | \t\t\talwaysAllowExecute: alwaysAllowExecute ?? true,\n1609 | \t\t\talwaysAllowBrowser: alwaysAllowBrowser ?? true,\n1610 | \t\t\talwaysAllowMcp: alwaysAllowMcp ?? true,\n1611 | \t\t\talwaysAllowModeSwitch: alwaysAllowModeSwitch ?? true,\n1612 | \t\t\talwaysAllowSubtasks: alwaysAllowSubtasks ?? true,\n1613 | \t\t\talwaysAllowUpdateTodoList: alwaysAllowUpdateTodoList ?? true,\n1614 | \t\t\tallowedMaxRequests,\n1615 | \t\t\tautoCondenseContext: autoCondenseContext ?? true,\n1616 | \t\t\tautoCondenseContextPercent: autoCondenseContextPercent ?? 100,\n1617 | \t\t\turiScheme: vscode.env.uriScheme,\n1618 | \t\t\tuiKind: vscode.UIKind[vscode.env.uiKind], // kilocode_change\n1619 | \t\t\tcurrentTaskItem: this.getCurrentCline()?.taskId\n1620 | \t\t\t\t? (taskHistory || []).find((item: HistoryItem) => item.id === this.getCurrentCline()?.taskId)\n1621 | \t\t\t\t: undefined,\n1622 | \t\t\tclineMessages: this.getCurrentCline()?.clineMessages || [],\n1623 | \t\t\ttaskHistory: (taskHistory || [])\n1624 | \t\t\t\t.filter((item: HistoryItem) => item.ts && item.task)\n1625 | \t\t\t\t.sort((a: HistoryItem, b: HistoryItem) => b.ts - a.ts),\n1626 | \t\t\tsoundEnabled: soundEnabled ?? false,\n1627 | \t\t\tttsEnabled: ttsEnabled ?? false,\n1628 | \t\t\tttsSpeed: ttsSpeed ?? 1.0,\n1629 | \t\t\tdiffEnabled: diffEnabled ?? true,\n1630 | \t\t\tenableCheckpoints: enableCheckpoints ?? true,\n1631 | \t\t\tshouldShowAnnouncement: false, // kilocode_change\n1632 | \t\t\tallowedCommands: mergedAllowedCommands,\n1633 | \t\t\tdeniedCommands: mergedDeniedCommands,\n1634 | \t\t\tsoundVolume: soundVolume ?? 0.5,\n1635 | \t\t\tbrowserViewportSize: browserViewportSize ?? \"900x600\",\n1636 | \t\t\tscreenshotQuality: screenshotQuality ?? 75,\n1637 | \t\t\tremoteBrowserHost,\n1638 | \t\t\tremoteBrowserEnabled: remoteBrowserEnabled ?? false,\n1639 | \t\t\tcachedChromeHostUrl: cachedChromeHostUrl,\n1640 | \t\t\twriteDelayMs: writeDelayMs ?? DEFAULT_WRITE_DELAY_MS,\n1641 | \t\t\tterminalOutputLineLimit: terminalOutputLineLimit ?? 500,\n1642 | \t\t\tterminalOutputCharacterLimit: terminalOutputCharacterLimit ?? DEFAULT_TERMINAL_OUTPUT_CHARACTER_LIMIT,\n1643 | \t\t\tterminalShellIntegrationTimeout: terminalShellIntegrationTimeout ?? Terminal.defaultShellIntegrationTimeout,\n1644 | \t\t\tterminalShellIntegrationDisabled: terminalShellIntegrationDisabled ?? true, // kilocode_change: default\n1645 | \t\t\tterminalCommandDelay: terminalCommandDelay ?? 0,\n1646 | \t\t\tterminalPowershellCounter: terminalPowershellCounter ?? false,\n1647 | \t\t\tterminalZshClearEolMark: terminalZshClearEolMark ?? true,\n1648 | \t\t\tterminalZshOhMy: terminalZshOhMy ?? false,\n1649 | \t\t\tterminalZshP10k: terminalZshP10k ?? false,\n1650 | \t\t\tterminalZdotdir: terminalZdotdir ?? false,\n1651 | \t\t\tfuzzyMatchThreshold: fuzzyMatchThreshold ?? 1.0,\n1652 | \t\t\tmcpEnabled: true, // kilocode_change: always true\n1653 | \t\t\tenableMcpServerCreation: enableMcpServerCreation ?? true,\n1654 | \t\t\talwaysApproveResubmit: alwaysApproveResubmit ?? false,\n1655 | \t\t\trequestDelaySeconds: requestDelaySeconds ?? 10,\n1656 | \t\t\tcurrentApiConfigName: currentApiConfigName ?? \"default\",\n1657 | \t\t\tlistApiConfigMeta: listApiConfigMeta ?? [],\n1658 | \t\t\tpinnedApiConfigs: pinnedApiConfigs ?? {},\n1659 | \t\t\tmode: mode ?? defaultModeSlug,\n1660 | \t\t\tcustomModePrompts: customModePrompts ?? {},\n1661 | \t\t\tcustomSupportPrompts: customSupportPrompts ?? {},\n1662 | \t\t\tenhancementApiConfigId,\n1663 | \t\t\tcommitMessageApiConfigId, // kilocode_change\n1664 | \t\t\tterminalCommandApiConfigId, // kilocode_change\n1665 | \t\t\tautoApprovalEnabled: autoApprovalEnabled ?? true,\n1666 | \t\t\tcustomModes,\n1667 | \t\t\texperiments: experiments ?? experimentDefault,\n1668 | \t\t\tmcpServers: this.mcpHub?.getAllServers() ?? [],\n1669 | \t\t\tmaxOpenTabsContext: maxOpenTabsContext ?? 20,\n1670 | \t\t\tmaxWorkspaceFiles: maxWorkspaceFiles ?? 200,\n1671 | \t\t\tcwd,\n1672 | \t\t\tbrowserToolEnabled: browserToolEnabled ?? true,\n1673 | \t\t\ttelemetrySetting,\n1674 | \t\t\ttelemetryKey,\n1675 | \t\t\tmachineId,\n1676 | \t\t\tshowRooIgnoredFiles: showRooIgnoredFiles ?? true,\n1677 | \t\t\tshowAutoApproveMenu: showAutoApproveMenu ?? false, // kilocode_change\n1678 | \t\t\tshowTaskTimeline: showTaskTimeline ?? true, // kilocode_change\n1679 | \t\t\tlanguage, // kilocode_change\n1680 | \t\t\trenderContext: this.renderContext,\n1681 | \t\t\tmaxReadFileLine: maxReadFileLine ?? -1,\n1682 | \t\t\tmaxImageFileSize: maxImageFileSize ?? 5,\n1683 | \t\t\tmaxTotalImageSize: maxTotalImageSize ?? 20,\n1684 | \t\t\tmaxConcurrentFileReads: maxConcurrentFileReads ?? 5,\n1685 | \t\t\tallowVeryLargeReads: allowVeryLargeReads ?? false, // kilocode_change\n1686 | \t\t\tsettingsImportedAt: this.settingsImportedAt,\n1687 | \t\t\tterminalCompressProgressBar: terminalCompressProgressBar ?? true,\n1688 | \t\t\thasSystemPromptOverride,\n1689 | \t\t\thistoryPreviewCollapsed: historyPreviewCollapsed ?? false,\n1690 | \t\t\tcloudUserInfo,\n1691 | \t\t\tcloudIsAuthenticated: cloudIsAuthenticated ?? false,\n1692 | \t\t\tsharingEnabled: sharingEnabled ?? false,\n1693 | \t\t\torganizationAllowList,\n1694 | \t\t\tghostServiceSettings: ghostServiceSettings ?? {}, // kilocode_change\n1695 | \t\t\torganizationSettingsVersion,\n1696 | \t\t\tcondensingApiConfigId,\n1697 | \t\t\tcustomCondensingPrompt,\n1698 | \t\t\tcodebaseIndexModels: codebaseIndexModels ?? EMBEDDING_MODEL_PROFILES,\n1699 | \t\t\tcodebaseIndexConfig: {\n1700 | \t\t\t\tcodebaseIndexEnabled: codebaseIndexConfig?.codebaseIndexEnabled ?? true,\n1701 | \t\t\t\tcodebaseIndexQdrantUrl: codebaseIndexConfig?.codebaseIndexQdrantUrl ?? \"http://localhost:6333\",\n1702 | \t\t\t\tcodebaseIndexEmbedderProvider: codebaseIndexConfig?.codebaseIndexEmbedderProvider ?? \"openai\",\n1703 | \t\t\t\tcodebaseIndexEmbedderBaseUrl: codebaseIndexConfig?.codebaseIndexEmbedderBaseUrl ?? \"\",\n1704 | \t\t\t\tcodebaseIndexEmbedderModelId: codebaseIndexConfig?.codebaseIndexEmbedderModelId ?? \"\",\n1705 | \t\t\t\tcodebaseIndexEmbedderModelDimension: codebaseIndexConfig?.codebaseIndexEmbedderModelDimension ?? 1536,\n1706 | \t\t\t\tcodebaseIndexOpenAiCompatibleBaseUrl: codebaseIndexConfig?.codebaseIndexOpenAiCompatibleBaseUrl,\n1707 | \t\t\t\tcodebaseIndexSearchMaxResults: codebaseIndexConfig?.codebaseIndexSearchMaxResults,\n1708 | \t\t\t\tcodebaseIndexSearchMinScore: codebaseIndexConfig?.codebaseIndexSearchMinScore,\n1709 | \t\t\t},\n1710 | \t\t\tmdmCompliant: this.checkMdmCompliance(),\n1711 | \t\t\tprofileThresholds: profileThresholds ?? {},\n1712 | \t\t\tcloudApiUrl: getRooCodeApiUrl(),\n1713 | \t\t\thasOpenedModeSelector: this.getGlobalState(\"hasOpenedModeSelector\") ?? false,\n1714 | \t\t\tsystemNotificationsEnabled: systemNotificationsEnabled ?? false, // kilocode_change\n1715 | \t\t\tdismissedNotificationIds: dismissedNotificationIds ?? [], // kilocode_change\n1716 | \t\t\talwaysAllowFollowupQuestions: alwaysAllowFollowupQuestions ?? false,\n1717 | \t\t\tfollowupAutoApproveTimeoutMs: followupAutoApproveTimeoutMs ?? 60000,\n1718 | \t\t\tincludeDiagnosticMessages: includeDiagnosticMessages ?? true,\n1719 | \t\t\tmaxDiagnosticMessages: maxDiagnosticMessages ?? 50,\n1720 | \t\t\tincludeTaskHistoryInEnhance: includeTaskHistoryInEnhance ?? false,\n1721 | \t\t}\n1722 | \t}\n1723 | \n1724 | \t/**\n1725 | \t * Storage\n1726 | \t * https://dev.to/kompotkot/how-to-use-secretstorage-in-your-vscode-extensions-2hco\n1727 | \t * https://www.eliostruyf.com/devhack-code-extension-storage-options/\n1728 | \t */\n1729 | \n1730 | \tasync getState() {\n1731 | \t\tconst stateValues = this.contextProxy.getValues()\n1732 | \t\tconst customModes = await this.customModesManager.getCustomModes()\n1733 | \n1734 | \t\t// Determine apiProvider with the same logic as before.\n1735 | \t\tconst apiProvider: ProviderName = stateValues.apiProvider ? stateValues.apiProvider : \"kilocode\" // kilocode_change: fall back to kilocode\n1736 | \n1737 | \t\t// Build the apiConfiguration object combining state values and secrets.\n1738 | \t\tconst providerSettings = this.contextProxy.getProviderSettings()\n1739 | \n1740 | \t\t// Ensure apiProvider is set properly if not already in state\n1741 | \t\tif (!providerSettings.apiProvider) {\n1742 | \t\t\tproviderSettings.apiProvider = apiProvider\n1743 | \t\t}\n1744 | \n1745 | \t\tlet organizationAllowList = ORGANIZATION_ALLOW_ALL\n1746 | \n1747 | \t\ttry {\n1748 | \t\t\torganizationAllowList = await CloudService.instance.getAllowList()\n1749 | \t\t} catch (error) {\n1750 | \t\t\tconsole.error(\n1751 | \t\t\t\t`[getState] failed to get organization allow list: ${error instanceof Error ? error.message : String(error)}`,\n1752 | \t\t\t)\n1753 | \t\t}\n1754 | \n1755 | \t\tlet cloudUserInfo: CloudUserInfo | null = null\n1756 | \n1757 | \t\ttry {\n1758 | \t\t\tcloudUserInfo = CloudService.instance.getUserInfo()\n1759 | \t\t} catch (error) {\n1760 | \t\t\tconsole.error(\n1761 | \t\t\t\t`[getState] failed to get cloud user info: ${error instanceof Error ? error.message : String(error)}`,\n1762 | \t\t\t)\n1763 | \t\t}\n1764 | \n1765 | \t\tlet cloudIsAuthenticated: boolean = false\n1766 | \n1767 | \t\ttry {\n1768 | \t\t\tcloudIsAuthenticated = CloudService.instance.isAuthenticated()\n1769 | \t\t} catch (error) {\n1770 | \t\t\tconsole.error(\n1771 | \t\t\t\t`[getState] failed to get cloud authentication state: ${error instanceof Error ? error.message : String(error)}`,\n1772 | \t\t\t)\n1773 | \t\t}\n1774 | \n1775 | \t\tlet sharingEnabled: boolean = false\n1776 | \n1777 | \t\ttry {\n1778 | \t\t\tsharingEnabled = await CloudService.instance.canShareTask()\n1779 | \t\t} catch (error) {\n1780 | \t\t\tconsole.error(\n1781 | \t\t\t\t`[getState] failed to get sharing enabled state: ${error instanceof Error ? error.message : String(error)}`,\n1782 | \t\t\t)\n1783 | \t\t}\n1784 | \n1785 | \t\tlet organizationSettingsVersion: number = -1\n1786 | \n1787 | \t\ttry {\n1788 | \t\t\tif (CloudService.hasInstance()) {\n1789 | \t\t\t\tconst settings = CloudService.instance.getOrganizationSettings()\n1790 | \t\t\t\torganizationSettingsVersion = settings?.version ?? -1\n1791 | \t\t\t}\n1792 | \t\t} catch (error) {\n1793 | \t\t\tconsole.error(\n1794 | \t\t\t\t`[getState] failed to get organization settings version: ${error instanceof Error ? error.message : String(error)}`,\n1795 | \t\t\t)\n1796 | \t\t}\n1797 | \n1798 | \t\t// Return the same structure as before\n1799 | \t\treturn {\n1800 | \t\t\tapiConfiguration: providerSettings,\n1801 | \t\t\tlastShownAnnouncementId: stateValues.lastShownAnnouncementId,\n1802 | \t\t\tcustomInstructions: stateValues.customInstructions,\n1803 | \t\t\tapiModelId: stateValues.apiModelId,\n1804 | \t\t\talwaysAllowReadOnly: stateValues.alwaysAllowReadOnly ?? true,\n1805 | \t\t\talwaysAllowReadOnlyOutsideWorkspace: stateValues.alwaysAllowReadOnlyOutsideWorkspace ?? true,\n1806 | \t\t\talwaysAllowWrite: stateValues.alwaysAllowWrite ?? true,\n1807 | \t\t\talwaysAllowWriteOutsideWorkspace: stateValues.alwaysAllowWriteOutsideWorkspace ?? true,\n1808 | \t\t\talwaysAllowWriteProtected: stateValues.alwaysAllowWriteProtected ?? false,\n1809 | \t\t\talwaysAllowExecute: stateValues.alwaysAllowExecute ?? true,\n1810 | \t\t\talwaysAllowBrowser: stateValues.alwaysAllowBrowser ?? true,\n1811 | \t\t\talwaysAllowMcp: stateValues.alwaysAllowMcp ?? true,\n1812 | \t\t\talwaysAllowModeSwitch: stateValues.alwaysAllowModeSwitch ?? true,\n1813 | \t\t\talwaysAllowSubtasks: stateValues.alwaysAllowSubtasks ?? true,\n1814 | \t\t\talwaysAllowFollowupQuestions: stateValues.alwaysAllowFollowupQuestions ?? false,\n1815 | \t\t\talwaysAllowUpdateTodoList: stateValues.alwaysAllowUpdateTodoList ?? true, // kilocode_change\n1816 | \t\t\tfollowupAutoApproveTimeoutMs: stateValues.followupAutoApproveTimeoutMs ?? 60000,\n1817 | \t\t\tdiagnosticsEnabled: stateValues.diagnosticsEnabled ?? true,\n1818 | \t\t\tallowedMaxRequests: stateValues.allowedMaxRequests,\n1819 | \t\t\tautoCondenseContext: stateValues.autoCondenseContext ?? true,\n1820 | \t\t\tautoCondenseContextPercent: stateValues.autoCondenseContextPercent ?? 100,\n1821 | \t\t\ttaskHistory: stateValues.taskHistory,\n1822 | \t\t\tallowedCommands: stateValues.allowedCommands,\n1823 | \t\t\tdeniedCommands: stateValues.deniedCommands,\n1824 | \t\t\tsoundEnabled: stateValues.soundEnabled ?? false,\n1825 | \t\t\tttsEnabled: stateValues.ttsEnabled ?? false,\n1826 | \t\t\tttsSpeed: stateValues.ttsSpeed ?? 1.0,\n1827 | \t\t\tdiffEnabled: stateValues.diffEnabled ?? true,\n1828 | \t\t\tenableCheckpoints: stateValues.enableCheckpoints ?? true,\n1829 | \t\t\tsoundVolume: stateValues.soundVolume,\n1830 | \t\t\tbrowserViewportSize: stateValues.browserViewportSize ?? \"900x600\",\n1831 | \t\t\tscreenshotQuality: stateValues.screenshotQuality ?? 75,\n1832 | \t\t\tremoteBrowserHost: stateValues.remoteBrowserHost,\n1833 | \t\t\tremoteBrowserEnabled: stateValues.remoteBrowserEnabled ?? true,\n1834 | \t\t\tcachedChromeHostUrl: stateValues.cachedChromeHostUrl as string | undefined,\n1835 | \t\t\tfuzzyMatchThreshold: stateValues.fuzzyMatchThreshold ?? 1.0,\n1836 | \t\t\twriteDelayMs: stateValues.writeDelayMs ?? DEFAULT_WRITE_DELAY_MS,\n1837 | \t\t\tterminalOutputLineLimit: stateValues.terminalOutputLineLimit ?? 500,\n1838 | \t\t\tterminalOutputCharacterLimit:\n1839 | \t\t\t\tstateValues.terminalOutputCharacterLimit ?? DEFAULT_TERMINAL_OUTPUT_CHARACTER_LIMIT,\n1840 | \t\t\tterminalShellIntegrationTimeout:\n1841 | \t\t\t\tstateValues.terminalShellIntegrationTimeout ?? Terminal.defaultShellIntegrationTimeout,\n1842 | \t\t\tterminalShellIntegrationDisabled: stateValues.terminalShellIntegrationDisabled ?? true, // kilocode_change: default\n1843 | \t\t\tterminalCommandDelay: stateValues.terminalCommandDelay ?? 0,\n1844 | \t\t\tterminalPowershellCounter: stateValues.terminalPowershellCounter ?? false,\n1845 | \t\t\tterminalZshClearEolMark: stateValues.terminalZshClearEolMark ?? true,\n1846 | \t\t\tterminalZshOhMy: stateValues.terminalZshOhMy ?? false,\n1847 | \t\t\tterminalZshP10k: stateValues.terminalZshP10k ?? false,\n1848 | \t\t\tterminalZdotdir: stateValues.terminalZdotdir ?? false,\n1849 | \t\t\tterminalCompressProgressBar: stateValues.terminalCompressProgressBar ?? true,\n1850 | \t\t\tmode: stateValues.mode ?? defaultModeSlug,\n1851 | \t\t\tlanguage: stateValues.language ?? formatLanguage(vscode.env.language),\n1852 | \t\t\tmcpEnabled: true, // kilocode_change: always true\n1853 | \t\t\tenableMcpServerCreation: stateValues.enableMcpServerCreation ?? true,\n1854 | \t\t\talwaysApproveResubmit: stateValues.alwaysApproveResubmit ?? false,\n1855 | \t\t\trequestDelaySeconds: Math.max(5, stateValues.requestDelaySeconds ?? 10),\n1856 | \t\t\tcurrentApiConfigName: stateValues.currentApiConfigName ?? \"default\",\n1857 | \t\t\tlistApiConfigMeta: stateValues.listApiConfigMeta ?? [],\n1858 | \t\t\tpinnedApiConfigs: stateValues.pinnedApiConfigs ?? {},\n1859 | \t\t\tmodeApiConfigs: stateValues.modeApiConfigs ?? ({} as Record<Mode, string>),\n1860 | \t\t\tcustomModePrompts: stateValues.customModePrompts ?? {},\n1861 | \t\t\tcustomSupportPrompts: stateValues.customSupportPrompts ?? {},\n1862 | \t\t\tenhancementApiConfigId: stateValues.enhancementApiConfigId,\n1863 | \t\t\tcommitMessageApiConfigId: stateValues.commitMessageApiConfigId, // kilocode_change\n1864 | \t\t\tterminalCommandApiConfigId: stateValues.terminalCommandApiConfigId, // kilocode_change\n1865 | \t\t\tghostServiceSettings: stateValues.ghostServiceSettings ?? {}, // kilocode_change\n1866 | \t\t\texperiments: stateValues.experiments ?? experimentDefault,\n1867 | \t\t\tautoApprovalEnabled: stateValues.autoApprovalEnabled ?? true,\n1868 | \t\t\tcustomModes,\n1869 | \t\t\tmaxOpenTabsContext: stateValues.maxOpenTabsContext ?? 20,\n1870 | \t\t\tmaxWorkspaceFiles: stateValues.maxWorkspaceFiles ?? 200,\n1871 | \t\t\topenRouterUseMiddleOutTransform: stateValues.openRouterUseMiddleOutTransform ?? true,\n1872 | \t\t\tbrowserToolEnabled: stateValues.browserToolEnabled ?? true,\n1873 | \t\t\ttelemetrySetting: stateValues.telemetrySetting || \"unset\",\n1874 | \t\t\tshowRooIgnoredFiles: stateValues.showRooIgnoredFiles ?? true,\n1875 | \t\t\tshowAutoApproveMenu: stateValues.showAutoApproveMenu ?? false, // kilocode_change\n1876 | \t\t\tshowTaskTimeline: stateValues.showTaskTimeline ?? true, // kilocode_change\n1877 | \t\t\tmaxReadFileLine: stateValues.maxReadFileLine ?? -1,\n1878 | \t\t\tmaxImageFileSize: stateValues.maxImageFileSize ?? 5,\n1879 | \t\t\tmaxTotalImageSize: stateValues.maxTotalImageSize ?? 20,\n1880 | \t\t\tmaxConcurrentFileReads: stateValues.maxConcurrentFileReads ?? 5,\n1881 | \t\t\tallowVeryLargeReads: stateValues.allowVeryLargeReads ?? false, // kilocode_change\n1882 | \t\t\tsystemNotificationsEnabled: stateValues.systemNotificationsEnabled ?? true, // kilocode_change\n1883 | \t\t\tdismissedNotificationIds: stateValues.dismissedNotificationIds ?? [], // kilocode_change\n1884 | \t\t\thistoryPreviewCollapsed: stateValues.historyPreviewCollapsed ?? false,\n1885 | \t\t\tcloudUserInfo,\n1886 | \t\t\tcloudIsAuthenticated,\n1887 | \t\t\tsharingEnabled,\n1888 | \t\t\torganizationAllowList,\n1889 | \t\t\torganizationSettingsVersion,\n1890 | \t\t\t// Explicitly add condensing settings\n1891 | \t\t\tcondensingApiConfigId: stateValues.condensingApiConfigId,\n1892 | \t\t\tcustomCondensingPrompt: stateValues.customCondensingPrompt,\n1893 | \t\t\tcodebaseIndexModels: stateValues.codebaseIndexModels ?? EMBEDDING_MODEL_PROFILES,\n1894 | \t\t\tcodebaseIndexConfig: {\n1895 | \t\t\t\tcodebaseIndexEnabled: stateValues.codebaseIndexConfig?.codebaseIndexEnabled ?? true,\n1896 | \t\t\t\tcodebaseIndexQdrantUrl:\n1897 | \t\t\t\t\tstateValues.codebaseIndexConfig?.codebaseIndexQdrantUrl ?? \"http://localhost:6333\",\n1898 | \t\t\t\tcodebaseIndexEmbedderProvider:\n1899 | \t\t\t\t\tstateValues.codebaseIndexConfig?.codebaseIndexEmbedderProvider ?? \"openai\",\n1900 | \t\t\t\tcodebaseIndexEmbedderBaseUrl: stateValues.codebaseIndexConfig?.codebaseIndexEmbedderBaseUrl ?? \"\",\n1901 | \t\t\t\tcodebaseIndexEmbedderModelId: stateValues.codebaseIndexConfig?.codebaseIndexEmbedderModelId ?? \"\",\n1902 | \t\t\t\tcodebaseIndexEmbedderModelDimension:\n1903 | \t\t\t\t\tstateValues.codebaseIndexConfig?.codebaseIndexEmbedderModelDimension,\n1904 | \t\t\t\tcodebaseIndexOpenAiCompatibleBaseUrl:\n1905 | \t\t\t\t\tstateValues.codebaseIndexConfig?.codebaseIndexOpenAiCompatibleBaseUrl,\n1906 | \t\t\t\tcodebaseIndexSearchMaxResults: stateValues.codebaseIndexConfig?.codebaseIndexSearchMaxResults,\n1907 | \t\t\t\tcodebaseIndexSearchMinScore: stateValues.codebaseIndexConfig?.codebaseIndexSearchMinScore,\n1908 | \t\t\t},\n1909 | \t\t\tprofileThresholds: stateValues.profileThresholds ?? {},\n1910 | \t\t\t// Add diagnostic message settings\n1911 | \t\t\tincludeDiagnosticMessages: stateValues.includeDiagnosticMessages ?? true,\n1912 | \t\t\tmaxDiagnosticMessages: stateValues.maxDiagnosticMessages ?? 50,\n1913 | \t\t\t// Add includeTaskHistoryInEnhance setting\n1914 | \t\t\tincludeTaskHistoryInEnhance: stateValues.includeTaskHistoryInEnhance ?? false,\n1915 | \t\t}\n1916 | \t}\n1917 | \n1918 | \tasync updateTaskHistory(item: HistoryItem): Promise<HistoryItem[]> {\n1919 | \t\tconst history = (this.getGlobalState(\"taskHistory\") as HistoryItem[] | undefined) || []\n1920 | \t\tconst existingItemIndex = history.findIndex((h) => h.id === item.id)\n1921 | \n1922 | \t\tif (existingItemIndex !== -1) {\n1923 | \t\t\thistory[existingItemIndex] = item\n1924 | \t\t} else {\n1925 | \t\t\thistory.push(item)\n1926 | \t\t}\n1927 | \n1928 | \t\tawait this.updateGlobalState(\"taskHistory\", history)\n1929 | \t\treturn history\n1930 | \t}\n1931 | \n1932 | \t// ContextProxy\n1933 | \n1934 | \t// @deprecated - Use `ContextProxy#setValue` instead.\n1935 | \tprivate async updateGlobalState<K extends keyof GlobalState>(key: K, value: GlobalState[K]) {\n1936 | \t\tawait this.contextProxy.setValue(key, value)\n1937 | \t}\n1938 | \n1939 | \t// @deprecated - Use `ContextProxy#getValue` instead.\n1940 | \tprivate getGlobalState<K extends keyof GlobalState>(key: K) {\n1941 | \t\treturn this.contextProxy.getValue(key)\n1942 | \t}\n1943 | \n1944 | \tpublic async setValue<K extends keyof RooCodeSettings>(key: K, value: RooCodeSettings[K]) {\n1945 | \t\tawait this.contextProxy.setValue(key, value)\n1946 | \t}\n1947 | \n1948 | \tpublic getValue<K extends keyof RooCodeSettings>(key: K) {\n1949 | \t\treturn this.contextProxy.getValue(key)\n1950 | \t}\n1951 | \n1952 | \tpublic getValues() {\n1953 | \t\treturn this.contextProxy.getValues()\n1954 | \t}\n1955 | \n1956 | \tpublic async setValues(values: RooCodeSettings) {\n1957 | \t\tawait this.contextProxy.setValues(values)\n1958 | \t}\n1959 | \n1960 | \t// cwd\n1961 | \n1962 | \tget cwd() {\n1963 | \t\treturn getWorkspacePath()\n1964 | \t}\n1965 | \n1966 | \t// dev\n1967 | \n1968 | \tasync resetState() {\n1969 | \t\tconst answer = await vscode.window.showInformationMessage(\n1970 | \t\t\tt(\"common:confirmation.reset_state\"),\n1971 | \t\t\t{ modal: true },\n1972 | \t\t\tt(\"common:answers.yes\"),\n1973 | \t\t)\n1974 | \n1975 | \t\tif (answer !== t(\"common:answers.yes\")) {\n1976 | \t\t\treturn\n1977 | \t\t}\n1978 | \n1979 | \t\t// Logout from Kilo Code provider before resetting (same approach as ProfileView logout)\n1980 | \t\tconst { apiConfiguration, currentApiConfigName } = await this.getState()\n1981 | \t\tif (apiConfiguration.kilocodeToken) {\n1982 | \t\t\tawait this.upsertProviderProfile(currentApiConfigName, {\n1983 | \t\t\t\t...apiConfiguration,\n1984 | \t\t\t\tkilocodeToken: \"\",\n1985 | \t\t\t})\n1986 | \t\t}\n1987 | \n1988 | \t\tawait this.contextProxy.resetAllState()\n1989 | \t\tawait this.providerSettingsManager.resetAllConfigs()\n1990 | \t\tawait this.customModesManager.resetCustomModes()\n1991 | \n1992 | \t\tawait this.removeClineFromStack()\n1993 | \t\tawait this.postStateToWebview()\n1994 | \t\tawait this.postMessageToWebview({ type: \"action\", action: \"chatButtonClicked\" })\n1995 | \t}\n1996 | \n1997 | \t// logging\n1998 | \n1999 | \tpublic log(message: string) {\n2000 | \t\tthis.outputChannel.appendLine(message)\n2001 | \t\tconsole.log(message)\n2002 | \t}\n2003 | \n2004 | \t// integration tests\n2005 | \n2006 | \tget viewLaunched() {\n2007 | \t\treturn this.isViewLaunched\n2008 | \t}\n2009 | \n2010 | \tget messages() {\n2011 | \t\treturn this.getCurrentCline()?.clineMessages || []\n2012 | \t}\n2013 | \n2014 | \t// Add public getter\n2015 | \tpublic getMcpHub(): McpHub | undefined {\n2016 | \t\treturn this.mcpHub\n2017 | \t}\n2018 | \n2019 | \t/**\n2020 | \t * Check if the current state is compliant with MDM policy\n2021 | \t * @returns true if compliant, false if blocked\n2022 | \t */\n2023 | \tpublic checkMdmCompliance(): boolean {\n2024 | \t\tif (!this.mdmService) {\n2025 | \t\t\treturn true // No MDM service, allow operation\n2026 | \t\t}\n2027 | \n2028 | \t\tconst compliance = this.mdmService.isCompliant()\n2029 | \n2030 | \t\tif (!compliance.compliant) {\n2031 | \t\t\treturn false\n2032 | \t\t}\n2033 | \n2034 | \t\treturn true\n2035 | \t}\n2036 | \n2037 | \t/**\n2038 | \t * Returns properties to be included in every telemetry event\n2039 | \t * This method is called by the telemetry service to get context information\n2040 | \t * like the current mode, API provider, git repository information, etc.\n2041 | \t */\n2042 | \tpublic async getTelemetryProperties(): Promise<TelemetryProperties> {\n2043 | \t\tconst {\n2044 | \t\t\tmode,\n2045 | \t\t\tapiConfiguration,\n2046 | \t\t\tlanguage,\n2047 | \t\t\texperiments, // kilocode_change\n2048 | \t\t} = await this.getState()\n2049 | \t\tconst task = this.getCurrentCline()\n2050 | \n2051 | \t\tconst packageJSON = this.context.extension?.packageJSON\n2052 | \n2053 | \t\t// Get Roo Code Cloud authentication state\n2054 | \t\tlet cloudIsAuthenticated: boolean | undefined\n2055 | \n2056 | \t\ttry {\n2057 | \t\t\tif (CloudService.hasInstance()) {\n2058 | \t\t\t\tcloudIsAuthenticated = CloudService.instance.isAuthenticated()\n2059 | \t\t\t}\n2060 | \t\t} catch (error) {\n2061 | \t\t\t// Silently handle errors to avoid breaking telemetry collection\n2062 | \t\t\tthis.log(`[getTelemetryProperties] Failed to get cloud auth state: ${error}`)\n2063 | \t\t}\n2064 | \n2065 | \t\t// Get git repository information\n2066 | \t\tconst gitInfo = await getWorkspaceGitInfo()\n2067 | \n2068 | \t\t// kilocode_change start\n2069 | \t\tasync function getModelId() {\n2070 | \t\t\ttry {\n2071 | \t\t\t\tif (task?.api instanceof OpenRouterHandler) {\n2072 | \t\t\t\t\treturn { modelId: (await task.api.fetchModel()).id }\n2073 | \t\t\t\t} else {\n2074 | \t\t\t\t\treturn { modelId: task?.api?.getModel().id }\n2075 | \t\t\t\t}\n2076 | \t\t\t} catch (error) {\n2077 | \t\t\t\treturn {\n2078 | \t\t\t\t\tmodelException: stringifyError(error),\n2079 | \t\t\t\t}\n2080 | \t\t\t}\n2081 | \t\t}\n2082 | \n2083 | \t\tfunction getMemory() {\n2084 | \t\t\ttry {\n2085 | \t\t\t\treturn { memory: { ...process.memoryUsage() } }\n2086 | \t\t\t} catch (error) {\n2087 | \t\t\t\treturn {\n2088 | \t\t\t\t\tmemoryException: stringifyError(error),\n2089 | \t\t\t\t}\n2090 | \t\t\t}\n2091 | \t\t}\n2092 | \n2093 | \t\tfunction getFastApply() {\n2094 | \t\t\ttry {\n2095 | \t\t\t\treturn {\n2096 | \t\t\t\t\tfastApply: {\n2097 | \t\t\t\t\t\tmorphFastApply: Boolean(experiments.morphFastApply),\n2098 | \t\t\t\t\t\tmorphApiKey: Boolean(apiConfiguration.morphApiKey),\n2099 | \t\t\t\t\t},\n2100 | \t\t\t\t}\n2101 | \t\t\t} catch (error) {\n2102 | \t\t\t\treturn {\n2103 | \t\t\t\t\tfastApplyException: stringifyError(error),\n2104 | \t\t\t\t}\n2105 | \t\t\t}\n2106 | \t\t}\n2107 | \t\t// kilocode_change end\n2108 | \n2109 | \t\t// Calculate todo list statistics\n2110 | \t\tconst todoList = task?.todoList\n2111 | \t\tlet todos: { total: number; completed: number; inProgress: number; pending: number } | undefined\n2112 | \n2113 | \t\tif (todoList && todoList.length > 0) {\n2114 | \t\t\ttodos = {\n2115 | \t\t\t\ttotal: todoList.length,\n2116 | \t\t\t\tcompleted: todoList.filter((todo) => todo.status === \"completed\").length,\n2117 | \t\t\t\tinProgress: todoList.filter((todo) => todo.status === \"in_progress\").length,\n2118 | \t\t\t\tpending: todoList.filter((todo) => todo.status === \"pending\").length,\n2119 | \t\t\t}\n2120 | \t\t}\n2121 | \n2122 | \t\t// Return all properties including git info - clients will filter as needed\n2123 | \t\treturn {\n2124 | \t\t\tappName: packageJSON?.name ?? Package.name,\n2125 | \t\t\tappVersion: packageJSON?.version ?? Package.version,\n2126 | \t\t\tvscodeVersion: vscode.version,\n2127 | \t\t\tplatform: process.platform,\n2128 | \t\t\teditorName: vscode.env.appName,\n2129 | \t\t\tlanguage,\n2130 | \t\t\tmode,\n2131 | \t\t\tapiProvider: apiConfiguration?.apiProvider,\n2132 | \t\t\t// kilocode_change start\n2133 | \t\t\t...(await getModelId()),\n2134 | \t\t\t...getMemory(),\n2135 | \t\t\t...getFastApply(),\n2136 | \t\t\t// kilocode_change end\n2137 | \t\t\tdiffStrategy: task?.diffStrategy?.getName(),\n2138 | \t\t\tisSubtask: task ? !!task.parentTask : undefined,\n2139 | \t\t\tcloudIsAuthenticated,\n2140 | \t\t\t...(todos && { todos }),\n2141 | \t\t\t...gitInfo,\n2142 | \t\t}\n2143 | \t}\n2144 | \n2145 | \t// kilocode_change:\n2146 | \t// MCP Marketplace\n2147 | \tprivate async fetchMcpMarketplaceFromApi(silent: boolean = false): Promise<McpMarketplaceCatalog | undefined> {\n2148 | \t\ttry {\n2149 | \t\t\tconst response = await axios.get(\"https://api.cline.bot/v1/mcp/marketplace\", {\n2150 | \t\t\t\theaders: {\n2151 | \t\t\t\t\t\"Content-Type\": \"application/json\",\n2152 | \t\t\t\t},\n2153 | \t\t\t})\n2154 | \n2155 | \t\t\tif (!response.data) {\n2156 | \t\t\t\tthrow new Error(\"Invalid response from MCP marketplace API\")\n2157 | \t\t\t}\n2158 | \n2159 | \t\t\tconst catalog: McpMarketplaceCatalog = {\n2160 | \t\t\t\titems: (response.data || []).map((item: any) => ({\n2161 | \t\t\t\t\t...item,\n2162 | \t\t\t\t\tgithubStars: item.githubStars ?? 0,\n2163 | \t\t\t\t\tdownloadCount: item.downloadCount ?? 0,\n2164 | \t\t\t\t\ttags: item.tags ?? [],\n2165 | \t\t\t\t})),\n2166 | \t\t\t}\n2167 | \n2168 | \t\t\tawait this.updateGlobalState(\"mcpMarketplaceCatalog\", catalog)\n2169 | \t\t\treturn catalog\n2170 | \t\t} catch (error) {\n2171 | \t\t\tconsole.error(\"Failed to fetch MCP marketplace:\", error)\n2172 | \t\t\tif (!silent) {\n2173 | \t\t\t\tconst errorMessage = error instanceof Error ? error.message : \"Failed to fetch MCP marketplace\"\n2174 | \t\t\t\tawait this.postMessageToWebview({\n2175 | \t\t\t\t\ttype: \"mcpMarketplaceCatalog\",\n2176 | \t\t\t\t\terror: errorMessage,\n2177 | \t\t\t\t})\n2178 | \t\t\t\tvscode.window.showErrorMessage(errorMessage)\n2179 | \t\t\t}\n2180 | \t\t\treturn undefined\n2181 | \t\t}\n2182 | \t}\n2183 | \n2184 | \tasync silentlyRefreshMcpMarketplace() {\n2185 | \t\ttry {\n2186 | \t\t\tconst catalog = await this.fetchMcpMarketplaceFromApi(true)\n2187 | \t\t\tif (catalog) {\n2188 | \t\t\t\tawait this.postMessageToWebview({\n2189 | \t\t\t\t\ttype: \"mcpMarketplaceCatalog\",\n2190 | \t\t\t\t\tmcpMarketplaceCatalog: catalog,\n2191 | \t\t\t\t})\n2192 | \t\t\t}\n2193 | \t\t} catch (error) {\n2194 | \t\t\tconsole.error(\"Failed to silently refresh MCP marketplace:\", error)\n2195 | \t\t}\n2196 | \t}\n2197 | \n2198 | \tasync fetchMcpMarketplace(forceRefresh: boolean = false) {\n2199 | \t\ttry {\n2200 | \t\t\t// Check if we have cached data\n2201 | \t\t\tconst cachedCatalog = (await this.getGlobalState(\"mcpMarketplaceCatalog\")) as\n2202 | \t\t\t\t| McpMarketplaceCatalog\n2203 | \t\t\t\t| undefined\n2204 | \t\t\tif (!forceRefresh && cachedCatalog?.items) {\n2205 | \t\t\t\tawait this.postMessageToWebview({\n2206 | \t\t\t\t\ttype: \"mcpMarketplaceCatalog\",\n2207 | \t\t\t\t\tmcpMarketplaceCatalog: cachedCatalog,\n2208 | \t\t\t\t})\n2209 | \t\t\t\treturn\n2210 | \t\t\t}\n2211 | \n2212 | \t\t\tconst catalog = await this.fetchMcpMarketplaceFromApi(false)\n2213 | \t\t\tif (catalog) {\n2214 | \t\t\t\tawait this.postMessageToWebview({\n2215 | \t\t\t\t\ttype: \"mcpMarketplaceCatalog\",\n2216 | \t\t\t\t\tmcpMarketplaceCatalog: catalog,\n2217 | \t\t\t\t})\n2218 | \t\t\t}\n2219 | \t\t} catch (error) {\n2220 | \t\t\tconsole.error(\"Failed to handle cached MCP marketplace:\", error)\n2221 | \t\t\tconst errorMessage = error instanceof Error ? error.message : \"Failed to handle cached MCP marketplace\"\n2222 | \t\t\tawait this.postMessageToWebview({\n2223 | \t\t\t\ttype: \"mcpMarketplaceCatalog\",\n2224 | \t\t\t\terror: errorMessage,\n2225 | \t\t\t})\n2226 | \t\t\tvscode.window.showErrorMessage(errorMessage)\n2227 | \t\t}\n2228 | \t}\n2229 | \n2230 | \tasync downloadMcp(mcpId: string) {\n2231 | \t\ttry {\n2232 | \t\t\t// First check if we already have this MCP server installed\n2233 | \t\t\tconst servers = this.mcpHub?.getServers() || []\n2234 | \t\t\tconst isInstalled = servers.some((server: McpServer) => server.name === mcpId)\n2235 | \n2236 | \t\t\tif (isInstalled) {\n2237 | \t\t\t\tthrow new Error(\"This MCP server is already installed\")\n2238 | \t\t\t}\n2239 | \n2240 | \t\t\t// Fetch server details from marketplace\n2241 | \t\t\tconst response = await axios.post<McpDownloadResponse>(\n2242 | \t\t\t\t\"https://api.cline.bot/v1/mcp/download\",\n2243 | \t\t\t\t{ mcpId },\n2244 | \t\t\t\t{\n2245 | \t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n2246 | \t\t\t\t\ttimeout: 10000,\n2247 | \t\t\t\t},\n2248 | \t\t\t)\n2249 | \n2250 | \t\t\tif (!response.data) {\n2251 | \t\t\t\tthrow new Error(\"Invalid response from MCP marketplace API\")\n2252 | \t\t\t}\n2253 | \n2254 | \t\t\tconsole.log(\"[downloadMcp] Response from download API\", { response })\n2255 | \n2256 | \t\t\tconst mcpDetails = response.data\n2257 | \n2258 | \t\t\t// Validate required fields\n2259 | \t\t\tif (!mcpDetails.githubUrl) {\n2260 | \t\t\t\tthrow new Error(\"Missing GitHub URL in MCP download response\")\n2261 | \t\t\t}\n2262 | \t\t\tif (!mcpDetails.readmeContent) {\n2263 | \t\t\t\tthrow new Error(\"Missing README content in MCP download response\")\n2264 | \t\t\t}\n2265 | \n2266 | \t\t\t// Send details to webview\n2267 | \t\t\tawait this.postMessageToWebview({\n2268 | \t\t\t\ttype: \"mcpDownloadDetails\",\n2269 | \t\t\t\tmcpDownloadDetails: mcpDetails,\n2270 | \t\t\t})\n2271 | \n2272 | \t\t\t// Create task with context from README and added guidelines for MCP server installation\n2273 | \t\t\tconst task = `Set up the MCP server from ${mcpDetails.githubUrl} while adhering to these MCP server installation rules:\n2274 | - Use \"${mcpDetails.mcpId}\" as the server name in ${GlobalFileNames.mcpSettings}.\n2275 | - Create the directory for the new MCP server before starting installation.\n2276 | - Use commands aligned with the user's shell and operating system best practices.\n2277 | - The following README may contain instructions that conflict with the user's OS, in which case proceed thoughtfully.\n2278 | - Once installed, demonstrate the server's capabilities by using one of its tools.\n2279 | Here is the project's README to help you get started:\\n\\n${mcpDetails.readmeContent}\\n${mcpDetails.llmsInstallationContent}`\n2280 | \n2281 | \t\t\t// Initialize task and show chat view\n2282 | \t\t\tawait this.initClineWithTask(task)\n2283 | \t\t\tawait this.postMessageToWebview({\n2284 | \t\t\t\ttype: \"action\",\n2285 | \t\t\t\taction: \"chatButtonClicked\",\n2286 | \t\t\t})\n2287 | \t\t} catch (error) {\n2288 | \t\t\tconsole.error(\"Failed to download MCP:\", error)\n2289 | \t\t\tlet errorMessage = \"Failed to download MCP\"\n2290 | \n2291 | \t\t\tif (axios.isAxiosError(error)) {\n2292 | \t\t\t\tif (error.code === \"ECONNABORTED\") {\n2293 | \t\t\t\t\terrorMessage = \"Request timed out. Please try again.\"\n2294 | \t\t\t\t} else if (error.response?.status === 404) {\n2295 | \t\t\t\t\terrorMessage = \"MCP server not found in marketplace.\"\n2296 | \t\t\t\t} else if (error.response?.status === 500) {\n2297 | \t\t\t\t\terrorMessage = \"Internal server error. Please try again later.\"\n2298 | \t\t\t\t} else if (!error.response && error.request) {\n2299 | \t\t\t\t\terrorMessage = \"Network error. Please check your internet connection.\"\n2300 | \t\t\t\t}\n2301 | \t\t\t} else if (error instanceof Error) {\n2302 | \t\t\t\terrorMessage = error.message\n2303 | \t\t\t}\n2304 | \n2305 | \t\t\t// Show error in both notification and marketplace UI\n2306 | \t\t\tvscode.window.showErrorMessage(errorMessage)\n2307 | \t\t\tawait this.postMessageToWebview({\n2308 | \t\t\t\ttype: \"mcpDownloadDetails\",\n2309 | \t\t\t\terror: errorMessage,\n2310 | \t\t\t})\n2311 | \t\t}\n2312 | \t}\n2313 | \t// end kilocode_change\n2314 | \n2315 | \t// kilocode_change start\n2316 | \t// Add new methods for favorite functionality\n2317 | \tasync toggleTaskFavorite(id: string) {\n2318 | \t\tconst history = this.getGlobalState(\"taskHistory\") ?? []\n2319 | \t\tconst updatedHistory = history.map((item) => {\n2320 | \t\t\tif (item.id === id) {\n2321 | \t\t\t\treturn { ...item, isFavorited: !item.isFavorited }\n2322 | \t\t\t}\n2323 | \t\t\treturn item\n2324 | \t\t})\n2325 | \t\tawait this.updateGlobalState(\"taskHistory\", updatedHistory)\n2326 | \t\tawait this.postStateToWebview()\n2327 | \t}\n2328 | \n2329 | \tasync getFavoriteTasks(): Promise<HistoryItem[]> {\n2330 | \t\tconst history = this.getGlobalState(\"taskHistory\") ?? []\n2331 | \t\treturn history.filter((item) => item.isFavorited)\n2332 | \t}\n2333 | \n2334 | \t// Modify batch delete to respect favorites\n2335 | \tasync deleteMultipleTasks(taskIds: string[]) {\n2336 | \t\tconst history = this.getGlobalState(\"taskHistory\") ?? []\n2337 | \t\tconst favoritedTaskIds = taskIds.filter((id) => history.find((item) => item.id === id)?.isFavorited)\n2338 | \n2339 | \t\tif (favoritedTaskIds.length > 0) {\n2340 | \t\t\tthrow new Error(\"Cannot delete favorited tasks. Please unfavorite them first.\")\n2341 | \t\t}\n2342 | \n2343 | \t\tfor (const id of taskIds) {\n2344 | \t\t\tawait this.deleteTaskWithId(id)\n2345 | \t\t}\n2346 | \t}\n2347 | \n2348 | \tasync setTaskFileNotFound(id: string) {\n2349 | \t\tconst history = this.getGlobalState(\"taskHistory\") ?? []\n2350 | \t\tconst updatedHistory = history.map((item) => {\n2351 | \t\t\tif (item.id === id) {\n2352 | \t\t\t\treturn { ...item, fileNotfound: true }\n2353 | \t\t\t}\n2354 | \t\t\treturn item\n2355 | \t\t})\n2356 | \t\tawait this.updateGlobalState(\"taskHistory\", updatedHistory)\n2357 | \t\tawait this.postStateToWebview()\n2358 | \t}\n2359 | \n2360 | \t// kilocode_change end\n2361 | }\n2362 | \n2363 | class OrganizationAllowListViolationError extends Error {\n2364 | \tconstructor(message: string) {\n2365 | \t\tsuper(message)\n2366 | \t}\n2367 | }\n</content>\n</file>\n</files>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:23:10.809Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.08\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | Completed |\n| 5 | 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。 | In Progress |\n| 6 | 分析请求构建、发送和响应处理的详细过程。 | Pending |\n| 7 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 8 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<update_todo_list>\n<todos>\n[x] 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。\n[x] 识别与大模型交互相关的函数或模块，并阅读相关文件。\n[x] 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。\n[x] 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。\n[x] 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。\n[-] 阅读 `kilocode/src/core/webview/webviewMessageHandler.ts` 和 `kilocode/src/core/task/Task.ts` 文件，分析请求构建、发送和响应处理的详细过程。\n[ ] 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。\n[ ] 编写代码分析文档，并保存到指定目录。\n</todos>\n</update_todo_list>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[update_todo_list] Result:"
				},
				{
					"text": "Todo list updated successfully."
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:23:22.119Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.10\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | Completed |\n| 5 | 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。 | Completed |\n| 6 | 阅读 `kilocode/src/core/webview/webviewMessageHandler.ts` 和 `kilocode/src/core/task/Task.ts` 文件，分析请求构建、发送和响应处理的详细过程。 | In Progress |\n| 7 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 8 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "<read_file>\n<args>\n<file>\n<path>kilocode/src/core/webview/webviewMessageHandler.ts</path>\n</file>\n<file>\n<path>kilocode/src/core/task/Task.ts</path>\n</file>\n</args>\n</read_file>"
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[read_file for 'kilocode/src/core/webview/webviewMessageHandler.ts', 'kilocode/src/core/task/Task.ts'] Result:"
				},
				{
					"text": "<files>\n<file><path>kilocode/src/core/webview/webviewMessageHandler.ts</path>\n<content lines=\"1-2978\">\n   1 | import { safeWriteJson } from \"../../utils/safeWriteJson\"\n   2 | import * as path from \"path\"\n   3 | import * as os from \"os\"\n   4 | import * as fs from \"fs/promises\"\n   5 | import pWaitFor from \"p-wait-for\"\n   6 | import * as vscode from \"vscode\"\n   7 | import axios from \"axios\" // kilocode_change\n   8 | import * as yaml from \"yaml\"\n   9 | \n  10 | import {\n  11 | \ttype Language,\n  12 | \ttype ProviderSettings,\n  13 | \ttype GlobalState,\n  14 | \ttype ClineMessage,\n  15 | \tTelemetryEventName,\n  16 | \tghostServiceSettingsSchema, // kilocode_change\n  17 | } from \"@roo-code/types\"\n  18 | import { CloudService } from \"@roo-code/cloud\"\n  19 | import { TelemetryService } from \"@roo-code/telemetry\"\n  20 | import { type ApiMessage } from \"../task-persistence/apiMessages\"\n  21 | \n  22 | import { ClineProvider } from \"./ClineProvider\"\n  23 | import { changeLanguage, t } from \"../../i18n\"\n  24 | import { Package } from \"../../shared/package\"\n  25 | import { RouterName, toRouterName, ModelRecord } from \"../../shared/api\"\n  26 | import { supportPrompt } from \"../../shared/support-prompt\"\n  27 | import { MessageEnhancer } from \"./messageEnhancer\"\n  28 | \n  29 | import { checkoutDiffPayloadSchema, checkoutRestorePayloadSchema, WebviewMessage } from \"../../shared/WebviewMessage\"\n  30 | import { checkExistKey } from \"../../shared/checkExistApiConfig\"\n  31 | import { experimentDefault } from \"../../shared/experiments\"\n  32 | import { Terminal } from \"../../integrations/terminal/Terminal\"\n  33 | import { openFile } from \"../../integrations/misc/open-file\"\n  34 | import { openImage, saveImage } from \"../../integrations/misc/image-handler\"\n  35 | import { selectImages } from \"../../integrations/misc/process-images\"\n  36 | import { getTheme } from \"../../integrations/theme/getTheme\"\n  37 | import { discoverChromeHostUrl, tryChromeHostUrl } from \"../../services/browser/browserDiscovery\"\n  38 | import { searchWorkspaceFiles } from \"../../services/search/file-search\"\n  39 | import { fileExistsAtPath } from \"../../utils/fs\"\n  40 | import { playTts, setTtsEnabled, setTtsSpeed, stopTts } from \"../../utils/tts\"\n  41 | import { showSystemNotification } from \"../../integrations/notifications\" // kilocode_change\n  42 | import { singleCompletionHandler } from \"../../utils/single-completion-handler\" // kilocode_change\n  43 | import { searchCommits } from \"../../utils/git\"\n  44 | import { exportSettings, importSettingsWithFeedback } from \"../config/importExport\"\n  45 | import { getOpenAiModels } from \"../../api/providers/openai\"\n  46 | import { getVsCodeLmModels } from \"../../api/providers/vscode-lm\"\n  47 | import { openMention } from \"../mentions\"\n  48 | import { TelemetrySetting } from \"../../shared/TelemetrySetting\"\n  49 | import { getWorkspacePath } from \"../../utils/path\"\n  50 | import { ensureSettingsDirectoryExists } from \"../../utils/globalContext\"\n  51 | import { Mode, defaultModeSlug } from \"../../shared/modes\"\n  52 | import { getModels, flushModels } from \"../../api/providers/fetchers/modelCache\"\n  53 | import { GetModelsOptions } from \"../../shared/api\"\n  54 | import { generateSystemPrompt } from \"./generateSystemPrompt\"\n  55 | import { getCommand } from \"../../utils/commands\"\n  56 | import { toggleWorkflow, toggleRule, createRuleFile, deleteRuleFile } from \"./kilorules\"\n  57 | import { mermaidFixPrompt } from \"../prompts/utilities/mermaid\" // kilocode_change\n  58 | import { editMessageHandler, fetchKilocodeNotificationsHandler } from \"../kilocode/webview/webviewMessageHandlerUtils\" // kilocode_change\n  59 | \n  60 | const ALLOWED_VSCODE_SETTINGS = new Set([\"terminal.integrated.inheritEnv\"])\n  61 | \n  62 | import { MarketplaceManager, MarketplaceItemType } from \"../../services/marketplace\"\n  63 | import { setPendingTodoList } from \"../tools/updateTodoListTool\"\n  64 | import { UsageTracker } from \"../../utils/usage-tracker\"\n  65 | \n  66 | export const webviewMessageHandler = async (\n  67 | \tprovider: ClineProvider,\n  68 | \tmessage: WebviewMessage,\n  69 | \tmarketplaceManager?: MarketplaceManager,\n  70 | ) => {\n  71 | \t// Utility functions provided for concise get/update of global state via contextProxy API.\n  72 | \tconst getGlobalState = <K extends keyof GlobalState>(key: K) => provider.contextProxy.getValue(key)\n  73 | \tconst updateGlobalState = async <K extends keyof GlobalState>(key: K, value: GlobalState[K]) =>\n  74 | \t\tawait provider.contextProxy.setValue(key, value)\n  75 | \n  76 | \t/**\n  77 | \t * Shared utility to find message indices based on timestamp\n  78 | \t */\n  79 | \tconst findMessageIndices = (messageTs: number, currentCline: any) => {\n  80 | \t\tconst timeCutoff = messageTs - 1000 // 1 second buffer before the message\n  81 | \t\tconst messageIndex = currentCline.clineMessages.findIndex((msg: ClineMessage) => msg.ts && msg.ts >= timeCutoff)\n  82 | \t\tconst apiConversationHistoryIndex = currentCline.apiConversationHistory.findIndex(\n  83 | \t\t\t(msg: ApiMessage) => msg.ts && msg.ts >= timeCutoff,\n  84 | \t\t)\n  85 | \t\treturn { messageIndex, apiConversationHistoryIndex }\n  86 | \t}\n  87 | \n  88 | \t/**\n  89 | \t * Removes the target message and all subsequent messages\n  90 | \t */\n  91 | \tconst removeMessagesThisAndSubsequent = async (\n  92 | \t\tcurrentCline: any,\n  93 | \t\tmessageIndex: number,\n  94 | \t\tapiConversationHistoryIndex: number,\n  95 | \t) => {\n  96 | \t\t// Delete this message and all that follow\n  97 | \t\tawait currentCline.overwriteClineMessages(currentCline.clineMessages.slice(0, messageIndex))\n  98 | \n  99 | \t\tif (apiConversationHistoryIndex !== -1) {\n 100 | \t\t\tawait currentCline.overwriteApiConversationHistory(\n 101 | \t\t\t\tcurrentCline.apiConversationHistory.slice(0, apiConversationHistoryIndex),\n 102 | \t\t\t)\n 103 | \t\t}\n 104 | \t}\n 105 | \n 106 | \t/**\n 107 | \t * Handles message deletion operations with user confirmation\n 108 | \t */\n 109 | \tconst handleDeleteOperation = async (messageTs: number): Promise<void> => {\n 110 | \t\t// Send message to webview to show delete confirmation dialog\n 111 | \t\tawait provider.postMessageToWebview({\n 112 | \t\t\ttype: \"showDeleteMessageDialog\",\n 113 | \t\t\tmessageTs,\n 114 | \t\t})\n 115 | \t}\n 116 | \n 117 | \t/**\n 118 | \t * Handles confirmed message deletion from webview dialog\n 119 | \t */\n 120 | \tconst handleDeleteMessageConfirm = async (messageTs: number): Promise<void> => {\n 121 | \t\t// Only proceed if we have a current cline\n 122 | \t\tif (provider.getCurrentCline()) {\n 123 | \t\t\tconst currentCline = provider.getCurrentCline()!\n 124 | \t\t\tconst { messageIndex, apiConversationHistoryIndex } = findMessageIndices(messageTs, currentCline)\n 125 | \n 126 | \t\t\tif (messageIndex !== -1) {\n 127 | \t\t\t\ttry {\n 128 | \t\t\t\t\tconst { historyItem } = await provider.getTaskWithId(currentCline.taskId)\n 129 | \n 130 | \t\t\t\t\t// Delete this message and all subsequent messages\n 131 | \t\t\t\t\tawait removeMessagesThisAndSubsequent(currentCline, messageIndex, apiConversationHistoryIndex)\n 132 | \n 133 | \t\t\t\t\t// Initialize with history item after deletion\n 134 | \t\t\t\t\tawait provider.initClineWithHistoryItem(historyItem)\n 135 | \t\t\t\t} catch (error) {\n 136 | \t\t\t\t\tconsole.error(\"Error in delete message:\", error)\n 137 | \t\t\t\t\tvscode.window.showErrorMessage(\n 138 | \t\t\t\t\t\t`Error deleting message: ${error instanceof Error ? error.message : String(error)}`,\n 139 | \t\t\t\t\t)\n 140 | \t\t\t\t}\n 141 | \t\t\t}\n 142 | \t\t}\n 143 | \t}\n 144 | \n 145 | \t/**\n 146 | \t * Handles message editing operations with user confirmation\n 147 | \t */\n 148 | \tconst handleEditOperation = async (messageTs: number, editedContent: string, images?: string[]): Promise<void> => {\n 149 | \t\t// Send message to webview to show edit confirmation dialog\n 150 | \t\tawait provider.postMessageToWebview({\n 151 | \t\t\ttype: \"showEditMessageDialog\",\n 152 | \t\t\tmessageTs,\n 153 | \t\t\ttext: editedContent,\n 154 | \t\t\timages,\n 155 | \t\t})\n 156 | \t}\n 157 | \n 158 | \t/**\n 159 | \t * Handles confirmed message editing from webview dialog\n 160 | \t */\n 161 | \tconst handleEditMessageConfirm = async (\n 162 | \t\tmessageTs: number,\n 163 | \t\teditedContent: string,\n 164 | \t\timages?: string[],\n 165 | \t): Promise<void> => {\n 166 | \t\t// Only proceed if we have a current cline\n 167 | \t\tif (provider.getCurrentCline()) {\n 168 | \t\t\tconst currentCline = provider.getCurrentCline()!\n 169 | \n 170 | \t\t\t// Use findMessageIndices to find messages based on timestamp\n 171 | \t\t\tconst { messageIndex, apiConversationHistoryIndex } = findMessageIndices(messageTs, currentCline)\n 172 | \n 173 | \t\t\tif (messageIndex !== -1) {\n 174 | \t\t\t\ttry {\n 175 | \t\t\t\t\t// Edit this message and delete subsequent\n 176 | \t\t\t\t\tawait removeMessagesThisAndSubsequent(currentCline, messageIndex, apiConversationHistoryIndex)\n 177 | \n 178 | \t\t\t\t\t// Process the edited message as a regular user message\n 179 | \t\t\t\t\t// This will add it to the conversation and trigger an AI response\n 180 | \t\t\t\t\twebviewMessageHandler(provider, {\n 181 | \t\t\t\t\t\ttype: \"askResponse\",\n 182 | \t\t\t\t\t\taskResponse: \"messageResponse\",\n 183 | \t\t\t\t\t\ttext: editedContent,\n 184 | \t\t\t\t\t\timages,\n 185 | \t\t\t\t\t})\n 186 | \n 187 | \t\t\t\t\t// Don't initialize with history item for edit operations\n 188 | \t\t\t\t\t// The webviewMessageHandler will handle the conversation state\n 189 | \t\t\t\t} catch (error) {\n 190 | \t\t\t\t\tconsole.error(\"Error in edit message:\", error)\n 191 | \t\t\t\t\tvscode.window.showErrorMessage(\n 192 | \t\t\t\t\t\t`Error editing message: ${error instanceof Error ? error.message : String(error)}`,\n 193 | \t\t\t\t\t)\n 194 | \t\t\t\t}\n 195 | \t\t\t}\n 196 | \t\t}\n 197 | \t}\n 198 | \n 199 | \t/**\n 200 | \t * Handles message modification operations (delete or edit) with confirmation dialog\n 201 | \t * @param messageTs Timestamp of the message to operate on\n 202 | \t * @param operation Type of operation ('delete' or 'edit')\n 203 | \t * @param editedContent New content for edit operations\n 204 | \t * @returns Promise<void>\n 205 | \t */\n 206 | \tconst handleMessageModificationsOperation = async (\n 207 | \t\tmessageTs: number,\n 208 | \t\toperation: \"delete\" | \"edit\",\n 209 | \t\teditedContent?: string,\n 210 | \t\timages?: string[],\n 211 | \t): Promise<void> => {\n 212 | \t\tif (operation === \"delete\") {\n 213 | \t\t\tawait handleDeleteOperation(messageTs)\n 214 | \t\t} else if (operation === \"edit\" && editedContent) {\n 215 | \t\t\tawait handleEditOperation(messageTs, editedContent, images)\n 216 | \t\t}\n 217 | \t}\n 218 | \n 219 | \tswitch (message.type) {\n 220 | \t\tcase \"webviewDidLaunch\":\n 221 | \t\t\t// Load custom modes first\n 222 | \t\t\tconst customModes = await provider.customModesManager.getCustomModes()\n 223 | \t\t\tawait updateGlobalState(\"customModes\", customModes)\n 224 | \n 225 | \t\t\t// Refresh workflow toggles\n 226 | \t\t\tconst { refreshWorkflowToggles } = await import(\"../context/instructions/workflows\") // kilocode_change\n 227 | \t\t\tawait refreshWorkflowToggles(provider.context, provider.cwd) // kilocode_change\n 228 | \n 229 | \t\t\tprovider.postStateToWebview()\n 230 | \t\t\tprovider.postRulesDataToWebview() // kilocode_change: send workflows and rules immediately\n 231 | \t\t\tprovider.workspaceTracker?.initializeFilePaths() // Don't await.\n 232 | \n 233 | \t\t\tgetTheme().then((theme) => provider.postMessageToWebview({ type: \"theme\", text: JSON.stringify(theme) }))\n 234 | \n 235 | \t\t\t// If MCP Hub is already initialized, update the webview with\n 236 | \t\t\t// current server list.\n 237 | \t\t\tconst mcpHub = provider.getMcpHub()\n 238 | \n 239 | \t\t\tif (mcpHub) {\n 240 | \t\t\t\tprovider.postMessageToWebview({ type: \"mcpServers\", mcpServers: mcpHub.getAllServers() })\n 241 | \t\t\t}\n 242 | \n 243 | \t\t\tprovider.providerSettingsManager\n 244 | \t\t\t\t.listConfig()\n 245 | \t\t\t\t.then(async (listApiConfig) => {\n 246 | \t\t\t\t\tif (!listApiConfig) {\n 247 | \t\t\t\t\t\treturn\n 248 | \t\t\t\t\t}\n 249 | \n 250 | \t\t\t\t\tif (listApiConfig.length === 1) {\n 251 | \t\t\t\t\t\t// Check if first time init then sync with exist config.\n 252 | \t\t\t\t\t\tif (!checkExistKey(listApiConfig[0])) {\n 253 | \t\t\t\t\t\t\tconst { apiConfiguration } = await provider.getState()\n 254 | \n 255 | \t\t\t\t\t\t\tawait provider.providerSettingsManager.saveConfig(\n 256 | \t\t\t\t\t\t\t\tlistApiConfig[0].name ?? \"default\",\n 257 | \t\t\t\t\t\t\t\tapiConfiguration,\n 258 | \t\t\t\t\t\t\t)\n 259 | \n 260 | \t\t\t\t\t\t\tlistApiConfig[0].apiProvider = apiConfiguration.apiProvider\n 261 | \t\t\t\t\t\t}\n 262 | \t\t\t\t\t}\n 263 | \n 264 | \t\t\t\t\tconst currentConfigName = getGlobalState(\"currentApiConfigName\")\n 265 | \n 266 | \t\t\t\t\tif (currentConfigName) {\n 267 | \t\t\t\t\t\tif (!(await provider.providerSettingsManager.hasConfig(currentConfigName))) {\n 268 | \t\t\t\t\t\t\t// Current config name not valid, get first config in list.\n 269 | \t\t\t\t\t\t\tconst name = listApiConfig[0]?.name\n 270 | \t\t\t\t\t\t\tawait updateGlobalState(\"currentApiConfigName\", name)\n 271 | \n 272 | \t\t\t\t\t\t\tif (name) {\n 273 | \t\t\t\t\t\t\t\tawait provider.activateProviderProfile({ name })\n 274 | \t\t\t\t\t\t\t\treturn\n 275 | \t\t\t\t\t\t\t}\n 276 | \t\t\t\t\t\t}\n 277 | \t\t\t\t\t}\n 278 | \n 279 | \t\t\t\t\tawait Promise.all([\n 280 | \t\t\t\t\t\tawait updateGlobalState(\"listApiConfigMeta\", listApiConfig),\n 281 | \t\t\t\t\t\tawait provider.postMessageToWebview({ type: \"listApiConfig\", listApiConfig }),\n 282 | \t\t\t\t\t])\n 283 | \t\t\t\t})\n 284 | \t\t\t\t.catch((error) =>\n 285 | \t\t\t\t\tprovider.log(\n 286 | \t\t\t\t\t\t`Error list api configuration: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n 287 | \t\t\t\t\t),\n 288 | \t\t\t\t)\n 289 | \n 290 | \t\t\t// If user already opted in to telemetry, enable telemetry service\n 291 | \t\t\tprovider.getStateToPostToWebview().then(async (/*kilocode_change*/ state) => {\n 292 | \t\t\t\tconst { telemetrySetting } = state\n 293 | \t\t\t\tconst isOptedIn = telemetrySetting === \"enabled\"\n 294 | \t\t\t\tTelemetryService.instance.updateTelemetryState(isOptedIn)\n 295 | \t\t\t\tawait TelemetryService.instance.updateIdentity(state.apiConfiguration.kilocodeToken ?? \"\") // kilocode_change\n 296 | \t\t\t})\n 297 | \n 298 | \t\t\tprovider.isViewLaunched = true\n 299 | \t\t\tbreak\n 300 | \t\tcase \"newTask\":\n 301 | \t\t\t// Initializing new instance of Cline will make sure that any\n 302 | \t\t\t// agentically running promises in old instance don't affect our new\n 303 | \t\t\t// task. This essentially creates a fresh slate for the new task.\n 304 | \t\t\tawait provider.initClineWithTask(message.text, message.images)\n 305 | \t\t\tbreak\n 306 | \t\t// kilocode_change start\n 307 | \t\tcase \"condense\":\n 308 | \t\t\tprovider.getCurrentCline()?.handleWebviewAskResponse(\"yesButtonClicked\")\n 309 | \t\t\tbreak\n 310 | \t\t// kilocode_change end\n 311 | \t\tcase \"customInstructions\":\n 312 | \t\t\tawait provider.updateCustomInstructions(message.text)\n 313 | \t\t\tbreak\n 314 | \t\tcase \"alwaysAllowReadOnly\":\n 315 | \t\t\tawait updateGlobalState(\"alwaysAllowReadOnly\", message.bool ?? undefined)\n 316 | \t\t\tawait provider.postStateToWebview()\n 317 | \t\t\tbreak\n 318 | \t\tcase \"alwaysAllowReadOnlyOutsideWorkspace\":\n 319 | \t\t\tawait updateGlobalState(\"alwaysAllowReadOnlyOutsideWorkspace\", message.bool ?? undefined)\n 320 | \t\t\tawait provider.postStateToWebview()\n 321 | \t\t\tbreak\n 322 | \t\tcase \"alwaysAllowWrite\":\n 323 | \t\t\tawait updateGlobalState(\"alwaysAllowWrite\", message.bool ?? undefined)\n 324 | \t\t\tawait provider.postStateToWebview()\n 325 | \t\t\tbreak\n 326 | \t\tcase \"alwaysAllowWriteOutsideWorkspace\":\n 327 | \t\t\tawait updateGlobalState(\"alwaysAllowWriteOutsideWorkspace\", message.bool ?? undefined)\n 328 | \t\t\tawait provider.postStateToWebview()\n 329 | \t\t\tbreak\n 330 | \t\tcase \"alwaysAllowWriteProtected\":\n 331 | \t\t\tawait updateGlobalState(\"alwaysAllowWriteProtected\", message.bool ?? undefined)\n 332 | \t\t\tawait provider.postStateToWebview()\n 333 | \t\t\tbreak\n 334 | \t\tcase \"alwaysAllowExecute\":\n 335 | \t\t\tawait updateGlobalState(\"alwaysAllowExecute\", message.bool ?? undefined)\n 336 | \t\t\tawait provider.postStateToWebview()\n 337 | \t\t\tbreak\n 338 | \t\tcase \"alwaysAllowBrowser\":\n 339 | \t\t\tawait updateGlobalState(\"alwaysAllowBrowser\", message.bool ?? undefined)\n 340 | \t\t\tawait provider.postStateToWebview()\n 341 | \t\t\tbreak\n 342 | \t\tcase \"alwaysAllowMcp\":\n 343 | \t\t\tawait updateGlobalState(\"alwaysAllowMcp\", message.bool)\n 344 | \t\t\tawait provider.postStateToWebview()\n 345 | \t\t\tbreak\n 346 | \t\tcase \"alwaysAllowModeSwitch\":\n 347 | \t\t\tawait updateGlobalState(\"alwaysAllowModeSwitch\", message.bool)\n 348 | \t\t\tawait provider.postStateToWebview()\n 349 | \t\t\tbreak\n 350 | \t\tcase \"allowedMaxRequests\":\n 351 | \t\t\tawait updateGlobalState(\"allowedMaxRequests\", message.value)\n 352 | \t\t\tawait provider.postStateToWebview()\n 353 | \t\t\tbreak\n 354 | \t\tcase \"alwaysAllowSubtasks\":\n 355 | \t\t\tawait updateGlobalState(\"alwaysAllowSubtasks\", message.bool)\n 356 | \t\t\tawait provider.postStateToWebview()\n 357 | \t\t\tbreak\n 358 | \t\tcase \"alwaysAllowUpdateTodoList\":\n 359 | \t\t\tawait updateGlobalState(\"alwaysAllowUpdateTodoList\", message.bool)\n 360 | \t\t\tawait provider.postStateToWebview()\n 361 | \t\t\tbreak\n 362 | \t\tcase \"askResponse\":\n 363 | \t\t\tprovider.getCurrentCline()?.handleWebviewAskResponse(message.askResponse!, message.text, message.images)\n 364 | \t\t\tbreak\n 365 | \t\tcase \"autoCondenseContext\":\n 366 | \t\t\tawait updateGlobalState(\"autoCondenseContext\", message.bool)\n 367 | \t\t\tawait provider.postStateToWebview()\n 368 | \t\t\tbreak\n 369 | \t\tcase \"autoCondenseContextPercent\":\n 370 | \t\t\tawait updateGlobalState(\"autoCondenseContextPercent\", message.value)\n 371 | \t\t\tawait provider.postStateToWebview()\n 372 | \t\t\tbreak\n 373 | \t\tcase \"terminalOperation\":\n 374 | \t\t\tif (message.terminalOperation) {\n 375 | \t\t\t\tprovider.getCurrentCline()?.handleTerminalOperation(message.terminalOperation)\n 376 | \t\t\t}\n 377 | \t\t\tbreak\n 378 | \t\tcase \"clearTask\":\n 379 | \t\t\t// clear task resets the current session and allows for a new task to be started, if this session is a subtask - it allows the parent task to be resumed\n 380 | \t\t\t// Check if the current task actually has a parent task\n 381 | \t\t\tconst currentTask = provider.getCurrentCline()\n 382 | \t\t\tif (currentTask && currentTask.parentTask) {\n 383 | \t\t\t\tawait provider.finishSubTask(t(\"common:tasks.canceled\"))\n 384 | \t\t\t} else {\n 385 | \t\t\t\t// Regular task - just clear it\n 386 | \t\t\t\tawait provider.clearTask()\n 387 | \t\t\t}\n 388 | \t\t\tawait provider.postStateToWebview()\n 389 | \t\t\tbreak\n 390 | \t\tcase \"didShowAnnouncement\":\n 391 | \t\t\tawait updateGlobalState(\"lastShownAnnouncementId\", provider.latestAnnouncementId)\n 392 | \t\t\tawait provider.postStateToWebview()\n 393 | \t\t\tbreak\n 394 | \t\tcase \"selectImages\":\n 395 | \t\t\tconst images = await selectImages()\n 396 | \t\t\tawait provider.postMessageToWebview({\n 397 | \t\t\t\ttype: \"selectedImages\",\n 398 | \t\t\t\timages,\n 399 | \t\t\t\tcontext: message.context,\n 400 | \t\t\t\tmessageTs: message.messageTs,\n 401 | \t\t\t})\n 402 | \t\t\tbreak\n 403 | \t\tcase \"exportCurrentTask\":\n 404 | \t\t\tconst currentTaskId = provider.getCurrentCline()?.taskId\n 405 | \t\t\tif (currentTaskId) {\n 406 | \t\t\t\tprovider.exportTaskWithId(currentTaskId)\n 407 | \t\t\t}\n 408 | \t\t\tbreak\n 409 | \t\tcase \"shareCurrentTask\":\n 410 | \t\t\tconst shareTaskId = provider.getCurrentCline()?.taskId\n 411 | \t\t\tconst clineMessages = provider.getCurrentCline()?.clineMessages\n 412 | \t\t\tif (!shareTaskId) {\n 413 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.share_no_active_task\"))\n 414 | \t\t\t\tbreak\n 415 | \t\t\t}\n 416 | \n 417 | \t\t\ttry {\n 418 | \t\t\t\tconst visibility = message.visibility || \"organization\"\n 419 | \t\t\t\tconst result = await CloudService.instance.shareTask(shareTaskId, visibility, clineMessages)\n 420 | \n 421 | \t\t\t\tif (result.success && result.shareUrl) {\n 422 | \t\t\t\t\t// Show success notification\n 423 | \t\t\t\t\tconst messageKey =\n 424 | \t\t\t\t\t\tvisibility === \"public\"\n 425 | \t\t\t\t\t\t\t? \"common:info.public_share_link_copied\"\n 426 | \t\t\t\t\t\t\t: \"common:info.organization_share_link_copied\"\n 427 | \t\t\t\t\tvscode.window.showInformationMessage(t(messageKey))\n 428 | \n 429 | \t\t\t\t\t// Send success feedback to webview for inline display\n 430 | \t\t\t\t\tawait provider.postMessageToWebview({\n 431 | \t\t\t\t\t\ttype: \"shareTaskSuccess\",\n 432 | \t\t\t\t\t\tvisibility,\n 433 | \t\t\t\t\t\ttext: result.shareUrl,\n 434 | \t\t\t\t\t})\n 435 | \t\t\t\t} else {\n 436 | \t\t\t\t\t// Handle error\n 437 | \t\t\t\t\tconst errorMessage = result.error || \"Failed to create share link\"\n 438 | \t\t\t\t\tif (errorMessage.includes(\"Authentication\")) {\n 439 | \t\t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.share_auth_required\"))\n 440 | \t\t\t\t\t} else if (errorMessage.includes(\"sharing is not enabled\")) {\n 441 | \t\t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.share_not_enabled\"))\n 442 | \t\t\t\t\t} else if (errorMessage.includes(\"not found\")) {\n 443 | \t\t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.share_task_not_found\"))\n 444 | \t\t\t\t\t} else {\n 445 | \t\t\t\t\t\tvscode.window.showErrorMessage(errorMessage)\n 446 | \t\t\t\t\t}\n 447 | \t\t\t\t}\n 448 | \t\t\t} catch (error) {\n 449 | \t\t\t\tprovider.log(`[shareCurrentTask] Unexpected error: ${error}`)\n 450 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.share_task_failed\"))\n 451 | \t\t\t}\n 452 | \t\t\tbreak\n 453 | \t\tcase \"showTaskWithId\":\n 454 | \t\t\tprovider.showTaskWithId(message.text!)\n 455 | \t\t\tbreak\n 456 | \t\tcase \"condenseTaskContextRequest\":\n 457 | \t\t\tprovider.condenseTaskContext(message.text!)\n 458 | \t\t\tbreak\n 459 | \t\tcase \"deleteTaskWithId\":\n 460 | \t\t\tprovider.deleteTaskWithId(message.text!)\n 461 | \t\t\tbreak\n 462 | \t\tcase \"deleteMultipleTasksWithIds\": {\n 463 | \t\t\tconst ids = message.ids\n 464 | \n 465 | \t\t\tif (Array.isArray(ids)) {\n 466 | \t\t\t\t// Process in batches of 20 (or another reasonable number)\n 467 | \t\t\t\tconst batchSize = 20\n 468 | \t\t\t\tconst results = []\n 469 | \n 470 | \t\t\t\t// Only log start and end of the operation\n 471 | \t\t\t\tconsole.log(`Batch deletion started: ${ids.length} tasks total`)\n 472 | \n 473 | \t\t\t\tfor (let i = 0; i < ids.length; i += batchSize) {\n 474 | \t\t\t\t\tconst batch = ids.slice(i, i + batchSize)\n 475 | \n 476 | \t\t\t\t\tconst batchPromises = batch.map(async (id) => {\n 477 | \t\t\t\t\t\ttry {\n 478 | \t\t\t\t\t\t\tawait provider.deleteTaskWithId(id)\n 479 | \t\t\t\t\t\t\treturn { id, success: true }\n 480 | \t\t\t\t\t\t} catch (error) {\n 481 | \t\t\t\t\t\t\t// Keep error logging for debugging purposes\n 482 | \t\t\t\t\t\t\tconsole.log(\n 483 | \t\t\t\t\t\t\t\t`Failed to delete task ${id}: ${error instanceof Error ? error.message : String(error)}`,\n 484 | \t\t\t\t\t\t\t)\n 485 | \t\t\t\t\t\t\treturn { id, success: false }\n 486 | \t\t\t\t\t\t}\n 487 | \t\t\t\t\t})\n 488 | \n 489 | \t\t\t\t\t// Process each batch in parallel but wait for completion before starting the next batch\n 490 | \t\t\t\t\tconst batchResults = await Promise.all(batchPromises)\n 491 | \t\t\t\t\tresults.push(...batchResults)\n 492 | \n 493 | \t\t\t\t\t// Update the UI after each batch to show progress\n 494 | \t\t\t\t\tawait provider.postStateToWebview()\n 495 | \t\t\t\t}\n 496 | \n 497 | \t\t\t\t// Log final results\n 498 | \t\t\t\tconst successCount = results.filter((r) => r.success).length\n 499 | \t\t\t\tconst failCount = results.length - successCount\n 500 | \t\t\t\tconsole.log(\n 501 | \t\t\t\t\t`Batch deletion completed: ${successCount}/${ids.length} tasks successful, ${failCount} tasks failed`,\n 502 | \t\t\t\t)\n 503 | \t\t\t}\n 504 | \t\t\tbreak\n 505 | \t\t}\n 506 | \t\tcase \"exportTaskWithId\":\n 507 | \t\t\tprovider.exportTaskWithId(message.text!)\n 508 | \t\t\tbreak\n 509 | \t\tcase \"importSettings\": {\n 510 | \t\t\tawait importSettingsWithFeedback({\n 511 | \t\t\t\tproviderSettingsManager: provider.providerSettingsManager,\n 512 | \t\t\t\tcontextProxy: provider.contextProxy,\n 513 | \t\t\t\tcustomModesManager: provider.customModesManager,\n 514 | \t\t\t\tprovider: provider,\n 515 | \t\t\t})\n 516 | \n 517 | \t\t\tbreak\n 518 | \t\t}\n 519 | \t\tcase \"exportSettings\":\n 520 | \t\t\tawait exportSettings({\n 521 | \t\t\t\tproviderSettingsManager: provider.providerSettingsManager,\n 522 | \t\t\t\tcontextProxy: provider.contextProxy,\n 523 | \t\t\t})\n 524 | \n 525 | \t\t\tbreak\n 526 | \t\tcase \"resetState\":\n 527 | \t\t\tawait provider.resetState()\n 528 | \t\t\tbreak\n 529 | \t\tcase \"flushRouterModels\":\n 530 | \t\t\tconst routerNameFlush: RouterName = toRouterName(message.text)\n 531 | \t\t\tawait flushModels(routerNameFlush)\n 532 | \t\t\tbreak\n 533 | \t\tcase \"requestRouterModels\":\n 534 | \t\t\tconst { apiConfiguration } = await provider.getState()\n 535 | \n 536 | \t\t\tconst routerModels: Partial<Record<RouterName, ModelRecord>> = {\n 537 | \t\t\t\topenrouter: {},\n 538 | \t\t\t\trequesty: {},\n 539 | \t\t\t\tglama: {},\n 540 | \t\t\t\tunbound: {},\n 541 | \t\t\t\tlitellm: {},\n 542 | \t\t\t\t\"kilocode-openrouter\": {}, // kilocode_change\n 543 | \t\t\t\tollama: {},\n 544 | \t\t\t\tlmstudio: {},\n 545 | \t\t\t}\n 546 | \n 547 | \t\t\tconst safeGetModels = async (options: GetModelsOptions): Promise<ModelRecord> => {\n 548 | \t\t\t\ttry {\n 549 | \t\t\t\t\treturn await getModels(options)\n 550 | \t\t\t\t} catch (error) {\n 551 | \t\t\t\t\tconsole.error(\n 552 | \t\t\t\t\t\t`Failed to fetch models in webviewMessageHandler requestRouterModels for ${options.provider}:`,\n 553 | \t\t\t\t\t\terror,\n 554 | \t\t\t\t\t)\n 555 | \t\t\t\t\tthrow error // Re-throw to be caught by Promise.allSettled\n 556 | \t\t\t\t}\n 557 | \t\t\t}\n 558 | \n 559 | \t\t\t// kilocode_change start: openrouter auth, kilocode provider\n 560 | \t\t\tconst openRouterApiKey = apiConfiguration.openRouterApiKey || message?.values?.openRouterApiKey\n 561 | \t\t\tconst openRouterBaseUrl = apiConfiguration.openRouterBaseUrl || message?.values?.openRouterBaseUrl\n 562 | \n 563 | \t\t\tconst modelFetchPromises: Array<{ key: RouterName; options: GetModelsOptions }> = [\n 564 | \t\t\t\t{\n 565 | \t\t\t\t\tkey: \"openrouter\",\n 566 | \t\t\t\t\toptions: { provider: \"openrouter\", apiKey: openRouterApiKey, baseUrl: openRouterBaseUrl },\n 567 | \t\t\t\t},\n 568 | \t\t\t\t{ key: \"requesty\", options: { provider: \"requesty\", apiKey: apiConfiguration.requestyApiKey } },\n 569 | \t\t\t\t{ key: \"glama\", options: { provider: \"glama\" } },\n 570 | \t\t\t\t{ key: \"unbound\", options: { provider: \"unbound\", apiKey: apiConfiguration.unboundApiKey } },\n 571 | \t\t\t\t{\n 572 | \t\t\t\t\tkey: \"kilocode-openrouter\",\n 573 | \t\t\t\t\toptions: { provider: \"kilocode-openrouter\", kilocodeToken: apiConfiguration.kilocodeToken },\n 574 | \t\t\t\t},\n 575 | \t\t\t\t{ key: \"ollama\", options: { provider: \"ollama\", baseUrl: apiConfiguration.ollamaBaseUrl } },\n 576 | \t\t\t]\n 577 | \t\t\t// kilocode_change end\n 578 | \n 579 | \t\t\t// Don't fetch Ollama and LM Studio models by default anymore\n 580 | \t\t\t// They have their own specific handlers: requestOllamaModels and requestLmStudioModels\n 581 | \n 582 | \t\t\tconst litellmApiKey = apiConfiguration.litellmApiKey || message?.values?.litellmApiKey\n 583 | \t\t\tconst litellmBaseUrl = apiConfiguration.litellmBaseUrl || message?.values?.litellmBaseUrl\n 584 | \t\t\tif (litellmApiKey && litellmBaseUrl) {\n 585 | \t\t\t\tmodelFetchPromises.push({\n 586 | \t\t\t\t\tkey: \"litellm\",\n 587 | \t\t\t\t\toptions: { provider: \"litellm\", apiKey: litellmApiKey, baseUrl: litellmBaseUrl },\n 588 | \t\t\t\t})\n 589 | \t\t\t}\n 590 | \n 591 | \t\t\tconst results = await Promise.allSettled(\n 592 | \t\t\t\tmodelFetchPromises.map(async ({ key, options }) => {\n 593 | \t\t\t\t\tconst models = await safeGetModels(options)\n 594 | \t\t\t\t\treturn { key, models } // key is RouterName here\n 595 | \t\t\t\t}),\n 596 | \t\t\t)\n 597 | \n 598 | \t\t\tconst fetchedRouterModels: Partial<Record<RouterName, ModelRecord>> = {\n 599 | \t\t\t\t...routerModels,\n 600 | \t\t\t\t// Initialize ollama and lmstudio with empty objects since they use separate handlers\n 601 | \t\t\t\tollama: {},\n 602 | \t\t\t\tlmstudio: {},\n 603 | \t\t\t}\n 604 | \n 605 | \t\t\tresults.forEach((result, index) => {\n 606 | \t\t\t\tconst routerName = modelFetchPromises[index].key // Get RouterName using index\n 607 | \n 608 | \t\t\t\tif (result.status === \"fulfilled\") {\n 609 | \t\t\t\t\tfetchedRouterModels[routerName] = result.value.models\n 610 | \n 611 | \t\t\t\t\t// Ollama and LM Studio settings pages still need these events\n 612 | \t\t\t\t\tif (routerName === \"ollama\" && Object.keys(result.value.models).length > 0) {\n 613 | \t\t\t\t\t\tprovider.postMessageToWebview({\n 614 | \t\t\t\t\t\t\ttype: \"ollamaModels\",\n 615 | \t\t\t\t\t\t\tollamaModels: Object.keys(result.value.models),\n 616 | \t\t\t\t\t\t})\n 617 | \t\t\t\t\t} else if (routerName === \"lmstudio\" && Object.keys(result.value.models).length > 0) {\n 618 | \t\t\t\t\t\tprovider.postMessageToWebview({\n 619 | \t\t\t\t\t\t\ttype: \"lmStudioModels\",\n 620 | \t\t\t\t\t\t\tlmStudioModels: Object.keys(result.value.models),\n 621 | \t\t\t\t\t\t})\n 622 | \t\t\t\t\t}\n 623 | \t\t\t\t} else {\n 624 | \t\t\t\t\t// Handle rejection: Post a specific error message for this provider\n 625 | \t\t\t\t\tconst errorMessage = result.reason instanceof Error ? result.reason.message : String(result.reason)\n 626 | \t\t\t\t\tconsole.error(`Error fetching models for ${routerName}:`, result.reason)\n 627 | \n 628 | \t\t\t\t\tfetchedRouterModels[routerName] = {} // Ensure it's an empty object in the main routerModels message\n 629 | \n 630 | \t\t\t\t\tprovider.postMessageToWebview({\n 631 | \t\t\t\t\t\ttype: \"singleRouterModelFetchResponse\",\n 632 | \t\t\t\t\t\tsuccess: false,\n 633 | \t\t\t\t\t\terror: errorMessage,\n 634 | \t\t\t\t\t\tvalues: { provider: routerName },\n 635 | \t\t\t\t\t})\n 636 | \t\t\t\t}\n 637 | \t\t\t})\n 638 | \n 639 | \t\t\tprovider.postMessageToWebview({\n 640 | \t\t\t\ttype: \"routerModels\",\n 641 | \t\t\t\trouterModels: fetchedRouterModels as Record<RouterName, ModelRecord>,\n 642 | \t\t\t})\n 643 | \n 644 | \t\t\tbreak\n 645 | \t\tcase \"requestOllamaModels\": {\n 646 | \t\t\t// Specific handler for Ollama models only\n 647 | \t\t\tconst { apiConfiguration: ollamaApiConfig } = await provider.getState()\n 648 | \t\t\ttry {\n 649 | \t\t\t\t// Flush cache first to ensure fresh models\n 650 | \t\t\t\tawait flushModels(\"ollama\")\n 651 | \n 652 | \t\t\t\tconst ollamaModels = await getModels({\n 653 | \t\t\t\t\tprovider: \"ollama\",\n 654 | \t\t\t\t\tbaseUrl: ollamaApiConfig.ollamaBaseUrl,\n 655 | \t\t\t\t})\n 656 | \n 657 | \t\t\t\tif (Object.keys(ollamaModels).length > 0) {\n 658 | \t\t\t\t\tprovider.postMessageToWebview({\n 659 | \t\t\t\t\t\ttype: \"ollamaModels\",\n 660 | \t\t\t\t\t\tollamaModels: Object.keys(ollamaModels),\n 661 | \t\t\t\t\t})\n 662 | \t\t\t\t}\n 663 | \t\t\t} catch (error) {\n 664 | \t\t\t\t// Silently fail - user hasn't configured Ollama yet\n 665 | \t\t\t\tconsole.debug(\"Ollama models fetch failed:\", error)\n 666 | \t\t\t}\n 667 | \t\t\tbreak\n 668 | \t\t}\n 669 | \t\tcase \"requestLmStudioModels\": {\n 670 | \t\t\t// Specific handler for LM Studio models only\n 671 | \t\t\tconst { apiConfiguration: lmStudioApiConfig } = await provider.getState()\n 672 | \t\t\ttry {\n 673 | \t\t\t\t// Flush cache first to ensure fresh models\n 674 | \t\t\t\tawait flushModels(\"lmstudio\")\n 675 | \n 676 | \t\t\t\tconst lmStudioModels = await getModels({\n 677 | \t\t\t\t\tprovider: \"lmstudio\",\n 678 | \t\t\t\t\tbaseUrl: lmStudioApiConfig.lmStudioBaseUrl,\n 679 | \t\t\t\t})\n 680 | \n 681 | \t\t\t\tif (Object.keys(lmStudioModels).length > 0) {\n 682 | \t\t\t\t\tprovider.postMessageToWebview({\n 683 | \t\t\t\t\t\ttype: \"lmStudioModels\",\n 684 | \t\t\t\t\t\tlmStudioModels: Object.keys(lmStudioModels),\n 685 | \t\t\t\t\t})\n 686 | \t\t\t\t}\n 687 | \t\t\t} catch (error) {\n 688 | \t\t\t\t// Silently fail - user hasn't configured LM Studio yet\n 689 | \t\t\t\tconsole.debug(\"LM Studio models fetch failed:\", error)\n 690 | \t\t\t}\n 691 | \t\t\tbreak\n 692 | \t\t}\n 693 | \t\tcase \"requestOpenAiModels\":\n 694 | \t\t\tif (message?.values?.baseUrl && message?.values?.apiKey) {\n 695 | \t\t\t\tconst openAiModels = await getOpenAiModels(\n 696 | \t\t\t\t\tmessage?.values?.baseUrl,\n 697 | \t\t\t\t\tmessage?.values?.apiKey,\n 698 | \t\t\t\t\tmessage?.values?.openAiHeaders,\n 699 | \t\t\t\t)\n 700 | \n 701 | \t\t\t\tprovider.postMessageToWebview({ type: \"openAiModels\", openAiModels })\n 702 | \t\t\t}\n 703 | \n 704 | \t\t\tbreak\n 705 | \t\tcase \"requestVsCodeLmModels\":\n 706 | \t\t\tconst vsCodeLmModels = await getVsCodeLmModels()\n 707 | \t\t\t// TODO: Cache like we do for OpenRouter, etc?\n 708 | \t\t\tprovider.postMessageToWebview({ type: \"vsCodeLmModels\", vsCodeLmModels })\n 709 | \t\t\tbreak\n 710 | \t\tcase \"requestHuggingFaceModels\":\n 711 | \t\t\ttry {\n 712 | \t\t\t\tconst { getHuggingFaceModelsWithMetadata } = await import(\"../../api/providers/fetchers/huggingface\")\n 713 | \t\t\t\tconst huggingFaceModelsResponse = await getHuggingFaceModelsWithMetadata()\n 714 | \t\t\t\tprovider.postMessageToWebview({\n 715 | \t\t\t\t\ttype: \"huggingFaceModels\",\n 716 | \t\t\t\t\thuggingFaceModels: huggingFaceModelsResponse.models,\n 717 | \t\t\t\t})\n 718 | \t\t\t} catch (error) {\n 719 | \t\t\t\tconsole.error(\"Failed to fetch Hugging Face models:\", error)\n 720 | \t\t\t\tprovider.postMessageToWebview({\n 721 | \t\t\t\t\ttype: \"huggingFaceModels\",\n 722 | \t\t\t\t\thuggingFaceModels: [],\n 723 | \t\t\t\t})\n 724 | \t\t\t}\n 725 | \t\t\tbreak\n 726 | \t\tcase \"openImage\":\n 727 | \t\t\topenImage(message.text!, { values: message.values })\n 728 | \t\t\tbreak\n 729 | \t\tcase \"saveImage\":\n 730 | \t\t\tsaveImage(message.dataUri!)\n 731 | \t\t\tbreak\n 732 | \t\tcase \"openFile\":\n 733 | \t\t\topenFile(message.text!, message.values as { create?: boolean; content?: string; line?: number })\n 734 | \t\t\tbreak\n 735 | \t\tcase \"openMention\":\n 736 | \t\t\topenMention(message.text)\n 737 | \t\t\tbreak\n 738 | \t\tcase \"openExternal\":\n 739 | \t\t\tif (message.url) {\n 740 | \t\t\t\tvscode.env.openExternal(vscode.Uri.parse(message.url))\n 741 | \t\t\t}\n 742 | \t\t\tbreak\n 743 | \t\tcase \"checkpointDiff\":\n 744 | \t\t\tconst result = checkoutDiffPayloadSchema.safeParse(message.payload)\n 745 | \n 746 | \t\t\tif (result.success) {\n 747 | \t\t\t\tawait provider.getCurrentCline()?.checkpointDiff(result.data)\n 748 | \t\t\t}\n 749 | \n 750 | \t\t\tbreak\n 751 | \t\tcase \"checkpointRestore\": {\n 752 | \t\t\tconst result = checkoutRestorePayloadSchema.safeParse(message.payload)\n 753 | \n 754 | \t\t\tif (result.success) {\n 755 | \t\t\t\tawait provider.cancelTask()\n 756 | \n 757 | \t\t\t\ttry {\n 758 | \t\t\t\t\tawait pWaitFor(() => provider.getCurrentCline()?.isInitialized === true, { timeout: 3_000 })\n 759 | \t\t\t\t} catch (error) {\n 760 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.checkpoint_timeout\"))\n 761 | \t\t\t\t}\n 762 | \n 763 | \t\t\t\ttry {\n 764 | \t\t\t\t\tawait provider.getCurrentCline()?.checkpointRestore(result.data)\n 765 | \t\t\t\t} catch (error) {\n 766 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.checkpoint_failed\"))\n 767 | \t\t\t\t}\n 768 | \t\t\t}\n 769 | \n 770 | \t\t\tbreak\n 771 | \t\t}\n 772 | \t\tcase \"cancelTask\":\n 773 | \t\t\tawait provider.cancelTask()\n 774 | \t\t\tbreak\n 775 | \t\tcase \"allowedCommands\": {\n 776 | \t\t\t// Validate and sanitize the commands array\n 777 | \t\t\tconst commands = message.commands ?? []\n 778 | \t\t\tconst validCommands = Array.isArray(commands)\n 779 | \t\t\t\t? commands.filter((cmd) => typeof cmd === \"string\" && cmd.trim().length > 0)\n 780 | \t\t\t\t: []\n 781 | \n 782 | \t\t\tawait updateGlobalState(\"allowedCommands\", validCommands)\n 783 | \n 784 | \t\t\t// Also update workspace settings.\n 785 | \t\t\tawait vscode.workspace\n 786 | \t\t\t\t.getConfiguration(Package.name)\n 787 | \t\t\t\t.update(\"allowedCommands\", validCommands, vscode.ConfigurationTarget.Global)\n 788 | \n 789 | \t\t\tbreak\n 790 | \t\t}\n 791 | \t\tcase \"deniedCommands\": {\n 792 | \t\t\t// Validate and sanitize the commands array\n 793 | \t\t\tconst commands = message.commands ?? []\n 794 | \t\t\tconst validCommands = Array.isArray(commands)\n 795 | \t\t\t\t? commands.filter((cmd) => typeof cmd === \"string\" && cmd.trim().length > 0)\n 796 | \t\t\t\t: []\n 797 | \n 798 | \t\t\tawait updateGlobalState(\"deniedCommands\", validCommands)\n 799 | \n 800 | \t\t\t// Also update workspace settings.\n 801 | \t\t\tawait vscode.workspace\n 802 | \t\t\t\t.getConfiguration(Package.name)\n 803 | \t\t\t\t.update(\"deniedCommands\", validCommands, vscode.ConfigurationTarget.Global)\n 804 | \n 805 | \t\t\tbreak\n 806 | \t\t}\n 807 | \t\tcase \"openCustomModesSettings\": {\n 808 | \t\t\tconst customModesFilePath = await provider.customModesManager.getCustomModesFilePath()\n 809 | \n 810 | \t\t\tif (customModesFilePath) {\n 811 | \t\t\t\topenFile(customModesFilePath)\n 812 | \t\t\t}\n 813 | \n 814 | \t\t\tbreak\n 815 | \t\t}\n 816 | \t\tcase \"openMcpSettings\": {\n 817 | \t\t\tconst mcpSettingsFilePath = await provider.getMcpHub()?.getMcpSettingsFilePath()\n 818 | \n 819 | \t\t\tif (mcpSettingsFilePath) {\n 820 | \t\t\t\topenFile(mcpSettingsFilePath)\n 821 | \t\t\t}\n 822 | \n 823 | \t\t\tbreak\n 824 | \t\t}\n 825 | \t\tcase \"openProjectMcpSettings\": {\n 826 | \t\t\tif (!vscode.workspace.workspaceFolders?.length) {\n 827 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.no_workspace\"))\n 828 | \t\t\t\treturn\n 829 | \t\t\t}\n 830 | \n 831 | \t\t\tconst workspaceFolder = vscode.workspace.workspaceFolders[0]\n 832 | \t\t\tconst rooDir = path.join(workspaceFolder.uri.fsPath, \".kilocode\")\n 833 | \t\t\tconst mcpPath = path.join(rooDir, \"mcp.json\")\n 834 | \n 835 | \t\t\ttry {\n 836 | \t\t\t\tawait fs.mkdir(rooDir, { recursive: true })\n 837 | \t\t\t\tconst exists = await fileExistsAtPath(mcpPath)\n 838 | \n 839 | \t\t\t\tif (!exists) {\n 840 | \t\t\t\t\tawait safeWriteJson(mcpPath, { mcpServers: {} })\n 841 | \t\t\t\t}\n 842 | \n 843 | \t\t\t\topenFile(mcpPath)\n 844 | \t\t\t} catch (error) {\n 845 | \t\t\t\tvscode.window.showErrorMessage(t(\"mcp:errors.create_json\", { error: `${error}` }))\n 846 | \t\t\t}\n 847 | \n 848 | \t\t\tbreak\n 849 | \t\t}\n 850 | \t\tcase \"deleteMcpServer\": {\n 851 | \t\t\tif (!message.serverName) {\n 852 | \t\t\t\tbreak\n 853 | \t\t\t}\n 854 | \n 855 | \t\t\ttry {\n 856 | \t\t\t\tprovider.log(`Attempting to delete MCP server: ${message.serverName}`)\n 857 | \t\t\t\tawait provider.getMcpHub()?.deleteServer(message.serverName, message.source as \"global\" | \"project\")\n 858 | \t\t\t\tprovider.log(`Successfully deleted MCP server: ${message.serverName}`)\n 859 | \n 860 | \t\t\t\t// Refresh the webview state\n 861 | \t\t\t\tawait provider.postStateToWebview()\n 862 | \t\t\t} catch (error) {\n 863 | \t\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\n 864 | \t\t\t\tprovider.log(`Failed to delete MCP server: ${errorMessage}`)\n 865 | \t\t\t\t// Error messages are already handled by McpHub.deleteServer\n 866 | \t\t\t}\n 867 | \t\t\tbreak\n 868 | \t\t}\n 869 | \t\tcase \"restartMcpServer\": {\n 870 | \t\t\ttry {\n 871 | \t\t\t\tawait provider.getMcpHub()?.restartConnection(message.text!, message.source as \"global\" | \"project\")\n 872 | \t\t\t} catch (error) {\n 873 | \t\t\t\tprovider.log(\n 874 | \t\t\t\t\t`Failed to retry connection for ${message.text}: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n 875 | \t\t\t\t)\n 876 | \t\t\t}\n 877 | \t\t\tbreak\n 878 | \t\t}\n 879 | \t\tcase \"toggleToolAlwaysAllow\": {\n 880 | \t\t\ttry {\n 881 | \t\t\t\tawait provider\n 882 | \t\t\t\t\t.getMcpHub()\n 883 | \t\t\t\t\t?.toggleToolAlwaysAllow(\n 884 | \t\t\t\t\t\tmessage.serverName!,\n 885 | \t\t\t\t\t\tmessage.source as \"global\" | \"project\",\n 886 | \t\t\t\t\t\tmessage.toolName!,\n 887 | \t\t\t\t\t\tBoolean(message.alwaysAllow),\n 888 | \t\t\t\t\t)\n 889 | \t\t\t} catch (error) {\n 890 | \t\t\t\tprovider.log(\n 891 | \t\t\t\t\t`Failed to toggle auto-approve for tool ${message.toolName}: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n 892 | \t\t\t\t)\n 893 | \t\t\t}\n 894 | \t\t\tbreak\n 895 | \t\t}\n 896 | \t\tcase \"toggleToolEnabledForPrompt\": {\n 897 | \t\t\ttry {\n 898 | \t\t\t\tawait provider\n 899 | \t\t\t\t\t.getMcpHub()\n 900 | \t\t\t\t\t?.toggleToolEnabledForPrompt(\n 901 | \t\t\t\t\t\tmessage.serverName!,\n 902 | \t\t\t\t\t\tmessage.source as \"global\" | \"project\",\n 903 | \t\t\t\t\t\tmessage.toolName!,\n 904 | \t\t\t\t\t\tBoolean(message.isEnabled),\n 905 | \t\t\t\t\t)\n 906 | \t\t\t} catch (error) {\n 907 | \t\t\t\tprovider.log(\n 908 | \t\t\t\t\t`Failed to toggle enabled for prompt for tool ${message.toolName}: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n 909 | \t\t\t\t)\n 910 | \t\t\t}\n 911 | \t\t\tbreak\n 912 | \t\t}\n 913 | \t\tcase \"toggleMcpServer\": {\n 914 | \t\t\ttry {\n 915 | \t\t\t\tawait provider\n 916 | \t\t\t\t\t.getMcpHub()\n 917 | \t\t\t\t\t?.toggleServerDisabled(\n 918 | \t\t\t\t\t\tmessage.serverName!,\n 919 | \t\t\t\t\t\tmessage.disabled!,\n 920 | \t\t\t\t\t\tmessage.source as \"global\" | \"project\",\n 921 | \t\t\t\t\t)\n 922 | \t\t\t} catch (error) {\n 923 | \t\t\t\tprovider.log(\n 924 | \t\t\t\t\t`Failed to toggle MCP server ${message.serverName}: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n 925 | \t\t\t\t)\n 926 | \t\t\t}\n 927 | \t\t\tbreak\n 928 | \t\t}\n 929 | \t\tcase \"mcpEnabled\":\n 930 | \t\t\tconst mcpEnabled = message.bool ?? true\n 931 | \t\t\tawait updateGlobalState(\"mcpEnabled\", mcpEnabled)\n 932 | \t\t\tawait provider.postStateToWebview()\n 933 | \t\t\tbreak\n 934 | \t\tcase \"enableMcpServerCreation\":\n 935 | \t\t\tawait updateGlobalState(\"enableMcpServerCreation\", message.bool ?? true)\n 936 | \t\t\tawait provider.postStateToWebview()\n 937 | \t\t\tbreak\n 938 | \t\t// kilocode_change begin\n 939 | \t\tcase \"openGlobalKeybindings\":\n 940 | \t\t\tvscode.commands.executeCommand(\"workbench.action.openGlobalKeybindings\", message.text ?? \"kilo-code.\")\n 941 | \t\t\tbreak\n 942 | \t\tcase \"showSystemNotification\":\n 943 | \t\t\tconst isSystemNotificationsEnabled = getGlobalState(\"systemNotificationsEnabled\") ?? true\n 944 | \t\t\tif (!isSystemNotificationsEnabled) {\n 945 | \t\t\t\tbreak\n 946 | \t\t\t}\n 947 | \t\t\tif (message.notificationOptions) {\n 948 | \t\t\t\tshowSystemNotification(message.notificationOptions)\n 949 | \t\t\t}\n 950 | \t\t\tbreak\n 951 | \t\tcase \"systemNotificationsEnabled\":\n 952 | \t\t\tconst systemNotificationsEnabled = message.bool ?? true\n 953 | \t\t\tawait updateGlobalState(\"systemNotificationsEnabled\", systemNotificationsEnabled)\n 954 | \t\t\tawait provider.postStateToWebview()\n 955 | \t\t\tbreak\n 956 | \t\tcase \"openInBrowser\":\n 957 | \t\t\tif (message.url) {\n 958 | \t\t\t\tvscode.env.openExternal(vscode.Uri.parse(message.url))\n 959 | \t\t\t}\n 960 | \t\t\tbreak\n 961 | \t\t// kilocode_change end\n 962 | \t\tcase \"refreshAllMcpServers\": {\n 963 | \t\t\tconst mcpHub = provider.getMcpHub()\n 964 | \t\t\tif (mcpHub) {\n 965 | \t\t\t\tawait mcpHub.refreshAllConnections()\n 966 | \t\t\t}\n 967 | \t\t\tbreak\n 968 | \t\t}\n 969 | \t\t// playSound handler removed - now handled directly in the webview\n 970 | \t\tcase \"soundEnabled\":\n 971 | \t\t\tconst soundEnabled = message.bool ?? true\n 972 | \t\t\tawait updateGlobalState(\"soundEnabled\", soundEnabled)\n 973 | \t\t\tawait provider.postStateToWebview()\n 974 | \t\t\tbreak\n 975 | \t\tcase \"soundVolume\":\n 976 | \t\t\tconst soundVolume = message.value ?? 0.5\n 977 | \t\t\tawait updateGlobalState(\"soundVolume\", soundVolume)\n 978 | \t\t\tawait provider.postStateToWebview()\n 979 | \t\t\tbreak\n 980 | \t\tcase \"ttsEnabled\":\n 981 | \t\t\tconst ttsEnabled = message.bool ?? true\n 982 | \t\t\tawait updateGlobalState(\"ttsEnabled\", ttsEnabled)\n 983 | \t\t\tsetTtsEnabled(ttsEnabled) // Add this line to update the tts utility\n 984 | \t\t\tawait provider.postStateToWebview()\n 985 | \t\t\tbreak\n 986 | \t\tcase \"ttsSpeed\":\n 987 | \t\t\tconst ttsSpeed = message.value ?? 1.0\n 988 | \t\t\tawait updateGlobalState(\"ttsSpeed\", ttsSpeed)\n 989 | \t\t\tsetTtsSpeed(ttsSpeed)\n 990 | \t\t\tawait provider.postStateToWebview()\n 991 | \t\t\tbreak\n 992 | \t\tcase \"playTts\":\n 993 | \t\t\tif (message.text) {\n 994 | \t\t\t\tplayTts(message.text, {\n 995 | \t\t\t\t\tonStart: () => provider.postMessageToWebview({ type: \"ttsStart\", text: message.text }),\n 996 | \t\t\t\t\tonStop: () => provider.postMessageToWebview({ type: \"ttsStop\", text: message.text }),\n 997 | \t\t\t\t})\n 998 | \t\t\t}\n 999 | \t\t\tbreak\n1000 | \t\tcase \"stopTts\":\n1001 | \t\t\tstopTts()\n1002 | \t\t\tbreak\n1003 | \t\tcase \"diffEnabled\":\n1004 | \t\t\tconst diffEnabled = message.bool ?? true\n1005 | \t\t\tawait updateGlobalState(\"diffEnabled\", diffEnabled)\n1006 | \t\t\tawait provider.postStateToWebview()\n1007 | \t\t\tbreak\n1008 | \t\tcase \"enableCheckpoints\":\n1009 | \t\t\tconst enableCheckpoints = message.bool ?? true\n1010 | \t\t\tawait updateGlobalState(\"enableCheckpoints\", enableCheckpoints)\n1011 | \t\t\tawait provider.postStateToWebview()\n1012 | \t\t\tbreak\n1013 | \t\tcase \"browserViewportSize\":\n1014 | \t\t\tconst browserViewportSize = message.text ?? \"900x600\"\n1015 | \t\t\tawait updateGlobalState(\"browserViewportSize\", browserViewportSize)\n1016 | \t\t\tawait provider.postStateToWebview()\n1017 | \t\t\tbreak\n1018 | \t\tcase \"remoteBrowserHost\":\n1019 | \t\t\tawait updateGlobalState(\"remoteBrowserHost\", message.text)\n1020 | \t\t\tawait provider.postStateToWebview()\n1021 | \t\t\tbreak\n1022 | \t\tcase \"remoteBrowserEnabled\":\n1023 | \t\t\t// Store the preference in global state\n1024 | \t\t\t// remoteBrowserEnabled now means \"enable remote browser connection\"\n1025 | \t\t\tawait updateGlobalState(\"remoteBrowserEnabled\", message.bool ?? false)\n1026 | \t\t\t// If disabling remote browser connection, clear the remoteBrowserHost\n1027 | \t\t\tif (!message.bool) {\n1028 | \t\t\t\tawait updateGlobalState(\"remoteBrowserHost\", undefined)\n1029 | \t\t\t}\n1030 | \t\t\tawait provider.postStateToWebview()\n1031 | \t\t\tbreak\n1032 | \t\tcase \"testBrowserConnection\":\n1033 | \t\t\t// If no text is provided, try auto-discovery\n1034 | \t\t\tif (!message.text) {\n1035 | \t\t\t\t// Use testBrowserConnection for auto-discovery\n1036 | \t\t\t\tconst chromeHostUrl = await discoverChromeHostUrl()\n1037 | \n1038 | \t\t\t\tif (chromeHostUrl) {\n1039 | \t\t\t\t\t// Send the result back to the webview\n1040 | \t\t\t\t\tawait provider.postMessageToWebview({\n1041 | \t\t\t\t\t\ttype: \"browserConnectionResult\",\n1042 | \t\t\t\t\t\tsuccess: !!chromeHostUrl,\n1043 | \t\t\t\t\t\ttext: `Auto-discovered and tested connection to Chrome: ${chromeHostUrl}`,\n1044 | \t\t\t\t\t\tvalues: { endpoint: chromeHostUrl },\n1045 | \t\t\t\t\t})\n1046 | \t\t\t\t} else {\n1047 | \t\t\t\t\tawait provider.postMessageToWebview({\n1048 | \t\t\t\t\t\ttype: \"browserConnectionResult\",\n1049 | \t\t\t\t\t\tsuccess: false,\n1050 | \t\t\t\t\t\ttext: \"No Chrome instances found on the network. Make sure Chrome is running with remote debugging enabled (--remote-debugging-port=9222).\",\n1051 | \t\t\t\t\t})\n1052 | \t\t\t\t}\n1053 | \t\t\t} else {\n1054 | \t\t\t\t// Test the provided URL\n1055 | \t\t\t\tconst customHostUrl = message.text\n1056 | \t\t\t\tconst hostIsValid = await tryChromeHostUrl(message.text)\n1057 | \n1058 | \t\t\t\t// Send the result back to the webview\n1059 | \t\t\t\tawait provider.postMessageToWebview({\n1060 | \t\t\t\t\ttype: \"browserConnectionResult\",\n1061 | \t\t\t\t\tsuccess: hostIsValid,\n1062 | \t\t\t\t\ttext: hostIsValid\n1063 | \t\t\t\t\t\t? `Successfully connected to Chrome: ${customHostUrl}`\n1064 | \t\t\t\t\t\t: \"Failed to connect to Chrome\",\n1065 | \t\t\t\t})\n1066 | \t\t\t}\n1067 | \t\t\tbreak\n1068 | \t\tcase \"fuzzyMatchThreshold\":\n1069 | \t\t\tawait updateGlobalState(\"fuzzyMatchThreshold\", message.value)\n1070 | \t\t\tawait provider.postStateToWebview()\n1071 | \t\t\tbreak\n1072 | \t\tcase \"updateVSCodeSetting\": {\n1073 | \t\t\tconst { setting, value } = message\n1074 | \n1075 | \t\t\tif (setting !== undefined && value !== undefined) {\n1076 | \t\t\t\tif (ALLOWED_VSCODE_SETTINGS.has(setting)) {\n1077 | \t\t\t\t\tawait vscode.workspace.getConfiguration().update(setting, value, true)\n1078 | \t\t\t\t} else {\n1079 | \t\t\t\t\tvscode.window.showErrorMessage(`Cannot update restricted VSCode setting: ${setting}`)\n1080 | \t\t\t\t}\n1081 | \t\t\t}\n1082 | \n1083 | \t\t\tbreak\n1084 | \t\t}\n1085 | \t\tcase \"getVSCodeSetting\":\n1086 | \t\t\tconst { setting } = message\n1087 | \n1088 | \t\t\tif (setting) {\n1089 | \t\t\t\ttry {\n1090 | \t\t\t\t\tawait provider.postMessageToWebview({\n1091 | \t\t\t\t\t\ttype: \"vsCodeSetting\",\n1092 | \t\t\t\t\t\tsetting,\n1093 | \t\t\t\t\t\tvalue: vscode.workspace.getConfiguration().get(setting),\n1094 | \t\t\t\t\t})\n1095 | \t\t\t\t} catch (error) {\n1096 | \t\t\t\t\tconsole.error(`Failed to get VSCode setting ${message.setting}:`, error)\n1097 | \n1098 | \t\t\t\t\tawait provider.postMessageToWebview({\n1099 | \t\t\t\t\t\ttype: \"vsCodeSetting\",\n1100 | \t\t\t\t\t\tsetting,\n1101 | \t\t\t\t\t\terror: `Failed to get setting: ${error.message}`,\n1102 | \t\t\t\t\t\tvalue: undefined,\n1103 | \t\t\t\t\t})\n1104 | \t\t\t\t}\n1105 | \t\t\t}\n1106 | \n1107 | \t\t\tbreak\n1108 | \t\tcase \"alwaysApproveResubmit\":\n1109 | \t\t\tawait updateGlobalState(\"alwaysApproveResubmit\", message.bool ?? false)\n1110 | \t\t\tawait provider.postStateToWebview()\n1111 | \t\t\tbreak\n1112 | \t\tcase \"requestDelaySeconds\":\n1113 | \t\t\tawait updateGlobalState(\"requestDelaySeconds\", message.value ?? 5)\n1114 | \t\t\tawait provider.postStateToWebview()\n1115 | \t\t\tbreak\n1116 | \t\tcase \"writeDelayMs\":\n1117 | \t\t\tawait updateGlobalState(\"writeDelayMs\", message.value)\n1118 | \t\t\tawait provider.postStateToWebview()\n1119 | \t\t\tbreak\n1120 | \t\tcase \"diagnosticsEnabled\":\n1121 | \t\t\tawait updateGlobalState(\"diagnosticsEnabled\", message.bool ?? true)\n1122 | \t\t\tawait provider.postStateToWebview()\n1123 | \t\t\tbreak\n1124 | \t\tcase \"terminalOutputLineLimit\":\n1125 | \t\t\t// Validate that the line limit is a positive number\n1126 | \t\t\tconst lineLimit = message.value\n1127 | \t\t\tif (typeof lineLimit === \"number\" && lineLimit > 0) {\n1128 | \t\t\t\tawait updateGlobalState(\"terminalOutputLineLimit\", lineLimit)\n1129 | \t\t\t\tawait provider.postStateToWebview()\n1130 | \t\t\t} else {\n1131 | \t\t\t\tvscode.window.showErrorMessage(\n1132 | \t\t\t\t\tt(\"common:errors.invalid_line_limit\") || \"Terminal output line limit must be a positive number\",\n1133 | \t\t\t\t)\n1134 | \t\t\t}\n1135 | \t\t\tbreak\n1136 | \t\tcase \"terminalOutputCharacterLimit\":\n1137 | \t\t\t// Validate that the character limit is a positive number\n1138 | \t\t\tconst charLimit = message.value\n1139 | \t\t\tif (typeof charLimit === \"number\" && charLimit > 0) {\n1140 | \t\t\t\tawait updateGlobalState(\"terminalOutputCharacterLimit\", charLimit)\n1141 | \t\t\t\tawait provider.postStateToWebview()\n1142 | \t\t\t} else {\n1143 | \t\t\t\tvscode.window.showErrorMessage(\n1144 | \t\t\t\t\tt(\"common:errors.invalid_character_limit\") ||\n1145 | \t\t\t\t\t\t\"Terminal output character limit must be a positive number\",\n1146 | \t\t\t\t)\n1147 | \t\t\t}\n1148 | \t\t\tbreak\n1149 | \t\tcase \"terminalShellIntegrationTimeout\":\n1150 | \t\t\tawait updateGlobalState(\"terminalShellIntegrationTimeout\", message.value)\n1151 | \t\t\tawait provider.postStateToWebview()\n1152 | \t\t\tif (message.value !== undefined) {\n1153 | \t\t\t\tTerminal.setShellIntegrationTimeout(message.value)\n1154 | \t\t\t}\n1155 | \t\t\tbreak\n1156 | \t\tcase \"terminalShellIntegrationDisabled\":\n1157 | \t\t\tawait updateGlobalState(\"terminalShellIntegrationDisabled\", message.bool)\n1158 | \t\t\tawait provider.postStateToWebview()\n1159 | \t\t\tif (message.bool !== undefined) {\n1160 | \t\t\t\tTerminal.setShellIntegrationDisabled(message.bool)\n1161 | \t\t\t}\n1162 | \t\t\tbreak\n1163 | \t\tcase \"terminalCommandDelay\":\n1164 | \t\t\tawait updateGlobalState(\"terminalCommandDelay\", message.value)\n1165 | \t\t\tawait provider.postStateToWebview()\n1166 | \t\t\tif (message.value !== undefined) {\n1167 | \t\t\t\tTerminal.setCommandDelay(message.value)\n1168 | \t\t\t}\n1169 | \t\t\tbreak\n1170 | \t\tcase \"terminalPowershellCounter\":\n1171 | \t\t\tawait updateGlobalState(\"terminalPowershellCounter\", message.bool)\n1172 | \t\t\tawait provider.postStateToWebview()\n1173 | \t\t\tif (message.bool !== undefined) {\n1174 | \t\t\t\tTerminal.setPowershellCounter(message.bool)\n1175 | \t\t\t}\n1176 | \t\t\tbreak\n1177 | \t\tcase \"terminalZshClearEolMark\":\n1178 | \t\t\tawait updateGlobalState(\"terminalZshClearEolMark\", message.bool)\n1179 | \t\t\tawait provider.postStateToWebview()\n1180 | \t\t\tif (message.bool !== undefined) {\n1181 | \t\t\t\tTerminal.setTerminalZshClearEolMark(message.bool)\n1182 | \t\t\t}\n1183 | \t\t\tbreak\n1184 | \t\tcase \"terminalZshOhMy\":\n1185 | \t\t\tawait updateGlobalState(\"terminalZshOhMy\", message.bool)\n1186 | \t\t\tawait provider.postStateToWebview()\n1187 | \t\t\tif (message.bool !== undefined) {\n1188 | \t\t\t\tTerminal.setTerminalZshOhMy(message.bool)\n1189 | \t\t\t}\n1190 | \t\t\tbreak\n1191 | \t\tcase \"terminalZshP10k\":\n1192 | \t\t\tawait updateGlobalState(\"terminalZshP10k\", message.bool)\n1193 | \t\t\tawait provider.postStateToWebview()\n1194 | \t\t\tif (message.bool !== undefined) {\n1195 | \t\t\t\tTerminal.setTerminalZshP10k(message.bool)\n1196 | \t\t\t}\n1197 | \t\t\tbreak\n1198 | \t\tcase \"terminalZdotdir\":\n1199 | \t\t\tawait updateGlobalState(\"terminalZdotdir\", message.bool)\n1200 | \t\t\tawait provider.postStateToWebview()\n1201 | \t\t\tif (message.bool !== undefined) {\n1202 | \t\t\t\tTerminal.setTerminalZdotdir(message.bool)\n1203 | \t\t\t}\n1204 | \t\t\tbreak\n1205 | \t\tcase \"terminalCompressProgressBar\":\n1206 | \t\t\tawait updateGlobalState(\"terminalCompressProgressBar\", message.bool)\n1207 | \t\t\tawait provider.postStateToWebview()\n1208 | \t\t\tif (message.bool !== undefined) {\n1209 | \t\t\t\tTerminal.setCompressProgressBar(message.bool)\n1210 | \t\t\t}\n1211 | \t\t\tbreak\n1212 | \t\tcase \"mode\":\n1213 | \t\t\tawait provider.handleModeSwitch(message.text as Mode)\n1214 | \t\t\tbreak\n1215 | \t\tcase \"updateSupportPrompt\":\n1216 | \t\t\ttry {\n1217 | \t\t\t\tif (!message?.values) {\n1218 | \t\t\t\t\treturn\n1219 | \t\t\t\t}\n1220 | \n1221 | \t\t\t\t// Replace all prompts with the new values from the cached state\n1222 | \t\t\t\tawait updateGlobalState(\"customSupportPrompts\", message.values)\n1223 | \t\t\t\tawait provider.postStateToWebview()\n1224 | \t\t\t} catch (error) {\n1225 | \t\t\t\tprovider.log(\n1226 | \t\t\t\t\t`Error update support prompt: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1227 | \t\t\t\t)\n1228 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.update_support_prompt\"))\n1229 | \t\t\t}\n1230 | \t\t\tbreak\n1231 | \t\tcase \"updatePrompt\":\n1232 | \t\t\tif (message.promptMode && message.customPrompt !== undefined) {\n1233 | \t\t\t\tconst existingPrompts = getGlobalState(\"customModePrompts\") ?? {}\n1234 | \t\t\t\tconst updatedPrompts = { ...existingPrompts, [message.promptMode]: message.customPrompt }\n1235 | \t\t\t\tawait updateGlobalState(\"customModePrompts\", updatedPrompts)\n1236 | \t\t\t\tconst currentState = await provider.getStateToPostToWebview()\n1237 | \t\t\t\tconst stateWithPrompts = {\n1238 | \t\t\t\t\t...currentState,\n1239 | \t\t\t\t\tcustomModePrompts: updatedPrompts,\n1240 | \t\t\t\t\thasOpenedModeSelector: currentState.hasOpenedModeSelector ?? false,\n1241 | \t\t\t\t}\n1242 | \t\t\t\tprovider.postMessageToWebview({ type: \"state\", state: stateWithPrompts })\n1243 | \n1244 | \t\t\t\tif (TelemetryService.hasInstance()) {\n1245 | \t\t\t\t\t// Determine which setting was changed by comparing objects\n1246 | \t\t\t\t\tconst oldPrompt = existingPrompts[message.promptMode] || {}\n1247 | \t\t\t\t\tconst newPrompt = message.customPrompt\n1248 | \t\t\t\t\tconst changedSettings = Object.keys(newPrompt).filter(\n1249 | \t\t\t\t\t\t(key) =>\n1250 | \t\t\t\t\t\t\tJSON.stringify((oldPrompt as Record<string, unknown>)[key]) !==\n1251 | \t\t\t\t\t\t\tJSON.stringify((newPrompt as Record<string, unknown>)[key]),\n1252 | \t\t\t\t\t)\n1253 | \n1254 | \t\t\t\t\tif (changedSettings.length > 0) {\n1255 | \t\t\t\t\t\tTelemetryService.instance.captureModeSettingChanged(changedSettings[0])\n1256 | \t\t\t\t\t}\n1257 | \t\t\t\t}\n1258 | \t\t\t}\n1259 | \t\t\tbreak\n1260 | \t\tcase \"deleteMessage\": {\n1261 | \t\t\tif (provider.getCurrentCline() && typeof message.value === \"number\" && message.value) {\n1262 | \t\t\t\tawait handleMessageModificationsOperation(message.value, \"delete\")\n1263 | \t\t\t}\n1264 | \t\t\tbreak\n1265 | \t\t}\n1266 | \t\tcase \"submitEditedMessage\": {\n1267 | \t\t\tif (\n1268 | \t\t\t\tprovider.getCurrentCline() &&\n1269 | \t\t\t\ttypeof message.value === \"number\" &&\n1270 | \t\t\t\tmessage.value &&\n1271 | \t\t\t\tmessage.editedMessageContent\n1272 | \t\t\t) {\n1273 | \t\t\t\tawait handleMessageModificationsOperation(\n1274 | \t\t\t\t\tmessage.value,\n1275 | \t\t\t\t\t\"edit\",\n1276 | \t\t\t\t\tmessage.editedMessageContent,\n1277 | \t\t\t\t\tmessage.images,\n1278 | \t\t\t\t)\n1279 | \t\t\t}\n1280 | \t\t\tbreak\n1281 | \t\t}\n1282 | \t\tcase \"screenshotQuality\":\n1283 | \t\t\tawait updateGlobalState(\"screenshotQuality\", message.value)\n1284 | \t\t\tawait provider.postStateToWebview()\n1285 | \t\t\tbreak\n1286 | \t\tcase \"maxOpenTabsContext\":\n1287 | \t\t\tconst tabCount = Math.min(Math.max(0, message.value ?? 20), 500)\n1288 | \t\t\tawait updateGlobalState(\"maxOpenTabsContext\", tabCount)\n1289 | \t\t\tawait provider.postStateToWebview()\n1290 | \t\t\tbreak\n1291 | \t\tcase \"maxWorkspaceFiles\":\n1292 | \t\t\tconst fileCount = Math.min(Math.max(0, message.value ?? 200), 500)\n1293 | \t\t\tawait updateGlobalState(\"maxWorkspaceFiles\", fileCount)\n1294 | \t\t\tawait provider.postStateToWebview()\n1295 | \t\t\tbreak\n1296 | \t\tcase \"alwaysAllowFollowupQuestions\":\n1297 | \t\t\tawait updateGlobalState(\"alwaysAllowFollowupQuestions\", message.bool ?? false)\n1298 | \t\t\tawait provider.postStateToWebview()\n1299 | \t\t\tbreak\n1300 | \t\tcase \"followupAutoApproveTimeoutMs\":\n1301 | \t\t\tawait updateGlobalState(\"followupAutoApproveTimeoutMs\", message.value)\n1302 | \t\t\tawait provider.postStateToWebview()\n1303 | \t\t\tbreak\n1304 | \t\tcase \"browserToolEnabled\":\n1305 | \t\t\tawait updateGlobalState(\"browserToolEnabled\", message.bool ?? true)\n1306 | \t\t\tawait provider.postStateToWebview()\n1307 | \t\t\tbreak\n1308 | \t\tcase \"language\":\n1309 | \t\t\tchangeLanguage(message.text ?? \"en\")\n1310 | \t\t\tawait updateGlobalState(\"language\", message.text as Language)\n1311 | \t\t\tawait provider.postStateToWebview()\n1312 | \t\t\tbreak\n1313 | \t\tcase \"showRooIgnoredFiles\":\n1314 | \t\t\tawait updateGlobalState(\"showRooIgnoredFiles\", message.bool ?? true)\n1315 | \t\t\tawait provider.postStateToWebview()\n1316 | \t\t\tbreak\n1317 | \t\tcase \"hasOpenedModeSelector\":\n1318 | \t\t\tawait updateGlobalState(\"hasOpenedModeSelector\", message.bool ?? true)\n1319 | \t\t\tawait provider.postStateToWebview()\n1320 | \t\t\tbreak\n1321 | \t\tcase \"maxReadFileLine\":\n1322 | \t\t\tawait updateGlobalState(\"maxReadFileLine\", message.value)\n1323 | \t\t\tawait provider.postStateToWebview()\n1324 | \t\t\tbreak\n1325 | \t\t// kilocode_change start\n1326 | \t\tcase \"showAutoApproveMenu\":\n1327 | \t\t\tawait updateGlobalState(\"showAutoApproveMenu\", message.bool ?? true)\n1328 | \t\t\tawait provider.postStateToWebview()\n1329 | \t\t\tbreak\n1330 | \t\tcase \"showTaskTimeline\":\n1331 | \t\t\tawait updateGlobalState(\"showTaskTimeline\", message.bool ?? false)\n1332 | \t\t\tawait provider.postStateToWebview()\n1333 | \t\t\tbreak\n1334 | \t\tcase \"allowVeryLargeReads\":\n1335 | \t\t\tawait updateGlobalState(\"allowVeryLargeReads\", message.bool ?? false)\n1336 | \t\t\tawait provider.postStateToWebview()\n1337 | \t\t\tbreak\n1338 | \t\t// kilocode_change end\n1339 | \t\tcase \"maxImageFileSize\":\n1340 | \t\t\tawait updateGlobalState(\"maxImageFileSize\", message.value)\n1341 | \t\t\tawait provider.postStateToWebview()\n1342 | \t\t\tbreak\n1343 | \t\tcase \"maxTotalImageSize\":\n1344 | \t\t\tawait updateGlobalState(\"maxTotalImageSize\", message.value)\n1345 | \t\t\tawait provider.postStateToWebview()\n1346 | \t\t\tbreak\n1347 | \t\tcase \"maxConcurrentFileReads\":\n1348 | \t\t\tconst valueToSave = message.value // Capture the value intended for saving\n1349 | \t\t\tawait updateGlobalState(\"maxConcurrentFileReads\", valueToSave)\n1350 | \t\t\tawait provider.postStateToWebview()\n1351 | \t\t\tbreak\n1352 | \t\tcase \"includeDiagnosticMessages\":\n1353 | \t\t\t// Only apply default if the value is truly undefined (not false)\n1354 | \t\t\tconst includeValue = message.bool !== undefined ? message.bool : true\n1355 | \t\t\tawait updateGlobalState(\"includeDiagnosticMessages\", includeValue)\n1356 | \t\t\tawait provider.postStateToWebview()\n1357 | \t\t\tbreak\n1358 | \t\tcase \"maxDiagnosticMessages\":\n1359 | \t\t\tawait updateGlobalState(\"maxDiagnosticMessages\", message.value ?? 50)\n1360 | \t\t\tawait provider.postStateToWebview()\n1361 | \t\t\tbreak\n1362 | \t\tcase \"setHistoryPreviewCollapsed\": // Add the new case handler\n1363 | \t\t\tawait updateGlobalState(\"historyPreviewCollapsed\", message.bool ?? false)\n1364 | \t\t\t// No need to call postStateToWebview here as the UI already updated optimistically\n1365 | \t\t\tbreak\n1366 | \t\tcase \"toggleApiConfigPin\":\n1367 | \t\t\tif (message.text) {\n1368 | \t\t\t\tconst currentPinned = getGlobalState(\"pinnedApiConfigs\") ?? {}\n1369 | \t\t\t\tconst updatedPinned: Record<string, boolean> = { ...currentPinned }\n1370 | \n1371 | \t\t\t\tif (currentPinned[message.text]) {\n1372 | \t\t\t\t\tdelete updatedPinned[message.text]\n1373 | \t\t\t\t} else {\n1374 | \t\t\t\t\tupdatedPinned[message.text] = true\n1375 | \t\t\t\t}\n1376 | \n1377 | \t\t\t\tawait updateGlobalState(\"pinnedApiConfigs\", updatedPinned)\n1378 | \t\t\t\tawait provider.postStateToWebview()\n1379 | \t\t\t}\n1380 | \t\t\tbreak\n1381 | \t\tcase \"enhancementApiConfigId\":\n1382 | \t\t\tawait updateGlobalState(\"enhancementApiConfigId\", message.text)\n1383 | \t\t\tawait provider.postStateToWebview()\n1384 | \t\t\tbreak\n1385 | \t\t// kilocode_change start - commitMessageApiConfigId\n1386 | \t\tcase \"commitMessageApiConfigId\":\n1387 | \t\t\tawait updateGlobalState(\"commitMessageApiConfigId\", message.text)\n1388 | \t\t\tawait provider.postStateToWebview()\n1389 | \t\t\tbreak\n1390 | \t\t// kilocode_change end - commitMessageApiConfigId\n1391 | \t\t// kilocode_change start - terminalCommandApiConfigId\n1392 | \t\tcase \"terminalCommandApiConfigId\":\n1393 | \t\t\tawait updateGlobalState(\"terminalCommandApiConfigId\", message.text)\n1394 | \t\t\tawait provider.postStateToWebview()\n1395 | \t\t\tbreak\n1396 | \t\t// kilocode_change end - terminalCommandApiConfigId\n1397 | \t\t// kilocode_change start - ghostServiceSettings\n1398 | \t\tcase \"ghostServiceSettings\":\n1399 | \t\t\tif (!message.values) {\n1400 | \t\t\t\treturn\n1401 | \t\t\t}\n1402 | \t\t\t// Validate ghostServiceSettings structure\n1403 | \t\t\tconst ghostServiceSettings = ghostServiceSettingsSchema.parse(message.values)\n1404 | \t\t\tawait updateGlobalState(\"ghostServiceSettings\", ghostServiceSettings)\n1405 | \t\t\tawait provider.postStateToWebview()\n1406 | \t\t\tvscode.commands.executeCommand(\"kilo-code.ghost.reload\")\n1407 | \t\t\tbreak\n1408 | \t\t// kilocode_change end\n1409 | \t\tcase \"includeTaskHistoryInEnhance\":\n1410 | \t\t\tawait updateGlobalState(\"includeTaskHistoryInEnhance\", message.bool ?? false)\n1411 | \t\t\tawait provider.postStateToWebview()\n1412 | \t\t\tbreak\n1413 | \t\tcase \"condensingApiConfigId\":\n1414 | \t\t\tawait updateGlobalState(\"condensingApiConfigId\", message.text)\n1415 | \t\t\tawait provider.postStateToWebview()\n1416 | \t\t\tbreak\n1417 | \t\tcase \"updateCondensingPrompt\":\n1418 | \t\t\t// Store the condensing prompt in customSupportPrompts[\"CONDENSE\"] instead of customCondensingPrompt\n1419 | \t\t\tconst currentSupportPrompts = getGlobalState(\"customSupportPrompts\") ?? {}\n1420 | \t\t\tconst updatedSupportPrompts = { ...currentSupportPrompts, CONDENSE: message.text }\n1421 | \t\t\tawait updateGlobalState(\"customSupportPrompts\", updatedSupportPrompts)\n1422 | \t\t\t// Also update the old field for backward compatibility during migration\n1423 | \t\t\tawait updateGlobalState(\"customCondensingPrompt\", message.text)\n1424 | \t\t\tawait provider.postStateToWebview()\n1425 | \t\t\tbreak\n1426 | \t\tcase \"profileThresholds\":\n1427 | \t\t\tawait updateGlobalState(\"profileThresholds\", message.values)\n1428 | \t\t\tawait provider.postStateToWebview()\n1429 | \t\t\tbreak\n1430 | \t\tcase \"autoApprovalEnabled\":\n1431 | \t\t\tawait updateGlobalState(\"autoApprovalEnabled\", message.bool ?? false)\n1432 | \t\t\tawait provider.postStateToWebview()\n1433 | \t\t\tbreak\n1434 | \t\tcase \"enhancePrompt\":\n1435 | \t\t\tif (message.text) {\n1436 | \t\t\t\ttry {\n1437 | \t\t\t\t\tconst state = await provider.getState()\n1438 | \t\t\t\t\tconst {\n1439 | \t\t\t\t\t\tapiConfiguration,\n1440 | \t\t\t\t\t\tcustomSupportPrompts,\n1441 | \t\t\t\t\t\tlistApiConfigMeta,\n1442 | \t\t\t\t\t\tenhancementApiConfigId,\n1443 | \t\t\t\t\t\tincludeTaskHistoryInEnhance,\n1444 | \t\t\t\t\t} = state\n1445 | \n1446 | \t\t\t\t\tconst currentCline = provider.getCurrentCline()\n1447 | \t\t\t\t\tconst result = await MessageEnhancer.enhanceMessage({\n1448 | \t\t\t\t\t\ttext: message.text,\n1449 | \t\t\t\t\t\tapiConfiguration,\n1450 | \t\t\t\t\t\tcustomSupportPrompts,\n1451 | \t\t\t\t\t\tlistApiConfigMeta,\n1452 | \t\t\t\t\t\tenhancementApiConfigId,\n1453 | \t\t\t\t\t\tincludeTaskHistoryInEnhance,\n1454 | \t\t\t\t\t\tcurrentClineMessages: currentCline?.clineMessages,\n1455 | \t\t\t\t\t\tproviderSettingsManager: provider.providerSettingsManager,\n1456 | \t\t\t\t\t})\n1457 | \n1458 | \t\t\t\t\tif (result.success && result.enhancedText) {\n1459 | \t\t\t\t\t\t// Capture telemetry for prompt enhancement\n1460 | \t\t\t\t\t\tMessageEnhancer.captureTelemetry(currentCline?.taskId, includeTaskHistoryInEnhance)\n1461 | \t\t\t\t\t\tawait provider.postMessageToWebview({ type: \"enhancedPrompt\", text: result.enhancedText })\n1462 | \t\t\t\t\t} else {\n1463 | \t\t\t\t\t\tthrow new Error(result.error || \"Unknown error\")\n1464 | \t\t\t\t\t}\n1465 | \t\t\t\t} catch (error) {\n1466 | \t\t\t\t\tprovider.log(\n1467 | \t\t\t\t\t\t`Error enhancing prompt: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1468 | \t\t\t\t\t)\n1469 | \n1470 | \t\t\t\t\tTelemetryService.instance.captureException(error, { context: \"enhance_prompt\" }) // kilocode_change\n1471 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.enhance_prompt\"))\n1472 | \t\t\t\t\tawait provider.postMessageToWebview({ type: \"enhancedPrompt\" })\n1473 | \t\t\t\t}\n1474 | \t\t\t}\n1475 | \t\t\tbreak\n1476 | \t\tcase \"getSystemPrompt\":\n1477 | \t\t\ttry {\n1478 | \t\t\t\tconst systemPrompt = await generateSystemPrompt(provider, message)\n1479 | \n1480 | \t\t\t\tawait provider.postMessageToWebview({\n1481 | \t\t\t\t\ttype: \"systemPrompt\",\n1482 | \t\t\t\t\ttext: systemPrompt,\n1483 | \t\t\t\t\tmode: message.mode,\n1484 | \t\t\t\t})\n1485 | \t\t\t} catch (error) {\n1486 | \t\t\t\tprovider.log(\n1487 | \t\t\t\t\t`Error getting system prompt:  ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1488 | \t\t\t\t)\n1489 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.get_system_prompt\"))\n1490 | \t\t\t}\n1491 | \t\t\tbreak\n1492 | \t\tcase \"copySystemPrompt\":\n1493 | \t\t\ttry {\n1494 | \t\t\t\tconst systemPrompt = await generateSystemPrompt(provider, message)\n1495 | \n1496 | \t\t\t\tawait vscode.env.clipboard.writeText(systemPrompt)\n1497 | \t\t\t\tawait vscode.window.showInformationMessage(t(\"common:info.clipboard_copy\"))\n1498 | \t\t\t} catch (error) {\n1499 | \t\t\t\tprovider.log(\n1500 | \t\t\t\t\t`Error getting system prompt:  ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1501 | \t\t\t\t)\n1502 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.get_system_prompt\"))\n1503 | \t\t\t}\n1504 | \t\t\tbreak\n1505 | \t\tcase \"searchCommits\": {\n1506 | \t\t\tconst cwd = provider.cwd\n1507 | \t\t\tif (cwd) {\n1508 | \t\t\t\ttry {\n1509 | \t\t\t\t\tconst commits = await searchCommits(message.query || \"\", cwd)\n1510 | \t\t\t\t\tawait provider.postMessageToWebview({\n1511 | \t\t\t\t\t\ttype: \"commitSearchResults\",\n1512 | \t\t\t\t\t\tcommits,\n1513 | \t\t\t\t\t})\n1514 | \t\t\t\t} catch (error) {\n1515 | \t\t\t\t\tprovider.log(\n1516 | \t\t\t\t\t\t`Error searching commits: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1517 | \t\t\t\t\t)\n1518 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.search_commits\"))\n1519 | \t\t\t\t}\n1520 | \t\t\t}\n1521 | \t\t\tbreak\n1522 | \t\t}\n1523 | \t\t// kilocode_change start\n1524 | \t\tcase \"showFeedbackOptions\": {\n1525 | \t\t\tconst githubIssuesText = t(\"common:feedback.githubIssues\")\n1526 | \t\t\tconst discordText = t(\"common:feedback.discord\")\n1527 | \t\t\tconst customerSupport = t(\"common:feedback.customerSupport\")\n1528 | \n1529 | \t\t\tconst answer = await vscode.window.showInformationMessage(\n1530 | \t\t\t\tt(\"common:feedback.description\"),\n1531 | \t\t\t\t{ modal: true },\n1532 | \t\t\t\tgithubIssuesText,\n1533 | \t\t\t\tdiscordText,\n1534 | \t\t\t\tcustomerSupport,\n1535 | \t\t\t)\n1536 | \n1537 | \t\t\tif (answer === githubIssuesText) {\n1538 | \t\t\t\tawait vscode.env.openExternal(vscode.Uri.parse(\"https://github.com/Kilo-Org/kilocode/issues\"))\n1539 | \t\t\t} else if (answer === discordText) {\n1540 | \t\t\t\tawait vscode.env.openExternal(vscode.Uri.parse(\"https://discord.gg/fxrhCFGhkP\"))\n1541 | \t\t\t} else if (answer === customerSupport) {\n1542 | \t\t\t\tawait vscode.env.openExternal(vscode.Uri.parse(\"https://kilocode.ai/support\"))\n1543 | \t\t\t}\n1544 | \t\t\tbreak\n1545 | \t\t}\n1546 | \t\t// kilocode_change end\n1547 | \t\tcase \"searchFiles\": {\n1548 | \t\t\tconst workspacePath = getWorkspacePath()\n1549 | \n1550 | \t\t\tif (!workspacePath) {\n1551 | \t\t\t\t// Handle case where workspace path is not available\n1552 | \t\t\t\tawait provider.postMessageToWebview({\n1553 | \t\t\t\t\ttype: \"fileSearchResults\",\n1554 | \t\t\t\t\tresults: [],\n1555 | \t\t\t\t\trequestId: message.requestId,\n1556 | \t\t\t\t\terror: \"No workspace path available\",\n1557 | \t\t\t\t})\n1558 | \t\t\t\tbreak\n1559 | \t\t\t}\n1560 | \t\t\ttry {\n1561 | \t\t\t\t// Call file search service with query from message\n1562 | \t\t\t\tconst results = await searchWorkspaceFiles(\n1563 | \t\t\t\t\tmessage.query || \"\",\n1564 | \t\t\t\t\tworkspacePath,\n1565 | \t\t\t\t\t20, // Use default limit, as filtering is now done in the backend\n1566 | \t\t\t\t)\n1567 | \n1568 | \t\t\t\t// Send results back to webview\n1569 | \t\t\t\tawait provider.postMessageToWebview({\n1570 | \t\t\t\t\ttype: \"fileSearchResults\",\n1571 | \t\t\t\t\tresults,\n1572 | \t\t\t\t\trequestId: message.requestId,\n1573 | \t\t\t\t})\n1574 | \t\t\t} catch (error) {\n1575 | \t\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\n1576 | \n1577 | \t\t\t\t// Send error response to webview\n1578 | \t\t\t\tawait provider.postMessageToWebview({\n1579 | \t\t\t\t\ttype: \"fileSearchResults\",\n1580 | \t\t\t\t\tresults: [],\n1581 | \t\t\t\t\terror: errorMessage,\n1582 | \t\t\t\t\trequestId: message.requestId,\n1583 | \t\t\t\t})\n1584 | \t\t\t}\n1585 | \t\t\tbreak\n1586 | \t\t}\n1587 | \t\tcase \"updateTodoList\": {\n1588 | \t\t\tconst payload = message.payload as { todos?: any[] }\n1589 | \t\t\tconst todos = payload?.todos\n1590 | \t\t\tif (Array.isArray(todos)) {\n1591 | \t\t\t\tawait setPendingTodoList(todos)\n1592 | \t\t\t}\n1593 | \t\t\tbreak\n1594 | \t\t}\n1595 | \t\tcase \"saveApiConfiguration\":\n1596 | \t\t\tif (message.text && message.apiConfiguration) {\n1597 | \t\t\t\ttry {\n1598 | \t\t\t\t\tawait provider.providerSettingsManager.saveConfig(message.text, message.apiConfiguration)\n1599 | \t\t\t\t\tconst listApiConfig = await provider.providerSettingsManager.listConfig()\n1600 | \t\t\t\t\tawait updateGlobalState(\"listApiConfigMeta\", listApiConfig)\n1601 | \t\t\t\t} catch (error) {\n1602 | \t\t\t\t\tprovider.log(\n1603 | \t\t\t\t\t\t`Error save api configuration: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1604 | \t\t\t\t\t)\n1605 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.save_api_config\"))\n1606 | \t\t\t\t}\n1607 | \t\t\t}\n1608 | \t\t\tbreak\n1609 | \t\tcase \"upsertApiConfiguration\":\n1610 | \t\t\tif (message.text && message.apiConfiguration) {\n1611 | \t\t\t\tawait provider.upsertProviderProfile(message.text, message.apiConfiguration)\n1612 | \t\t\t}\n1613 | \t\t\tbreak\n1614 | \t\tcase \"renameApiConfiguration\":\n1615 | \t\t\tif (message.values && message.apiConfiguration) {\n1616 | \t\t\t\ttry {\n1617 | \t\t\t\t\tconst { oldName, newName } = message.values\n1618 | \n1619 | \t\t\t\t\tif (oldName === newName) {\n1620 | \t\t\t\t\t\tbreak\n1621 | \t\t\t\t\t}\n1622 | \n1623 | \t\t\t\t\t// Load the old configuration to get its ID.\n1624 | \t\t\t\t\tconst { id } = await provider.providerSettingsManager.getProfile({ name: oldName })\n1625 | \n1626 | \t\t\t\t\t// Create a new configuration with the new name and old ID.\n1627 | \t\t\t\t\tawait provider.providerSettingsManager.saveConfig(newName, { ...message.apiConfiguration, id })\n1628 | \n1629 | \t\t\t\t\t// Delete the old configuration.\n1630 | \t\t\t\t\tawait provider.providerSettingsManager.deleteConfig(oldName)\n1631 | \n1632 | \t\t\t\t\t// Re-activate to update the global settings related to the\n1633 | \t\t\t\t\t// currently activated provider profile.\n1634 | \t\t\t\t\tawait provider.activateProviderProfile({ name: newName })\n1635 | \t\t\t\t} catch (error) {\n1636 | \t\t\t\t\tprovider.log(\n1637 | \t\t\t\t\t\t`Error rename api configuration: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1638 | \t\t\t\t\t)\n1639 | \n1640 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.rename_api_config\"))\n1641 | \t\t\t\t}\n1642 | \t\t\t}\n1643 | \t\t\tbreak\n1644 | \t\tcase \"loadApiConfiguration\":\n1645 | \t\t\tif (message.text) {\n1646 | \t\t\t\ttry {\n1647 | \t\t\t\t\tawait provider.activateProviderProfile({ name: message.text })\n1648 | \t\t\t\t} catch (error) {\n1649 | \t\t\t\t\tprovider.log(\n1650 | \t\t\t\t\t\t`Error load api configuration: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1651 | \t\t\t\t\t)\n1652 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.load_api_config\"))\n1653 | \t\t\t\t}\n1654 | \t\t\t}\n1655 | \t\t\tbreak\n1656 | \t\tcase \"loadApiConfigurationById\":\n1657 | \t\t\tif (message.text) {\n1658 | \t\t\t\ttry {\n1659 | \t\t\t\t\tawait provider.activateProviderProfile({ id: message.text })\n1660 | \t\t\t\t} catch (error) {\n1661 | \t\t\t\t\tprovider.log(\n1662 | \t\t\t\t\t\t`Error load api configuration by ID: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1663 | \t\t\t\t\t)\n1664 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.load_api_config\"))\n1665 | \t\t\t\t}\n1666 | \t\t\t}\n1667 | \t\t\tbreak\n1668 | \t\tcase \"deleteApiConfiguration\":\n1669 | \t\t\tif (message.text) {\n1670 | \t\t\t\tconst answer = await vscode.window.showInformationMessage(\n1671 | \t\t\t\t\tt(\"common:confirmation.delete_config_profile\"),\n1672 | \t\t\t\t\t{ modal: true },\n1673 | \t\t\t\t\tt(\"common:answers.yes\"),\n1674 | \t\t\t\t)\n1675 | \n1676 | \t\t\t\tif (answer !== t(\"common:answers.yes\")) {\n1677 | \t\t\t\t\tbreak\n1678 | \t\t\t\t}\n1679 | \n1680 | \t\t\t\tconst oldName = message.text\n1681 | \n1682 | \t\t\t\tconst newName = (await provider.providerSettingsManager.listConfig()).filter(\n1683 | \t\t\t\t\t(c) => c.name !== oldName,\n1684 | \t\t\t\t)[0]?.name\n1685 | \n1686 | \t\t\t\tif (!newName) {\n1687 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.delete_api_config\"))\n1688 | \t\t\t\t\treturn\n1689 | \t\t\t\t}\n1690 | \n1691 | \t\t\t\ttry {\n1692 | \t\t\t\t\tawait provider.providerSettingsManager.deleteConfig(oldName)\n1693 | \t\t\t\t\tawait provider.activateProviderProfile({ name: newName })\n1694 | \t\t\t\t} catch (error) {\n1695 | \t\t\t\t\tprovider.log(\n1696 | \t\t\t\t\t\t`Error delete api configuration: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1697 | \t\t\t\t\t)\n1698 | \n1699 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.delete_api_config\"))\n1700 | \t\t\t\t}\n1701 | \t\t\t}\n1702 | \t\t\tbreak\n1703 | \t\tcase \"deleteMessageConfirm\":\n1704 | \t\t\tif (message.messageTs) {\n1705 | \t\t\t\tawait handleDeleteMessageConfirm(message.messageTs)\n1706 | \t\t\t}\n1707 | \t\t\tbreak\n1708 | \t\tcase \"editMessageConfirm\":\n1709 | \t\t\tif (message.messageTs && message.text) {\n1710 | \t\t\t\tawait handleEditMessageConfirm(message.messageTs, message.text, message.images)\n1711 | \t\t\t}\n1712 | \t\t\tbreak\n1713 | \t\tcase \"getListApiConfiguration\":\n1714 | \t\t\ttry {\n1715 | \t\t\t\tconst listApiConfig = await provider.providerSettingsManager.listConfig()\n1716 | \t\t\t\tawait updateGlobalState(\"listApiConfigMeta\", listApiConfig)\n1717 | \t\t\t\tprovider.postMessageToWebview({ type: \"listApiConfig\", listApiConfig })\n1718 | \t\t\t} catch (error) {\n1719 | \t\t\t\tprovider.log(\n1720 | \t\t\t\t\t`Error get list api configuration: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1721 | \t\t\t\t)\n1722 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.list_api_config\"))\n1723 | \t\t\t}\n1724 | \t\t\tbreak\n1725 | \t\tcase \"updateExperimental\": {\n1726 | \t\t\tif (!message.values) {\n1727 | \t\t\t\tbreak\n1728 | \t\t\t}\n1729 | \n1730 | \t\t\tconst updatedExperiments = {\n1731 | \t\t\t\t...(getGlobalState(\"experiments\") ?? experimentDefault),\n1732 | \t\t\t\t...message.values,\n1733 | \t\t\t}\n1734 | \n1735 | \t\t\tawait updateGlobalState(\"experiments\", updatedExperiments)\n1736 | \n1737 | \t\t\tawait provider.postStateToWebview()\n1738 | \t\t\tbreak\n1739 | \t\t}\n1740 | \t\tcase \"updateMcpTimeout\":\n1741 | \t\t\tif (message.serverName && typeof message.timeout === \"number\") {\n1742 | \t\t\t\ttry {\n1743 | \t\t\t\t\tawait provider\n1744 | \t\t\t\t\t\t.getMcpHub()\n1745 | \t\t\t\t\t\t?.updateServerTimeout(\n1746 | \t\t\t\t\t\t\tmessage.serverName,\n1747 | \t\t\t\t\t\t\tmessage.timeout,\n1748 | \t\t\t\t\t\t\tmessage.source as \"global\" | \"project\",\n1749 | \t\t\t\t\t\t)\n1750 | \t\t\t\t} catch (error) {\n1751 | \t\t\t\t\tprovider.log(\n1752 | \t\t\t\t\t\t`Failed to update timeout for ${message.serverName}: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n1753 | \t\t\t\t\t)\n1754 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.update_server_timeout\"))\n1755 | \t\t\t\t}\n1756 | \t\t\t}\n1757 | \t\t\tbreak\n1758 | \t\tcase \"updateCustomMode\":\n1759 | \t\t\tif (message.modeConfig) {\n1760 | \t\t\t\t// Check if this is a new mode or an update to an existing mode\n1761 | \t\t\t\tconst existingModes = await provider.customModesManager.getCustomModes()\n1762 | \t\t\t\tconst isNewMode = !existingModes.some((mode) => mode.slug === message.modeConfig?.slug)\n1763 | \n1764 | \t\t\t\tawait provider.customModesManager.updateCustomMode(message.modeConfig.slug, message.modeConfig)\n1765 | \t\t\t\t// Update state after saving the mode\n1766 | \t\t\t\tconst customModes = await provider.customModesManager.getCustomModes()\n1767 | \t\t\t\tawait updateGlobalState(\"customModes\", customModes)\n1768 | \t\t\t\tawait updateGlobalState(\"mode\", message.modeConfig.slug)\n1769 | \t\t\t\tawait provider.postStateToWebview()\n1770 | \n1771 | \t\t\t\t// Track telemetry for custom mode creation or update\n1772 | \t\t\t\tif (TelemetryService.hasInstance()) {\n1773 | \t\t\t\t\tif (isNewMode) {\n1774 | \t\t\t\t\t\t// This is a new custom mode\n1775 | \t\t\t\t\t\tTelemetryService.instance.captureCustomModeCreated(\n1776 | \t\t\t\t\t\t\tmessage.modeConfig.slug,\n1777 | \t\t\t\t\t\t\tmessage.modeConfig.name,\n1778 | \t\t\t\t\t\t)\n1779 | \t\t\t\t\t} else {\n1780 | \t\t\t\t\t\t// Determine which setting was changed by comparing objects\n1781 | \t\t\t\t\t\tconst existingMode = existingModes.find((mode) => mode.slug === message.modeConfig?.slug)\n1782 | \t\t\t\t\t\tconst changedSettings = existingMode\n1783 | \t\t\t\t\t\t\t? Object.keys(message.modeConfig).filter(\n1784 | \t\t\t\t\t\t\t\t\t(key) =>\n1785 | \t\t\t\t\t\t\t\t\t\tJSON.stringify((existingMode as Record<string, unknown>)[key]) !==\n1786 | \t\t\t\t\t\t\t\t\t\tJSON.stringify((message.modeConfig as Record<string, unknown>)[key]),\n1787 | \t\t\t\t\t\t\t\t)\n1788 | \t\t\t\t\t\t\t: []\n1789 | \n1790 | \t\t\t\t\t\tif (changedSettings.length > 0) {\n1791 | \t\t\t\t\t\t\tTelemetryService.instance.captureModeSettingChanged(changedSettings[0])\n1792 | \t\t\t\t\t\t}\n1793 | \t\t\t\t\t}\n1794 | \t\t\t\t}\n1795 | \t\t\t}\n1796 | \t\t\tbreak\n1797 | \t\tcase \"deleteCustomMode\":\n1798 | \t\t\tif (message.slug) {\n1799 | \t\t\t\t// Get the mode details to determine source and rules folder path\n1800 | \t\t\t\tconst customModes = await provider.customModesManager.getCustomModes()\n1801 | \t\t\t\tconst modeToDelete = customModes.find((mode) => mode.slug === message.slug)\n1802 | \n1803 | \t\t\t\tif (!modeToDelete) {\n1804 | \t\t\t\t\tbreak\n1805 | \t\t\t\t}\n1806 | \n1807 | \t\t\t\t// Determine the scope based on source (project or global)\n1808 | \t\t\t\tconst scope = modeToDelete.source || \"global\"\n1809 | \n1810 | \t\t\t\t// Determine the rules folder path\n1811 | \t\t\t\tlet rulesFolderPath: string\n1812 | \t\t\t\tif (scope === \"project\") {\n1813 | \t\t\t\t\tconst workspacePath = getWorkspacePath()\n1814 | \t\t\t\t\tif (workspacePath) {\n1815 | \t\t\t\t\t\trulesFolderPath = path.join(workspacePath, \".roo\", `rules-${message.slug}`)\n1816 | \t\t\t\t\t} else {\n1817 | \t\t\t\t\t\trulesFolderPath = path.join(\".roo\", `rules-${message.slug}`)\n1818 | \t\t\t\t\t}\n1819 | \t\t\t\t} else {\n1820 | \t\t\t\t\t// Global scope - use OS home directory\n1821 | \t\t\t\t\tconst homeDir = os.homedir()\n1822 | \t\t\t\t\trulesFolderPath = path.join(homeDir, \".roo\", `rules-${message.slug}`)\n1823 | \t\t\t\t}\n1824 | \n1825 | \t\t\t\t// Check if the rules folder exists\n1826 | \t\t\t\tconst rulesFolderExists = await fileExistsAtPath(rulesFolderPath)\n1827 | \n1828 | \t\t\t\t// If this is a check request, send back the folder info\n1829 | \t\t\t\tif (message.checkOnly) {\n1830 | \t\t\t\t\tawait provider.postMessageToWebview({\n1831 | \t\t\t\t\t\ttype: \"deleteCustomModeCheck\",\n1832 | \t\t\t\t\t\tslug: message.slug,\n1833 | \t\t\t\t\t\trulesFolderPath: rulesFolderExists ? rulesFolderPath : undefined,\n1834 | \t\t\t\t\t})\n1835 | \t\t\t\t\tbreak\n1836 | \t\t\t\t}\n1837 | \n1838 | \t\t\t\t// Delete the mode\n1839 | \t\t\t\tawait provider.customModesManager.deleteCustomMode(message.slug)\n1840 | \n1841 | \t\t\t\t// Delete the rules folder if it exists\n1842 | \t\t\t\tif (rulesFolderExists) {\n1843 | \t\t\t\t\ttry {\n1844 | \t\t\t\t\t\tawait fs.rm(rulesFolderPath, { recursive: true, force: true })\n1845 | \t\t\t\t\t\tprovider.log(`Deleted rules folder for mode ${message.slug}: ${rulesFolderPath}`)\n1846 | \t\t\t\t\t} catch (error) {\n1847 | \t\t\t\t\t\tprovider.log(`Failed to delete rules folder for mode ${message.slug}: ${error}`)\n1848 | \t\t\t\t\t\t// Notify the user about the failure\n1849 | \t\t\t\t\t\tvscode.window.showErrorMessage(\n1850 | \t\t\t\t\t\t\tt(\"common:errors.delete_rules_folder_failed\", {\n1851 | \t\t\t\t\t\t\t\trulesFolderPath,\n1852 | \t\t\t\t\t\t\t\terror: error instanceof Error ? error.message : String(error),\n1853 | \t\t\t\t\t\t\t}),\n1854 | \t\t\t\t\t\t)\n1855 | \t\t\t\t\t\t// Continue with mode deletion even if folder deletion fails\n1856 | \t\t\t\t\t}\n1857 | \t\t\t\t}\n1858 | \n1859 | \t\t\t\t// Switch back to default mode after deletion\n1860 | \t\t\t\tawait updateGlobalState(\"mode\", defaultModeSlug)\n1861 | \t\t\t\tawait provider.postStateToWebview()\n1862 | \t\t\t}\n1863 | \t\t\tbreak\n1864 | \t\tcase \"exportMode\":\n1865 | \t\t\tif (message.slug) {\n1866 | \t\t\t\ttry {\n1867 | \t\t\t\t\t// Get custom mode prompts to check if built-in mode has been customized\n1868 | \t\t\t\t\tconst customModePrompts = getGlobalState(\"customModePrompts\") || {}\n1869 | \t\t\t\t\tconst customPrompt = customModePrompts[message.slug]\n1870 | \n1871 | \t\t\t\t\t// Export the mode with any customizations merged directly\n1872 | \t\t\t\t\tconst result = await provider.customModesManager.exportModeWithRules(message.slug, customPrompt)\n1873 | \n1874 | \t\t\t\t\tif (result.success && result.yaml) {\n1875 | \t\t\t\t\t\t// Get last used directory for export\n1876 | \t\t\t\t\t\tconst lastExportPath = getGlobalState(\"lastModeExportPath\")\n1877 | \t\t\t\t\t\tlet defaultUri: vscode.Uri\n1878 | \n1879 | \t\t\t\t\t\tif (lastExportPath) {\n1880 | \t\t\t\t\t\t\t// Use the directory from the last export\n1881 | \t\t\t\t\t\t\tconst lastDir = path.dirname(lastExportPath)\n1882 | \t\t\t\t\t\t\tdefaultUri = vscode.Uri.file(path.join(lastDir, `${message.slug}-export.yaml`))\n1883 | \t\t\t\t\t\t} else {\n1884 | \t\t\t\t\t\t\t// Default to workspace or home directory\n1885 | \t\t\t\t\t\t\tconst workspaceFolders = vscode.workspace.workspaceFolders\n1886 | \t\t\t\t\t\t\tif (workspaceFolders && workspaceFolders.length > 0) {\n1887 | \t\t\t\t\t\t\t\tdefaultUri = vscode.Uri.file(\n1888 | \t\t\t\t\t\t\t\t\tpath.join(workspaceFolders[0].uri.fsPath, `${message.slug}-export.yaml`),\n1889 | \t\t\t\t\t\t\t\t)\n1890 | \t\t\t\t\t\t\t} else {\n1891 | \t\t\t\t\t\t\t\tdefaultUri = vscode.Uri.file(`${message.slug}-export.yaml`)\n1892 | \t\t\t\t\t\t\t}\n1893 | \t\t\t\t\t\t}\n1894 | \n1895 | \t\t\t\t\t\t// Show save dialog\n1896 | \t\t\t\t\t\tconst saveUri = await vscode.window.showSaveDialog({\n1897 | \t\t\t\t\t\t\tdefaultUri,\n1898 | \t\t\t\t\t\t\tfilters: {\n1899 | \t\t\t\t\t\t\t\t\"YAML files\": [\"yaml\", \"yml\"],\n1900 | \t\t\t\t\t\t\t},\n1901 | \t\t\t\t\t\t\ttitle: \"Save mode export\",\n1902 | \t\t\t\t\t\t})\n1903 | \n1904 | \t\t\t\t\t\tif (saveUri && result.yaml) {\n1905 | \t\t\t\t\t\t\t// Save the directory for next time\n1906 | \t\t\t\t\t\t\tawait updateGlobalState(\"lastModeExportPath\", saveUri.fsPath)\n1907 | \n1908 | \t\t\t\t\t\t\t// Write the file to the selected location\n1909 | \t\t\t\t\t\t\tawait fs.writeFile(saveUri.fsPath, result.yaml, \"utf-8\")\n1910 | \n1911 | \t\t\t\t\t\t\t// Send success message to webview\n1912 | \t\t\t\t\t\t\tprovider.postMessageToWebview({\n1913 | \t\t\t\t\t\t\t\ttype: \"exportModeResult\",\n1914 | \t\t\t\t\t\t\t\tsuccess: true,\n1915 | \t\t\t\t\t\t\t\tslug: message.slug,\n1916 | \t\t\t\t\t\t\t})\n1917 | \n1918 | \t\t\t\t\t\t\t// Show info message\n1919 | \t\t\t\t\t\t\tvscode.window.showInformationMessage(t(\"common:info.mode_exported\", { mode: message.slug }))\n1920 | \t\t\t\t\t\t} else {\n1921 | \t\t\t\t\t\t\t// User cancelled the save dialog\n1922 | \t\t\t\t\t\t\tprovider.postMessageToWebview({\n1923 | \t\t\t\t\t\t\t\ttype: \"exportModeResult\",\n1924 | \t\t\t\t\t\t\t\tsuccess: false,\n1925 | \t\t\t\t\t\t\t\terror: \"Export cancelled\",\n1926 | \t\t\t\t\t\t\t\tslug: message.slug,\n1927 | \t\t\t\t\t\t\t})\n1928 | \t\t\t\t\t\t}\n1929 | \t\t\t\t\t} else {\n1930 | \t\t\t\t\t\t// Send error message to webview\n1931 | \t\t\t\t\t\tprovider.postMessageToWebview({\n1932 | \t\t\t\t\t\t\ttype: \"exportModeResult\",\n1933 | \t\t\t\t\t\t\tsuccess: false,\n1934 | \t\t\t\t\t\t\terror: result.error,\n1935 | \t\t\t\t\t\t\tslug: message.slug,\n1936 | \t\t\t\t\t\t})\n1937 | \t\t\t\t\t}\n1938 | \t\t\t\t} catch (error) {\n1939 | \t\t\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\n1940 | \t\t\t\t\tprovider.log(`Failed to export mode ${message.slug}: ${errorMessage}`)\n1941 | \n1942 | \t\t\t\t\t// Send error message to webview\n1943 | \t\t\t\t\tprovider.postMessageToWebview({\n1944 | \t\t\t\t\t\ttype: \"exportModeResult\",\n1945 | \t\t\t\t\t\tsuccess: false,\n1946 | \t\t\t\t\t\terror: errorMessage,\n1947 | \t\t\t\t\t\tslug: message.slug,\n1948 | \t\t\t\t\t})\n1949 | \t\t\t\t}\n1950 | \t\t\t}\n1951 | \t\t\tbreak\n1952 | \t\tcase \"importMode\":\n1953 | \t\t\ttry {\n1954 | \t\t\t\t// Get last used directory for import\n1955 | \t\t\t\tconst lastImportPath = getGlobalState(\"lastModeImportPath\")\n1956 | \t\t\t\tlet defaultUri: vscode.Uri | undefined\n1957 | \n1958 | \t\t\t\tif (lastImportPath) {\n1959 | \t\t\t\t\t// Use the directory from the last import\n1960 | \t\t\t\t\tconst lastDir = path.dirname(lastImportPath)\n1961 | \t\t\t\t\tdefaultUri = vscode.Uri.file(lastDir)\n1962 | \t\t\t\t} else {\n1963 | \t\t\t\t\t// Default to workspace or home directory\n1964 | \t\t\t\t\tconst workspaceFolders = vscode.workspace.workspaceFolders\n1965 | \t\t\t\t\tif (workspaceFolders && workspaceFolders.length > 0) {\n1966 | \t\t\t\t\t\tdefaultUri = vscode.Uri.file(workspaceFolders[0].uri.fsPath)\n1967 | \t\t\t\t\t}\n1968 | \t\t\t\t}\n1969 | \n1970 | \t\t\t\t// Show file picker to select YAML file\n1971 | \t\t\t\tconst fileUri = await vscode.window.showOpenDialog({\n1972 | \t\t\t\t\tcanSelectFiles: true,\n1973 | \t\t\t\t\tcanSelectFolders: false,\n1974 | \t\t\t\t\tcanSelectMany: false,\n1975 | \t\t\t\t\tdefaultUri,\n1976 | \t\t\t\t\tfilters: {\n1977 | \t\t\t\t\t\t\"YAML files\": [\"yaml\", \"yml\"],\n1978 | \t\t\t\t\t},\n1979 | \t\t\t\t\ttitle: \"Select mode export file to import\",\n1980 | \t\t\t\t})\n1981 | \n1982 | \t\t\t\tif (fileUri && fileUri[0]) {\n1983 | \t\t\t\t\t// Save the directory for next time\n1984 | \t\t\t\t\tawait updateGlobalState(\"lastModeImportPath\", fileUri[0].fsPath)\n1985 | \n1986 | \t\t\t\t\t// Read the file content\n1987 | \t\t\t\t\tconst yamlContent = await fs.readFile(fileUri[0].fsPath, \"utf-8\")\n1988 | \n1989 | \t\t\t\t\t// Import the mode with the specified source level\n1990 | \t\t\t\t\tconst result = await provider.customModesManager.importModeWithRules(\n1991 | \t\t\t\t\t\tyamlContent,\n1992 | \t\t\t\t\t\tmessage.source || \"project\", // Default to project if not specified\n1993 | \t\t\t\t\t)\n1994 | \n1995 | \t\t\t\t\tif (result.success) {\n1996 | \t\t\t\t\t\t// Update state after importing\n1997 | \t\t\t\t\t\tconst customModes = await provider.customModesManager.getCustomModes()\n1998 | \t\t\t\t\t\tawait updateGlobalState(\"customModes\", customModes)\n1999 | \t\t\t\t\t\tawait provider.postStateToWebview()\n2000 | \n2001 | \t\t\t\t\t\t// Send success message to webview\n2002 | \t\t\t\t\t\tprovider.postMessageToWebview({\n2003 | \t\t\t\t\t\t\ttype: \"importModeResult\",\n2004 | \t\t\t\t\t\t\tsuccess: true,\n2005 | \t\t\t\t\t\t})\n2006 | \n2007 | \t\t\t\t\t\t// Show success message\n2008 | \t\t\t\t\t\tvscode.window.showInformationMessage(t(\"common:info.mode_imported\"))\n2009 | \t\t\t\t\t} else {\n2010 | \t\t\t\t\t\t// Send error message to webview\n2011 | \t\t\t\t\t\tprovider.postMessageToWebview({\n2012 | \t\t\t\t\t\t\ttype: \"importModeResult\",\n2013 | \t\t\t\t\t\t\tsuccess: false,\n2014 | \t\t\t\t\t\t\terror: result.error,\n2015 | \t\t\t\t\t\t})\n2016 | \n2017 | \t\t\t\t\t\t// Show error message\n2018 | \t\t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.mode_import_failed\", { error: result.error }))\n2019 | \t\t\t\t\t}\n2020 | \t\t\t\t} else {\n2021 | \t\t\t\t\t// User cancelled the file dialog - reset the importing state\n2022 | \t\t\t\t\tprovider.postMessageToWebview({\n2023 | \t\t\t\t\t\ttype: \"importModeResult\",\n2024 | \t\t\t\t\t\tsuccess: false,\n2025 | \t\t\t\t\t\terror: \"cancelled\",\n2026 | \t\t\t\t\t})\n2027 | \t\t\t\t}\n2028 | \t\t\t} catch (error) {\n2029 | \t\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\n2030 | \t\t\t\tprovider.log(`Failed to import mode: ${errorMessage}`)\n2031 | \n2032 | \t\t\t\t// Send error message to webview\n2033 | \t\t\t\tprovider.postMessageToWebview({\n2034 | \t\t\t\t\ttype: \"importModeResult\",\n2035 | \t\t\t\t\tsuccess: false,\n2036 | \t\t\t\t\terror: errorMessage,\n2037 | \t\t\t\t})\n2038 | \n2039 | \t\t\t\t// Show error message\n2040 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.mode_import_failed\", { error: errorMessage }))\n2041 | \t\t\t}\n2042 | \t\t\tbreak\n2043 | \t\tcase \"checkRulesDirectory\":\n2044 | \t\t\tif (message.slug) {\n2045 | \t\t\t\tconst hasContent = await provider.customModesManager.checkRulesDirectoryHasContent(message.slug)\n2046 | \n2047 | \t\t\t\tprovider.postMessageToWebview({\n2048 | \t\t\t\t\ttype: \"checkRulesDirectoryResult\",\n2049 | \t\t\t\t\tslug: message.slug,\n2050 | \t\t\t\t\thasContent: hasContent,\n2051 | \t\t\t\t})\n2052 | \t\t\t}\n2053 | \t\t\tbreak\n2054 | \t\tcase \"humanRelayResponse\":\n2055 | \t\t\tif (message.requestId && message.text) {\n2056 | \t\t\t\tvscode.commands.executeCommand(getCommand(\"handleHumanRelayResponse\"), {\n2057 | \t\t\t\t\trequestId: message.requestId,\n2058 | \t\t\t\t\ttext: message.text,\n2059 | \t\t\t\t\tcancelled: false,\n2060 | \t\t\t\t})\n2061 | \t\t\t}\n2062 | \t\t\tbreak\n2063 | \n2064 | \t\tcase \"humanRelayCancel\":\n2065 | \t\t\tif (message.requestId) {\n2066 | \t\t\t\tvscode.commands.executeCommand(getCommand(\"handleHumanRelayResponse\"), {\n2067 | \t\t\t\t\trequestId: message.requestId,\n2068 | \t\t\t\t\tcancelled: true,\n2069 | \t\t\t\t})\n2070 | \t\t\t}\n2071 | \t\t\tbreak\n2072 | \n2073 | \t\t// kilocode_change_start\n2074 | \t\tcase \"fetchProfileDataRequest\":\n2075 | \t\t\ttry {\n2076 | \t\t\t\tconst { apiConfiguration } = await provider.getState()\n2077 | \t\t\t\tconst kilocodeToken = apiConfiguration?.kilocodeToken\n2078 | \n2079 | \t\t\t\tif (!kilocodeToken) {\n2080 | \t\t\t\t\tprovider.log(\"KiloCode token not found in extension state.\")\n2081 | \t\t\t\t\tprovider.postMessageToWebview({\n2082 | \t\t\t\t\t\ttype: \"profileDataResponse\",\n2083 | \t\t\t\t\t\tpayload: { success: false, error: \"KiloCode API token not configured.\" },\n2084 | \t\t\t\t\t})\n2085 | \t\t\t\t\tbreak\n2086 | \t\t\t\t}\n2087 | \n2088 | \t\t\t\t// Changed to /api/profile\n2089 | \t\t\t\tconst response = await axios.get(\"https://kilocode.ai/api/profile\", {\n2090 | \t\t\t\t\theaders: {\n2091 | \t\t\t\t\t\tAuthorization: `Bearer ${kilocodeToken}`,\n2092 | \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n2093 | \t\t\t\t\t},\n2094 | \t\t\t\t})\n2095 | \n2096 | \t\t\t\tprovider.postMessageToWebview({\n2097 | \t\t\t\t\ttype: \"profileDataResponse\", // Assuming this response type is still appropriate for /api/profile\n2098 | \t\t\t\t\tpayload: { success: true, data: { kilocodeToken, ...response.data } },\n2099 | \t\t\t\t})\n2100 | \t\t\t} catch (error: any) {\n2101 | \t\t\t\tconst errorMessage =\n2102 | \t\t\t\t\terror.response?.data?.message ||\n2103 | \t\t\t\t\terror.message ||\n2104 | \t\t\t\t\t\"Failed to fetch general profile data from backend.\"\n2105 | \t\t\t\tprovider.log(`Error fetching general profile data: ${errorMessage}`)\n2106 | \t\t\t\tprovider.postMessageToWebview({\n2107 | \t\t\t\t\ttype: \"profileDataResponse\",\n2108 | \t\t\t\t\tpayload: { success: false, error: errorMessage },\n2109 | \t\t\t\t})\n2110 | \t\t\t}\n2111 | \t\t\tbreak\n2112 | \t\tcase \"fetchBalanceDataRequest\": // New handler\n2113 | \t\t\ttry {\n2114 | \t\t\t\tconst { apiConfiguration } = await provider.getState()\n2115 | \t\t\t\tconst kilocodeToken = apiConfiguration?.kilocodeToken\n2116 | \n2117 | \t\t\t\tif (!kilocodeToken) {\n2118 | \t\t\t\t\tprovider.log(\"KiloCode token not found in extension state for balance data.\")\n2119 | \t\t\t\t\tprovider.postMessageToWebview({\n2120 | \t\t\t\t\t\ttype: \"balanceDataResponse\", // New response type\n2121 | \t\t\t\t\t\tpayload: { success: false, error: \"KiloCode API token not configured.\" },\n2122 | \t\t\t\t\t})\n2123 | \t\t\t\t\tbreak\n2124 | \t\t\t\t}\n2125 | \n2126 | \t\t\t\tconst response = await axios.get(\"https://kilocode.ai/api/profile/balance\", {\n2127 | \t\t\t\t\t// Original path for balance\n2128 | \t\t\t\t\theaders: {\n2129 | \t\t\t\t\t\tAuthorization: `Bearer ${kilocodeToken}`,\n2130 | \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n2131 | \t\t\t\t\t},\n2132 | \t\t\t\t})\n2133 | \t\t\t\tprovider.postMessageToWebview({\n2134 | \t\t\t\t\ttype: \"balanceDataResponse\", // New response type\n2135 | \t\t\t\t\tpayload: { success: true, data: response.data },\n2136 | \t\t\t\t})\n2137 | \t\t\t} catch (error: any) {\n2138 | \t\t\t\tconst errorMessage =\n2139 | \t\t\t\t\terror.response?.data?.message || error.message || \"Failed to fetch balance data from backend.\"\n2140 | \t\t\t\tprovider.log(`Error fetching balance data: ${errorMessage}`)\n2141 | \t\t\t\tprovider.postMessageToWebview({\n2142 | \t\t\t\t\ttype: \"balanceDataResponse\", // New response type\n2143 | \t\t\t\t\tpayload: { success: false, error: errorMessage },\n2144 | \t\t\t\t})\n2145 | \t\t\t}\n2146 | \t\t\tbreak\n2147 | \t\tcase \"shopBuyCredits\": // New handler\n2148 | \t\t\ttry {\n2149 | \t\t\t\tconst { apiConfiguration } = await provider.getState()\n2150 | \t\t\t\tconst kilocodeToken = apiConfiguration?.kilocodeToken\n2151 | \t\t\t\tif (!kilocodeToken) {\n2152 | \t\t\t\t\tprovider.log(\"KiloCode token not found in extension state for buy credits.\")\n2153 | \t\t\t\t\tbreak\n2154 | \t\t\t\t}\n2155 | \t\t\t\tconst credits = message.values?.credits || 50\n2156 | \t\t\t\tconst uriScheme = message.values?.uriScheme || \"vscode\"\n2157 | \t\t\t\tconst uiKind = message.values?.uiKind || \"Desktop\"\n2158 | \t\t\t\tconst source = uiKind === \"Web\" ? \"web\" : uriScheme\n2159 | \n2160 | \t\t\t\tconst response = await axios.post(\n2161 | \t\t\t\t\t`https://kilocode.ai/payments/topup?origin=extension&source=${source}&amount=${credits}`,\n2162 | \t\t\t\t\t{},\n2163 | \t\t\t\t\t{\n2164 | \t\t\t\t\t\theaders: {\n2165 | \t\t\t\t\t\t\tAuthorization: `Bearer ${kilocodeToken}`,\n2166 | \t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n2167 | \t\t\t\t\t\t},\n2168 | \t\t\t\t\t\tmaxRedirects: 0, // Prevent axios from following redirects automatically\n2169 | \t\t\t\t\t\tvalidateStatus: (status) => status < 400, // Accept 3xx status codes\n2170 | \t\t\t\t\t},\n2171 | \t\t\t\t)\n2172 | \t\t\t\tif (response.status !== 303 || !response.headers.location) {\n2173 | \t\t\t\t\treturn\n2174 | \t\t\t\t}\n2175 | \t\t\t\tawait vscode.env.openExternal(vscode.Uri.parse(response.headers.location))\n2176 | \t\t\t} catch (error: any) {\n2177 | \t\t\t\tconst errorMessage = error?.message || \"Unknown error\"\n2178 | \t\t\t\tconst errorStack = error?.stack ? ` Stack: ${error.stack}` : \"\"\n2179 | \t\t\t\tprovider.log(`Error redirecting to payment page: ${errorMessage}.${errorStack}`)\n2180 | \t\t\t\tprovider.postMessageToWebview({\n2181 | \t\t\t\t\ttype: \"updateProfileData\",\n2182 | \t\t\t\t})\n2183 | \t\t\t}\n2184 | \t\t\tbreak\n2185 | \n2186 | \t\tcase \"fetchMcpMarketplace\": {\n2187 | \t\t\tawait provider.fetchMcpMarketplace(message.bool)\n2188 | \t\t\tbreak\n2189 | \t\t}\n2190 | \n2191 | \t\tcase \"downloadMcp\": {\n2192 | \t\t\tif (message.mcpId) {\n2193 | \t\t\t\tawait provider.downloadMcp(message.mcpId)\n2194 | \t\t\t}\n2195 | \t\t\tbreak\n2196 | \t\t}\n2197 | \n2198 | \t\tcase \"silentlyRefreshMcpMarketplace\": {\n2199 | \t\t\tawait provider.silentlyRefreshMcpMarketplace()\n2200 | \t\t\tbreak\n2201 | \t\t}\n2202 | \n2203 | \t\tcase \"toggleWorkflow\": {\n2204 | \t\t\tif (message.workflowPath && typeof message.enabled === \"boolean\" && typeof message.isGlobal === \"boolean\") {\n2205 | \t\t\t\tawait toggleWorkflow(\n2206 | \t\t\t\t\tmessage.workflowPath,\n2207 | \t\t\t\t\tmessage.enabled,\n2208 | \t\t\t\t\tmessage.isGlobal,\n2209 | \t\t\t\t\tprovider.contextProxy,\n2210 | \t\t\t\t\tprovider.context,\n2211 | \t\t\t\t)\n2212 | \t\t\t\tawait provider.postRulesDataToWebview()\n2213 | \t\t\t}\n2214 | \t\t\tbreak\n2215 | \t\t}\n2216 | \n2217 | \t\tcase \"refreshRules\": {\n2218 | \t\t\tawait provider.postRulesDataToWebview()\n2219 | \t\t\tbreak\n2220 | \t\t}\n2221 | \n2222 | \t\tcase \"toggleRule\": {\n2223 | \t\t\tif (message.rulePath && typeof message.enabled === \"boolean\" && typeof message.isGlobal === \"boolean\") {\n2224 | \t\t\t\tawait toggleRule(\n2225 | \t\t\t\t\tmessage.rulePath,\n2226 | \t\t\t\t\tmessage.enabled,\n2227 | \t\t\t\t\tmessage.isGlobal,\n2228 | \t\t\t\t\tprovider.contextProxy,\n2229 | \t\t\t\t\tprovider.context,\n2230 | \t\t\t\t)\n2231 | \t\t\t\tawait provider.postRulesDataToWebview()\n2232 | \t\t\t}\n2233 | \t\t\tbreak\n2234 | \t\t}\n2235 | \n2236 | \t\tcase \"createRuleFile\": {\n2237 | \t\t\tif (\n2238 | \t\t\t\tmessage.filename &&\n2239 | \t\t\t\ttypeof message.isGlobal === \"boolean\" &&\n2240 | \t\t\t\t(message.ruleType === \"rule\" || message.ruleType === \"workflow\")\n2241 | \t\t\t) {\n2242 | \t\t\t\ttry {\n2243 | \t\t\t\t\tawait createRuleFile(message.filename, message.isGlobal, message.ruleType)\n2244 | \t\t\t\t} catch (error) {\n2245 | \t\t\t\t\tconsole.error(\"Error creating rule file:\", error)\n2246 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"kilocode:rules.errors.failedToCreateRuleFile\"))\n2247 | \t\t\t\t}\n2248 | \t\t\t\tawait provider.postRulesDataToWebview()\n2249 | \t\t\t}\n2250 | \t\t\tbreak\n2251 | \t\t}\n2252 | \n2253 | \t\tcase \"deleteRuleFile\": {\n2254 | \t\t\tif (message.rulePath) {\n2255 | \t\t\t\ttry {\n2256 | \t\t\t\t\tawait deleteRuleFile(message.rulePath)\n2257 | \t\t\t\t} catch (error) {\n2258 | \t\t\t\t\tconsole.error(\"Error deleting rule file:\", error)\n2259 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"kilocode:rules.errors.failedToDeleteRuleFile\"))\n2260 | \t\t\t\t}\n2261 | \t\t\t\tawait provider.postRulesDataToWebview()\n2262 | \t\t\t}\n2263 | \t\t\tbreak\n2264 | \t\t}\n2265 | \n2266 | \t\tcase \"reportBug\":\n2267 | \t\t\tprovider.getCurrentCline()?.handleWebviewAskResponse(\"yesButtonClicked\")\n2268 | \t\t\tbreak\n2269 | \t\t// end kilocode_change\n2270 | \t\tcase \"telemetrySetting\": {\n2271 | \t\t\tconst telemetrySetting = message.text as TelemetrySetting\n2272 | \t\t\tawait updateGlobalState(\"telemetrySetting\", telemetrySetting)\n2273 | \t\t\tconst isOptedIn = telemetrySetting === \"enabled\"\n2274 | \n2275 | \t\t\tTelemetryService.instance.updateTelemetryState(isOptedIn)\n2276 | \t\t\tawait provider.postStateToWebview()\n2277 | \t\t\tbreak\n2278 | \t\t}\n2279 | \t\tcase \"accountButtonClicked\": {\n2280 | \t\t\t// Navigate to the account tab.\n2281 | \t\t\tprovider.postMessageToWebview({ type: \"action\", action: \"accountButtonClicked\" })\n2282 | \t\t\tbreak\n2283 | \t\t}\n2284 | \t\tcase \"rooCloudSignIn\": {\n2285 | \t\t\ttry {\n2286 | \t\t\t\tTelemetryService.instance.captureEvent(TelemetryEventName.AUTHENTICATION_INITIATED)\n2287 | \t\t\t\tawait CloudService.instance.login()\n2288 | \t\t\t} catch (error) {\n2289 | \t\t\t\tprovider.log(`AuthService#login failed: ${error}`)\n2290 | \t\t\t\tvscode.window.showErrorMessage(\"Sign in failed.\")\n2291 | \t\t\t}\n2292 | \n2293 | \t\t\tbreak\n2294 | \t\t}\n2295 | \t\tcase \"rooCloudSignOut\": {\n2296 | \t\t\ttry {\n2297 | \t\t\t\tawait CloudService.instance.logout()\n2298 | \t\t\t\tawait provider.postStateToWebview()\n2299 | \t\t\t\tprovider.postMessageToWebview({ type: \"authenticatedUser\", userInfo: undefined })\n2300 | \t\t\t} catch (error) {\n2301 | \t\t\t\tprovider.log(`AuthService#logout failed: ${error}`)\n2302 | \t\t\t\tvscode.window.showErrorMessage(\"Sign out failed.\")\n2303 | \t\t\t}\n2304 | \n2305 | \t\t\tbreak\n2306 | \t\t}\n2307 | \n2308 | \t\tcase \"saveCodeIndexSettingsAtomic\": {\n2309 | \t\t\tif (!message.codeIndexSettings) {\n2310 | \t\t\t\tbreak\n2311 | \t\t\t}\n2312 | \n2313 | \t\t\tconst settings = message.codeIndexSettings\n2314 | \n2315 | \t\t\ttry {\n2316 | \t\t\t\t// Check if embedder provider has changed\n2317 | \t\t\t\tconst currentConfig = getGlobalState(\"codebaseIndexConfig\") || {}\n2318 | \t\t\t\tconst embedderProviderChanged =\n2319 | \t\t\t\t\tcurrentConfig.codebaseIndexEmbedderProvider !== settings.codebaseIndexEmbedderProvider\n2320 | \n2321 | \t\t\t\t// Save global state settings atomically\n2322 | \t\t\t\tconst globalStateConfig = {\n2323 | \t\t\t\t\t...currentConfig,\n2324 | \t\t\t\t\tcodebaseIndexEnabled: settings.codebaseIndexEnabled,\n2325 | \t\t\t\t\tcodebaseIndexQdrantUrl: settings.codebaseIndexQdrantUrl,\n2326 | \t\t\t\t\tcodebaseIndexEmbedderProvider: settings.codebaseIndexEmbedderProvider,\n2327 | \t\t\t\t\tcodebaseIndexEmbedderBaseUrl: settings.codebaseIndexEmbedderBaseUrl,\n2328 | \t\t\t\t\tcodebaseIndexEmbedderModelId: settings.codebaseIndexEmbedderModelId,\n2329 | \t\t\t\t\tcodebaseIndexEmbedderModelDimension: settings.codebaseIndexEmbedderModelDimension, // Generic dimension\n2330 | \t\t\t\t\tcodebaseIndexOpenAiCompatibleBaseUrl: settings.codebaseIndexOpenAiCompatibleBaseUrl,\n2331 | \t\t\t\t\tcodebaseIndexSearchMaxResults: settings.codebaseIndexSearchMaxResults,\n2332 | \t\t\t\t\tcodebaseIndexSearchMinScore: settings.codebaseIndexSearchMinScore,\n2333 | \t\t\t\t}\n2334 | \n2335 | \t\t\t\t// Save global state first\n2336 | \t\t\t\tawait updateGlobalState(\"codebaseIndexConfig\", globalStateConfig)\n2337 | \n2338 | \t\t\t\t// Save secrets directly using context proxy\n2339 | \t\t\t\tif (settings.codeIndexOpenAiKey !== undefined) {\n2340 | \t\t\t\t\tawait provider.contextProxy.storeSecret(\"codeIndexOpenAiKey\", settings.codeIndexOpenAiKey)\n2341 | \t\t\t\t}\n2342 | \t\t\t\tif (settings.codeIndexQdrantApiKey !== undefined) {\n2343 | \t\t\t\t\tawait provider.contextProxy.storeSecret(\"codeIndexQdrantApiKey\", settings.codeIndexQdrantApiKey)\n2344 | \t\t\t\t}\n2345 | \t\t\t\tif (settings.codebaseIndexOpenAiCompatibleApiKey !== undefined) {\n2346 | \t\t\t\t\tawait provider.contextProxy.storeSecret(\n2347 | \t\t\t\t\t\t\"codebaseIndexOpenAiCompatibleApiKey\",\n2348 | \t\t\t\t\t\tsettings.codebaseIndexOpenAiCompatibleApiKey,\n2349 | \t\t\t\t\t)\n2350 | \t\t\t\t}\n2351 | \t\t\t\tif (settings.codebaseIndexGeminiApiKey !== undefined) {\n2352 | \t\t\t\t\tawait provider.contextProxy.storeSecret(\n2353 | \t\t\t\t\t\t\"codebaseIndexGeminiApiKey\",\n2354 | \t\t\t\t\t\tsettings.codebaseIndexGeminiApiKey,\n2355 | \t\t\t\t\t)\n2356 | \t\t\t\t}\n2357 | \t\t\t\tif (settings.codebaseIndexMistralApiKey !== undefined) {\n2358 | \t\t\t\t\tawait provider.contextProxy.storeSecret(\n2359 | \t\t\t\t\t\t\"codebaseIndexMistralApiKey\",\n2360 | \t\t\t\t\t\tsettings.codebaseIndexMistralApiKey,\n2361 | \t\t\t\t\t)\n2362 | \t\t\t\t}\n2363 | \n2364 | \t\t\t\t// Send success response first - settings are saved regardless of validation\n2365 | \t\t\t\tawait provider.postMessageToWebview({\n2366 | \t\t\t\t\ttype: \"codeIndexSettingsSaved\",\n2367 | \t\t\t\t\tsuccess: true,\n2368 | \t\t\t\t\tsettings: globalStateConfig,\n2369 | \t\t\t\t})\n2370 | \n2371 | \t\t\t\t// Update webview state\n2372 | \t\t\t\tawait provider.postStateToWebview()\n2373 | \n2374 | \t\t\t\t// Then handle validation and initialization\n2375 | \t\t\t\tif (provider.codeIndexManager) {\n2376 | \t\t\t\t\t// If embedder provider changed, perform proactive validation\n2377 | \t\t\t\t\tif (embedderProviderChanged) {\n2378 | \t\t\t\t\t\ttry {\n2379 | \t\t\t\t\t\t\t// Force handleSettingsChange which will trigger validation\n2380 | \t\t\t\t\t\t\tawait provider.codeIndexManager.handleSettingsChange()\n2381 | \t\t\t\t\t\t} catch (error) {\n2382 | \t\t\t\t\t\t\t// Validation failed - the error state is already set by handleSettingsChange\n2383 | \t\t\t\t\t\t\tprovider.log(\n2384 | \t\t\t\t\t\t\t\t`Embedder validation failed after provider change: ${error instanceof Error ? error.message : String(error)}`,\n2385 | \t\t\t\t\t\t\t)\n2386 | \t\t\t\t\t\t\t// Send validation error to webview\n2387 | \t\t\t\t\t\t\tawait provider.postMessageToWebview({\n2388 | \t\t\t\t\t\t\t\ttype: \"indexingStatusUpdate\",\n2389 | \t\t\t\t\t\t\t\tvalues: provider.codeIndexManager.getCurrentStatus(),\n2390 | \t\t\t\t\t\t\t})\n2391 | \t\t\t\t\t\t\t// Exit early - don't try to start indexing with invalid configuration\n2392 | \t\t\t\t\t\t\tbreak\n2393 | \t\t\t\t\t\t}\n2394 | \t\t\t\t\t} else {\n2395 | \t\t\t\t\t\t// No provider change, just handle settings normally\n2396 | \t\t\t\t\t\ttry {\n2397 | \t\t\t\t\t\t\tawait provider.codeIndexManager.handleSettingsChange()\n2398 | \t\t\t\t\t\t} catch (error) {\n2399 | \t\t\t\t\t\t\t// Log but don't fail - settings are saved\n2400 | \t\t\t\t\t\t\tprovider.log(\n2401 | \t\t\t\t\t\t\t\t`Settings change handling error: ${error instanceof Error ? error.message : String(error)}`,\n2402 | \t\t\t\t\t\t\t)\n2403 | \t\t\t\t\t\t}\n2404 | \t\t\t\t\t}\n2405 | \n2406 | \t\t\t\t\t// Wait a bit more to ensure everything is ready\n2407 | \t\t\t\t\tawait new Promise((resolve) => setTimeout(resolve, 200))\n2408 | \n2409 | \t\t\t\t\t// Auto-start indexing if now enabled and configured\n2410 | \t\t\t\t\tif (provider.codeIndexManager.isFeatureEnabled && provider.codeIndexManager.isFeatureConfigured) {\n2411 | \t\t\t\t\t\tif (!provider.codeIndexManager.isInitialized) {\n2412 | \t\t\t\t\t\t\ttry {\n2413 | \t\t\t\t\t\t\t\tawait provider.codeIndexManager.initialize(provider.contextProxy)\n2414 | \t\t\t\t\t\t\t\tprovider.log(`Code index manager initialized after settings save`)\n2415 | \t\t\t\t\t\t\t} catch (error) {\n2416 | \t\t\t\t\t\t\t\tprovider.log(\n2417 | \t\t\t\t\t\t\t\t\t`Code index initialization failed: ${error instanceof Error ? error.message : String(error)}`,\n2418 | \t\t\t\t\t\t\t\t)\n2419 | \t\t\t\t\t\t\t\t// Send error status to webview\n2420 | \t\t\t\t\t\t\t\tawait provider.postMessageToWebview({\n2421 | \t\t\t\t\t\t\t\t\ttype: \"indexingStatusUpdate\",\n2422 | \t\t\t\t\t\t\t\t\tvalues: provider.codeIndexManager.getCurrentStatus(),\n2423 | \t\t\t\t\t\t\t\t})\n2424 | \t\t\t\t\t\t\t}\n2425 | \t\t\t\t\t\t}\n2426 | \t\t\t\t\t}\n2427 | \t\t\t\t} else {\n2428 | \t\t\t\t\t// No workspace open - send error status\n2429 | \t\t\t\t\tprovider.log(\"Cannot save code index settings: No workspace folder open\")\n2430 | \t\t\t\t\tawait provider.postMessageToWebview({\n2431 | \t\t\t\t\t\ttype: \"indexingStatusUpdate\",\n2432 | \t\t\t\t\t\tvalues: {\n2433 | \t\t\t\t\t\t\tsystemStatus: \"Error\",\n2434 | \t\t\t\t\t\t\tmessage: t(\"embeddings:orchestrator.indexingRequiresWorkspace\"),\n2435 | \t\t\t\t\t\t\tprocessedItems: 0,\n2436 | \t\t\t\t\t\t\ttotalItems: 0,\n2437 | \t\t\t\t\t\t\tcurrentItemUnit: \"items\",\n2438 | \t\t\t\t\t\t},\n2439 | \t\t\t\t\t})\n2440 | \t\t\t\t}\n2441 | \t\t\t} catch (error) {\n2442 | \t\t\t\tprovider.log(`Error saving code index settings: ${error.message || error}`)\n2443 | \t\t\t\tawait provider.postMessageToWebview({\n2444 | \t\t\t\t\ttype: \"codeIndexSettingsSaved\",\n2445 | \t\t\t\t\tsuccess: false,\n2446 | \t\t\t\t\terror: error.message || \"Failed to save settings\",\n2447 | \t\t\t\t})\n2448 | \t\t\t}\n2449 | \t\t\tbreak\n2450 | \t\t}\n2451 | \n2452 | \t\tcase \"requestIndexingStatus\": {\n2453 | \t\t\tconst manager = provider.codeIndexManager\n2454 | \t\t\tif (!manager) {\n2455 | \t\t\t\t// No workspace open - send error status\n2456 | \t\t\t\tprovider.postMessageToWebview({\n2457 | \t\t\t\t\ttype: \"indexingStatusUpdate\",\n2458 | \t\t\t\t\tvalues: {\n2459 | \t\t\t\t\t\tsystemStatus: \"Error\",\n2460 | \t\t\t\t\t\tmessage: t(\"embeddings:orchestrator.indexingRequiresWorkspace\"),\n2461 | \t\t\t\t\t\tprocessedItems: 0,\n2462 | \t\t\t\t\t\ttotalItems: 0,\n2463 | \t\t\t\t\t\tcurrentItemUnit: \"items\",\n2464 | \t\t\t\t\t},\n2465 | \t\t\t\t})\n2466 | \t\t\t\treturn\n2467 | \t\t\t}\n2468 | \t\t\tconst status = manager.getCurrentStatus()\n2469 | \t\t\tprovider.postMessageToWebview({\n2470 | \t\t\t\ttype: \"indexingStatusUpdate\",\n2471 | \t\t\t\tvalues: status,\n2472 | \t\t\t})\n2473 | \t\t\tbreak\n2474 | \t\t}\n2475 | \t\tcase \"requestCodeIndexSecretStatus\": {\n2476 | \t\t\t// Check if secrets are set using the VSCode context directly for async access\n2477 | \t\t\tconst hasOpenAiKey = !!(await provider.context.secrets.get(\"codeIndexOpenAiKey\"))\n2478 | \t\t\tconst hasQdrantApiKey = !!(await provider.context.secrets.get(\"codeIndexQdrantApiKey\"))\n2479 | \t\t\tconst hasOpenAiCompatibleApiKey = !!(await provider.context.secrets.get(\n2480 | \t\t\t\t\"codebaseIndexOpenAiCompatibleApiKey\",\n2481 | \t\t\t))\n2482 | \t\t\tconst hasGeminiApiKey = !!(await provider.context.secrets.get(\"codebaseIndexGeminiApiKey\"))\n2483 | \t\t\tconst hasMistralApiKey = !!(await provider.context.secrets.get(\"codebaseIndexMistralApiKey\"))\n2484 | \n2485 | \t\t\tprovider.postMessageToWebview({\n2486 | \t\t\t\ttype: \"codeIndexSecretStatus\",\n2487 | \t\t\t\tvalues: {\n2488 | \t\t\t\t\thasOpenAiKey,\n2489 | \t\t\t\t\thasQdrantApiKey,\n2490 | \t\t\t\t\thasOpenAiCompatibleApiKey,\n2491 | \t\t\t\t\thasGeminiApiKey,\n2492 | \t\t\t\t\thasMistralApiKey,\n2493 | \t\t\t\t},\n2494 | \t\t\t})\n2495 | \t\t\tbreak\n2496 | \t\t}\n2497 | \t\tcase \"startIndexing\": {\n2498 | \t\t\ttry {\n2499 | \t\t\t\tconst manager = provider.codeIndexManager\n2500 | \t\t\t\tif (!manager) {\n2501 | \t\t\t\t\t// No workspace open - send error status\n2502 | \t\t\t\t\tprovider.postMessageToWebview({\n2503 | \t\t\t\t\t\ttype: \"indexingStatusUpdate\",\n2504 | \t\t\t\t\t\tvalues: {\n2505 | \t\t\t\t\t\t\tsystemStatus: \"Error\",\n2506 | \t\t\t\t\t\t\tmessage: t(\"embeddings:orchestrator.indexingRequiresWorkspace\"),\n2507 | \t\t\t\t\t\t\tprocessedItems: 0,\n2508 | \t\t\t\t\t\t\ttotalItems: 0,\n2509 | \t\t\t\t\t\t\tcurrentItemUnit: \"items\",\n2510 | \t\t\t\t\t\t},\n2511 | \t\t\t\t\t})\n2512 | \t\t\t\t\tprovider.log(\"Cannot start indexing: No workspace folder open\")\n2513 | \t\t\t\t\treturn\n2514 | \t\t\t\t}\n2515 | \t\t\t\tif (manager.isFeatureEnabled && manager.isFeatureConfigured) {\n2516 | \t\t\t\t\tif (!manager.isInitialized) {\n2517 | \t\t\t\t\t\tawait manager.initialize(provider.contextProxy)\n2518 | \t\t\t\t\t}\n2519 | \n2520 | \t\t\t\t\tmanager.startIndexing()\n2521 | \t\t\t\t}\n2522 | \t\t\t} catch (error) {\n2523 | \t\t\t\tprovider.log(`Error starting indexing: ${error instanceof Error ? error.message : String(error)}`)\n2524 | \t\t\t}\n2525 | \t\t\tbreak\n2526 | \t\t}\n2527 | \t\tcase \"clearIndexData\": {\n2528 | \t\t\ttry {\n2529 | \t\t\t\tconst manager = provider.codeIndexManager\n2530 | \t\t\t\tif (!manager) {\n2531 | \t\t\t\t\tprovider.log(\"Cannot clear index data: No workspace folder open\")\n2532 | \t\t\t\t\tprovider.postMessageToWebview({\n2533 | \t\t\t\t\t\ttype: \"indexCleared\",\n2534 | \t\t\t\t\t\tvalues: {\n2535 | \t\t\t\t\t\t\tsuccess: false,\n2536 | \t\t\t\t\t\t\terror: t(\"embeddings:orchestrator.indexingRequiresWorkspace\"),\n2537 | \t\t\t\t\t\t},\n2538 | \t\t\t\t\t})\n2539 | \t\t\t\t\treturn\n2540 | \t\t\t\t}\n2541 | \t\t\t\tawait manager.clearIndexData()\n2542 | \t\t\t\tprovider.postMessageToWebview({ type: \"indexCleared\", values: { success: true } })\n2543 | \t\t\t} catch (error) {\n2544 | \t\t\t\tprovider.log(`Error clearing index data: ${error instanceof Error ? error.message : String(error)}`)\n2545 | \t\t\t\tprovider.postMessageToWebview({\n2546 | \t\t\t\t\ttype: \"indexCleared\",\n2547 | \t\t\t\t\tvalues: {\n2548 | \t\t\t\t\t\tsuccess: false,\n2549 | \t\t\t\t\t\terror: error instanceof Error ? error.message : String(error),\n2550 | \t\t\t\t\t},\n2551 | \t\t\t\t})\n2552 | \t\t\t}\n2553 | \t\t\tbreak\n2554 | \t\t}\n2555 | \t\t// kilocode_change start - add clearUsageData\n2556 | \t\tcase \"clearUsageData\": {\n2557 | \t\t\ttry {\n2558 | \t\t\t\tconst usageTracker = UsageTracker.getInstance()\n2559 | \t\t\t\tawait usageTracker.clearAllUsageData()\n2560 | \t\t\t\tvscode.window.showInformationMessage(\"Usage data has been successfully cleared.\")\n2561 | \t\t\t} catch (error) {\n2562 | \t\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\n2563 | \t\t\t\tprovider.log(`Error clearing usage data: ${errorMessage}`)\n2564 | \t\t\t\tvscode.window.showErrorMessage(`Failed to clear usage data: ${errorMessage}`)\n2565 | \t\t\t}\n2566 | \t\t\tbreak\n2567 | \t\t}\n2568 | \t\t// kilocode_change start - add getUsageData\n2569 | \t\tcase \"getUsageData\": {\n2570 | \t\t\tif (message.text) {\n2571 | \t\t\t\ttry {\n2572 | \t\t\t\t\tconst usageTracker = UsageTracker.getInstance()\n2573 | \t\t\t\t\tconst usageData = usageTracker.getAllUsage(message.text)\n2574 | \t\t\t\t\tawait provider.postMessageToWebview({\n2575 | \t\t\t\t\t\ttype: \"usageDataResponse\",\n2576 | \t\t\t\t\t\ttext: message.text,\n2577 | \t\t\t\t\t\tvalues: usageData,\n2578 | \t\t\t\t\t})\n2579 | \t\t\t\t} catch (error) {\n2580 | \t\t\t\t\tconst errorMessage = error instanceof Error ? error.message : String(error)\n2581 | \t\t\t\t\tprovider.log(`Error getting usage data: ${errorMessage}`)\n2582 | \t\t\t\t}\n2583 | \t\t\t}\n2584 | \t\t\tbreak\n2585 | \t\t}\n2586 | \t\t// kilocode_change end - add getUsageData\n2587 | \t\t// kilocode_change start - add toggleTaskFavorite\n2588 | \t\tcase \"toggleTaskFavorite\":\n2589 | \t\t\tif (message.text) {\n2590 | \t\t\t\tawait provider.toggleTaskFavorite(message.text)\n2591 | \t\t\t}\n2592 | \t\t\tbreak\n2593 | \t\t// kilocode_change start - add fixMermaidSyntax\n2594 | \t\tcase \"fixMermaidSyntax\":\n2595 | \t\t\tif (message.text && message.requestId) {\n2596 | \t\t\t\ttry {\n2597 | \t\t\t\t\tconst { apiConfiguration } = await provider.getState()\n2598 | \n2599 | \t\t\t\t\tconst prompt = mermaidFixPrompt(message.values?.error || \"Unknown syntax error\", message.text)\n2600 | \n2601 | \t\t\t\t\tconst fixedCode = await singleCompletionHandler(apiConfiguration, prompt)\n2602 | \n2603 | \t\t\t\t\tprovider.postMessageToWebview({\n2604 | \t\t\t\t\t\ttype: \"mermaidFixResponse\",\n2605 | \t\t\t\t\t\trequestId: message.requestId,\n2606 | \t\t\t\t\t\tsuccess: true,\n2607 | \t\t\t\t\t\tfixedCode: fixedCode?.trim() || null,\n2608 | \t\t\t\t\t})\n2609 | \t\t\t\t} catch (error) {\n2610 | \t\t\t\t\tconst errorMessage = error instanceof Error ? error.message : \"Failed to fix Mermaid syntax\"\n2611 | \t\t\t\t\tprovider.log(`Error fixing Mermaid syntax: ${errorMessage}`)\n2612 | \n2613 | \t\t\t\t\tprovider.postMessageToWebview({\n2614 | \t\t\t\t\t\ttype: \"mermaidFixResponse\",\n2615 | \t\t\t\t\t\trequestId: message.requestId,\n2616 | \t\t\t\t\t\tsuccess: false,\n2617 | \t\t\t\t\t\terror: errorMessage,\n2618 | \t\t\t\t\t})\n2619 | \t\t\t\t}\n2620 | \t\t\t}\n2621 | \t\t\tbreak\n2622 | \t\t// kilocode_change end\n2623 | \t\tcase \"focusPanelRequest\": {\n2624 | \t\t\t// Execute the focusPanel command to focus the WebView\n2625 | \t\t\tawait vscode.commands.executeCommand(getCommand(\"focusPanel\"))\n2626 | \t\t\tbreak\n2627 | \t\t}\n2628 | \t\tcase \"filterMarketplaceItems\": {\n2629 | \t\t\tif (marketplaceManager && message.filters) {\n2630 | \t\t\t\ttry {\n2631 | \t\t\t\t\tawait marketplaceManager.updateWithFilteredItems({\n2632 | \t\t\t\t\t\ttype: message.filters.type as MarketplaceItemType | undefined,\n2633 | \t\t\t\t\t\tsearch: message.filters.search,\n2634 | \t\t\t\t\t\ttags: message.filters.tags,\n2635 | \t\t\t\t\t})\n2636 | \t\t\t\t\tawait provider.postStateToWebview()\n2637 | \t\t\t\t} catch (error) {\n2638 | \t\t\t\t\tconsole.error(\"Marketplace: Error filtering items:\", error)\n2639 | \t\t\t\t\tvscode.window.showErrorMessage(\"Failed to filter marketplace items\")\n2640 | \t\t\t\t}\n2641 | \t\t\t}\n2642 | \t\t\tbreak\n2643 | \t\t}\n2644 | \n2645 | \t\tcase \"fetchMarketplaceData\": {\n2646 | \t\t\t// Fetch marketplace data on demand\n2647 | \t\t\tawait provider.fetchMarketplaceData()\n2648 | \t\t\tbreak\n2649 | \t\t}\n2650 | \n2651 | \t\tcase \"installMarketplaceItem\": {\n2652 | \t\t\tif (marketplaceManager && message.mpItem && message.mpInstallOptions) {\n2653 | \t\t\t\ttry {\n2654 | \t\t\t\t\tconst configFilePath = await marketplaceManager.installMarketplaceItem(\n2655 | \t\t\t\t\t\tmessage.mpItem,\n2656 | \t\t\t\t\t\tmessage.mpInstallOptions,\n2657 | \t\t\t\t\t)\n2658 | \t\t\t\t\tawait provider.postStateToWebview()\n2659 | \t\t\t\t\tconsole.log(`Marketplace item installed and config file opened: ${configFilePath}`)\n2660 | \n2661 | \t\t\t\t\t// Send success message to webview\n2662 | \t\t\t\t\tprovider.postMessageToWebview({\n2663 | \t\t\t\t\t\ttype: \"marketplaceInstallResult\",\n2664 | \t\t\t\t\t\tsuccess: true,\n2665 | \t\t\t\t\t\tslug: message.mpItem.id,\n2666 | \t\t\t\t\t})\n2667 | \t\t\t\t} catch (error) {\n2668 | \t\t\t\t\tconsole.error(`Error installing marketplace item: ${error}`)\n2669 | \t\t\t\t\t// Send error message to webview\n2670 | \t\t\t\t\tprovider.postMessageToWebview({\n2671 | \t\t\t\t\t\ttype: \"marketplaceInstallResult\",\n2672 | \t\t\t\t\t\tsuccess: false,\n2673 | \t\t\t\t\t\terror: error instanceof Error ? error.message : String(error),\n2674 | \t\t\t\t\t\tslug: message.mpItem.id,\n2675 | \t\t\t\t\t})\n2676 | \t\t\t\t}\n2677 | \t\t\t}\n2678 | \t\t\tbreak\n2679 | \t\t}\n2680 | \n2681 | \t\tcase \"removeInstalledMarketplaceItem\": {\n2682 | \t\t\tif (marketplaceManager && message.mpItem && message.mpInstallOptions) {\n2683 | \t\t\t\ttry {\n2684 | \t\t\t\t\tawait marketplaceManager.removeInstalledMarketplaceItem(message.mpItem, message.mpInstallOptions)\n2685 | \t\t\t\t\tawait provider.postStateToWebview()\n2686 | \n2687 | \t\t\t\t\t// Send success message to webview\n2688 | \t\t\t\t\tprovider.postMessageToWebview({\n2689 | \t\t\t\t\t\ttype: \"marketplaceRemoveResult\",\n2690 | \t\t\t\t\t\tsuccess: true,\n2691 | \t\t\t\t\t\tslug: message.mpItem.id,\n2692 | \t\t\t\t\t})\n2693 | \t\t\t\t} catch (error) {\n2694 | \t\t\t\t\tconsole.error(`Error removing marketplace item: ${error}`)\n2695 | \n2696 | \t\t\t\t\t// Show error message to user\n2697 | \t\t\t\t\tvscode.window.showErrorMessage(\n2698 | \t\t\t\t\t\t`Failed to remove marketplace item: ${error instanceof Error ? error.message : String(error)}`,\n2699 | \t\t\t\t\t)\n2700 | \n2701 | \t\t\t\t\t// Send error message to webview\n2702 | \t\t\t\t\tprovider.postMessageToWebview({\n2703 | \t\t\t\t\t\ttype: \"marketplaceRemoveResult\",\n2704 | \t\t\t\t\t\tsuccess: false,\n2705 | \t\t\t\t\t\terror: error instanceof Error ? error.message : String(error),\n2706 | \t\t\t\t\t\tslug: message.mpItem.id,\n2707 | \t\t\t\t\t})\n2708 | \t\t\t\t}\n2709 | \t\t\t} else {\n2710 | \t\t\t\t// MarketplaceManager not available or missing required parameters\n2711 | \t\t\t\tconst errorMessage = !marketplaceManager\n2712 | \t\t\t\t\t? \"Marketplace manager is not available\"\n2713 | \t\t\t\t\t: \"Missing required parameters for marketplace item removal\"\n2714 | \t\t\t\tconsole.error(errorMessage)\n2715 | \n2716 | \t\t\t\tvscode.window.showErrorMessage(errorMessage)\n2717 | \n2718 | \t\t\t\tif (message.mpItem?.id) {\n2719 | \t\t\t\t\tprovider.postMessageToWebview({\n2720 | \t\t\t\t\t\ttype: \"marketplaceRemoveResult\",\n2721 | \t\t\t\t\t\tsuccess: false,\n2722 | \t\t\t\t\t\terror: errorMessage,\n2723 | \t\t\t\t\t\tslug: message.mpItem.id,\n2724 | \t\t\t\t\t})\n2725 | \t\t\t\t}\n2726 | \t\t\t}\n2727 | \t\t\tbreak\n2728 | \t\t}\n2729 | \n2730 | \t\tcase \"installMarketplaceItemWithParameters\": {\n2731 | \t\t\tif (marketplaceManager && message.payload && \"item\" in message.payload && \"parameters\" in message.payload) {\n2732 | \t\t\t\ttry {\n2733 | \t\t\t\t\tconst configFilePath = await marketplaceManager.installMarketplaceItem(message.payload.item, {\n2734 | \t\t\t\t\t\tparameters: message.payload.parameters,\n2735 | \t\t\t\t\t})\n2736 | \t\t\t\t\tawait provider.postStateToWebview()\n2737 | \t\t\t\t\tconsole.log(`Marketplace item with parameters installed and config file opened: ${configFilePath}`)\n2738 | \t\t\t\t} catch (error) {\n2739 | \t\t\t\t\tconsole.error(`Error installing marketplace item with parameters: ${error}`)\n2740 | \t\t\t\t\tvscode.window.showErrorMessage(\n2741 | \t\t\t\t\t\t`Failed to install marketplace item: ${error instanceof Error ? error.message : String(error)}`,\n2742 | \t\t\t\t\t)\n2743 | \t\t\t\t}\n2744 | \t\t\t}\n2745 | \t\t\tbreak\n2746 | \t\t}\n2747 | \n2748 | \t\tcase \"switchTab\": {\n2749 | \t\t\tif (message.tab) {\n2750 | \t\t\t\t// Capture tab shown event for all switchTab messages (which are user-initiated)\n2751 | \t\t\t\tif (TelemetryService.hasInstance()) {\n2752 | \t\t\t\t\tTelemetryService.instance.captureTabShown(message.tab)\n2753 | \t\t\t\t}\n2754 | \n2755 | \t\t\t\tawait provider.postMessageToWebview({ type: \"action\", action: \"switchTab\", tab: message.tab })\n2756 | \t\t\t}\n2757 | \t\t\tbreak\n2758 | \t\t}\n2759 | \t\t// kilocode_change start\n2760 | \t\tcase \"editMessage\": {\n2761 | \t\t\tawait editMessageHandler(provider, message)\n2762 | \t\t\tbreak\n2763 | \t\t}\n2764 | \t\tcase \"fetchKilocodeNotifications\": {\n2765 | \t\t\tawait fetchKilocodeNotificationsHandler(provider)\n2766 | \t\t\tbreak\n2767 | \t\t}\n2768 | \t\tcase \"dismissNotificationId\": {\n2769 | \t\t\tif (!message.notificationId) {\n2770 | \t\t\t\tbreak\n2771 | \t\t\t}\n2772 | \n2773 | \t\t\tconst dismissedNotificationIds = getGlobalState(\"dismissedNotificationIds\") || []\n2774 | \n2775 | \t\t\tawait updateGlobalState(\"dismissedNotificationIds\", [...dismissedNotificationIds, message.notificationId])\n2776 | \t\t\tawait provider.postStateToWebview()\n2777 | \t\t\tbreak\n2778 | \t\t}\n2779 | \t\t// kilocode_change end\n2780 | \t\tcase \"insertTextToChatArea\":\n2781 | \t\t\tprovider.postMessageToWebview({ type: \"insertTextToChatArea\", text: message.text })\n2782 | \t\t\tbreak\n2783 | \t\tcase \"requestCommands\": {\n2784 | \t\t\ttry {\n2785 | \t\t\t\tconst { getCommands } = await import(\"../../services/command/commands\")\n2786 | \t\t\t\tconst commands = await getCommands(provider.cwd || \"\")\n2787 | \n2788 | \t\t\t\t// Convert to the format expected by the frontend\n2789 | \t\t\t\tconst commandList = commands.map((command) => ({\n2790 | \t\t\t\t\tname: command.name,\n2791 | \t\t\t\t\tsource: command.source,\n2792 | \t\t\t\t\tfilePath: command.filePath,\n2793 | \t\t\t\t\tdescription: command.description,\n2794 | \t\t\t\t\targumentHint: command.argumentHint,\n2795 | \t\t\t\t}))\n2796 | \n2797 | \t\t\t\tawait provider.postMessageToWebview({\n2798 | \t\t\t\t\ttype: \"commands\",\n2799 | \t\t\t\t\tcommands: commandList,\n2800 | \t\t\t\t})\n2801 | \t\t\t} catch (error) {\n2802 | \t\t\t\tprovider.log(`Error fetching commands: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`)\n2803 | \t\t\t\t// Send empty array on error\n2804 | \t\t\t\tawait provider.postMessageToWebview({\n2805 | \t\t\t\t\ttype: \"commands\",\n2806 | \t\t\t\t\tcommands: [],\n2807 | \t\t\t\t})\n2808 | \t\t\t}\n2809 | \t\t\tbreak\n2810 | \t\t}\n2811 | \t\tcase \"openCommandFile\": {\n2812 | \t\t\ttry {\n2813 | \t\t\t\tif (message.text) {\n2814 | \t\t\t\t\tconst { getCommand } = await import(\"../../services/command/commands\")\n2815 | \t\t\t\t\tconst command = await getCommand(provider.cwd || \"\", message.text)\n2816 | \n2817 | \t\t\t\t\tif (command && command.filePath) {\n2818 | \t\t\t\t\t\topenFile(command.filePath)\n2819 | \t\t\t\t\t} else {\n2820 | \t\t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.command_not_found\", { name: message.text }))\n2821 | \t\t\t\t\t}\n2822 | \t\t\t\t}\n2823 | \t\t\t} catch (error) {\n2824 | \t\t\t\tprovider.log(\n2825 | \t\t\t\t\t`Error opening command file: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`,\n2826 | \t\t\t\t)\n2827 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.open_command_file\"))\n2828 | \t\t\t}\n2829 | \t\t\tbreak\n2830 | \t\t}\n2831 | \t\tcase \"deleteCommand\": {\n2832 | \t\t\ttry {\n2833 | \t\t\t\tif (message.text && message.values?.source) {\n2834 | \t\t\t\t\tconst { getCommand } = await import(\"../../services/command/commands\")\n2835 | \t\t\t\t\tconst command = await getCommand(provider.cwd || \"\", message.text)\n2836 | \n2837 | \t\t\t\t\tif (command && command.filePath) {\n2838 | \t\t\t\t\t\t// Delete the command file\n2839 | \t\t\t\t\t\tawait fs.unlink(command.filePath)\n2840 | \t\t\t\t\t\tprovider.log(`Deleted command file: ${command.filePath}`)\n2841 | \t\t\t\t\t} else {\n2842 | \t\t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.command_not_found\", { name: message.text }))\n2843 | \t\t\t\t\t}\n2844 | \t\t\t\t}\n2845 | \t\t\t} catch (error) {\n2846 | \t\t\t\tprovider.log(`Error deleting command: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`)\n2847 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.delete_command\"))\n2848 | \t\t\t}\n2849 | \t\t\tbreak\n2850 | \t\t}\n2851 | \t\tcase \"createCommand\": {\n2852 | \t\t\ttry {\n2853 | \t\t\t\tconst source = message.values?.source as \"global\" | \"project\"\n2854 | \t\t\t\tconst fileName = message.text // Custom filename from user input\n2855 | \n2856 | \t\t\t\tif (!source) {\n2857 | \t\t\t\t\tprovider.log(\"Missing source for createCommand\")\n2858 | \t\t\t\t\tbreak\n2859 | \t\t\t\t}\n2860 | \n2861 | \t\t\t\t// Determine the commands directory based on source\n2862 | \t\t\t\tlet commandsDir: string\n2863 | \t\t\t\tif (source === \"global\") {\n2864 | \t\t\t\t\tconst globalConfigDir = path.join(os.homedir(), \".roo\")\n2865 | \t\t\t\t\tcommandsDir = path.join(globalConfigDir, \"commands\")\n2866 | \t\t\t\t} else {\n2867 | \t\t\t\t\t// Project commands\n2868 | \t\t\t\t\tconst workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath\n2869 | \t\t\t\t\tif (!workspaceRoot) {\n2870 | \t\t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.no_workspace_for_project_command\"))\n2871 | \t\t\t\t\t\tbreak\n2872 | \t\t\t\t\t}\n2873 | \t\t\t\t\tcommandsDir = path.join(workspaceRoot, \".roo\", \"commands\")\n2874 | \t\t\t\t}\n2875 | \n2876 | \t\t\t\t// Ensure the commands directory exists\n2877 | \t\t\t\tawait fs.mkdir(commandsDir, { recursive: true })\n2878 | \n2879 | \t\t\t\t// Use provided filename or generate a unique one\n2880 | \t\t\t\tlet commandName: string\n2881 | \t\t\t\tif (fileName && fileName.trim()) {\n2882 | \t\t\t\t\tlet cleanFileName = fileName.trim()\n2883 | \n2884 | \t\t\t\t\t// Strip leading slash if present\n2885 | \t\t\t\t\tif (cleanFileName.startsWith(\"/\")) {\n2886 | \t\t\t\t\t\tcleanFileName = cleanFileName.substring(1)\n2887 | \t\t\t\t\t}\n2888 | \n2889 | \t\t\t\t\t// Remove .md extension if present BEFORE slugification\n2890 | \t\t\t\t\tif (cleanFileName.toLowerCase().endsWith(\".md\")) {\n2891 | \t\t\t\t\t\tcleanFileName = cleanFileName.slice(0, -3)\n2892 | \t\t\t\t\t}\n2893 | \n2894 | \t\t\t\t\t// Slugify the command name: lowercase, replace spaces with dashes, remove special characters\n2895 | \t\t\t\t\tcommandName = cleanFileName\n2896 | \t\t\t\t\t\t.toLowerCase()\n2897 | \t\t\t\t\t\t.replace(/\\s+/g, \"-\") // Replace spaces with dashes\n2898 | \t\t\t\t\t\t.replace(/[^a-z0-9-]/g, \"\") // Remove special characters except dashes\n2899 | \t\t\t\t\t\t.replace(/-+/g, \"-\") // Replace multiple dashes with single dash\n2900 | \t\t\t\t\t\t.replace(/^-|-$/g, \"\") // Remove leading/trailing dashes\n2901 | \n2902 | \t\t\t\t\t// Ensure we have a valid command name\n2903 | \t\t\t\t\tif (!commandName || commandName.length === 0) {\n2904 | \t\t\t\t\t\tcommandName = \"new-command\"\n2905 | \t\t\t\t\t}\n2906 | \t\t\t\t} else {\n2907 | \t\t\t\t\t// Generate a unique command name\n2908 | \t\t\t\t\tcommandName = \"new-command\"\n2909 | \t\t\t\t\tlet counter = 1\n2910 | \t\t\t\t\tlet filePath = path.join(commandsDir, `${commandName}.md`)\n2911 | \n2912 | \t\t\t\t\twhile (\n2913 | \t\t\t\t\t\tawait fs\n2914 | \t\t\t\t\t\t\t.access(filePath)\n2915 | \t\t\t\t\t\t\t.then(() => true)\n2916 | \t\t\t\t\t\t\t.catch(() => false)\n2917 | \t\t\t\t\t) {\n2918 | \t\t\t\t\t\tcommandName = `new-command-${counter}`\n2919 | \t\t\t\t\t\tfilePath = path.join(commandsDir, `${commandName}.md`)\n2920 | \t\t\t\t\t\tcounter++\n2921 | \t\t\t\t\t}\n2922 | \t\t\t\t}\n2923 | \n2924 | \t\t\t\tconst filePath = path.join(commandsDir, `${commandName}.md`)\n2925 | \n2926 | \t\t\t\t// Check if file already exists\n2927 | \t\t\t\tif (\n2928 | \t\t\t\t\tawait fs\n2929 | \t\t\t\t\t\t.access(filePath)\n2930 | \t\t\t\t\t\t.then(() => true)\n2931 | \t\t\t\t\t\t.catch(() => false)\n2932 | \t\t\t\t) {\n2933 | \t\t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.command_already_exists\", { commandName }))\n2934 | \t\t\t\t\tbreak\n2935 | \t\t\t\t}\n2936 | \n2937 | \t\t\t\t// Create the command file with template content\n2938 | \t\t\t\tconst templateContent = t(\"common:errors.command_template_content\")\n2939 | \n2940 | \t\t\t\tawait fs.writeFile(filePath, templateContent, \"utf8\")\n2941 | \t\t\t\tprovider.log(`Created new command file: ${filePath}`)\n2942 | \n2943 | \t\t\t\t// Open the new file in the editor\n2944 | \t\t\t\topenFile(filePath)\n2945 | \n2946 | \t\t\t\t// Refresh commands list\n2947 | \t\t\t\tconst { getCommands } = await import(\"../../services/command/commands\")\n2948 | \t\t\t\tconst commands = await getCommands(provider.cwd || \"\")\n2949 | \t\t\t\tconst commandList = commands.map((command) => ({\n2950 | \t\t\t\t\tname: command.name,\n2951 | \t\t\t\t\tsource: command.source,\n2952 | \t\t\t\t\tfilePath: command.filePath,\n2953 | \t\t\t\t\tdescription: command.description,\n2954 | \t\t\t\t}))\n2955 | \t\t\t\tawait provider.postMessageToWebview({\n2956 | \t\t\t\t\ttype: \"commands\",\n2957 | \t\t\t\t\tcommands: commandList,\n2958 | \t\t\t\t})\n2959 | \t\t\t} catch (error) {\n2960 | \t\t\t\tprovider.log(`Error creating command: ${JSON.stringify(error, Object.getOwnPropertyNames(error), 2)}`)\n2961 | \t\t\t\tvscode.window.showErrorMessage(t(\"common:errors.create_command_failed\"))\n2962 | \t\t\t}\n2963 | \t\t\tbreak\n2964 | \t\t}\n2965 | \n2966 | \t\tcase \"insertTextIntoTextarea\": {\n2967 | \t\t\tconst text = message.text\n2968 | \t\t\tif (text) {\n2969 | \t\t\t\t// Send message to insert text into the chat textarea\n2970 | \t\t\t\tawait provider.postMessageToWebview({\n2971 | \t\t\t\t\ttype: \"insertTextIntoTextarea\",\n2972 | \t\t\t\t\ttext: text,\n2973 | \t\t\t\t})\n2974 | \t\t\t}\n2975 | \t\t\tbreak\n2976 | \t\t}\n2977 | \t}\n2978 | }\n</content>\n</file>\n<file><path>kilocode/src/core/task/Task.ts</path>\n<content lines=\"1-2464\">\n   1 | import * as path from \"path\"\n   2 | import * as vscode from \"vscode\"\n   3 | import os from \"os\"\n   4 | import crypto from \"crypto\"\n   5 | import EventEmitter from \"events\"\n   6 | \n   7 | import { Anthropic } from \"@anthropic-ai/sdk\"\n   8 | import delay from \"delay\"\n   9 | import pWaitFor from \"p-wait-for\"\n  10 | import { serializeError } from \"serialize-error\"\n  11 | \n  12 | import {\n  13 | \ttype ProviderSettings,\n  14 | \ttype TokenUsage,\n  15 | \ttype ToolUsage,\n  16 | \ttype ToolName,\n  17 | \ttype ContextCondense,\n  18 | \ttype ClineAsk,\n  19 | \ttype ClineMessage,\n  20 | \ttype ClineSay,\n  21 | \ttype ToolProgressStatus,\n  22 | \tDEFAULT_CONSECUTIVE_MISTAKE_LIMIT,\n  23 | \ttype HistoryItem,\n  24 | \tTelemetryEventName,\n  25 | \tTodoItem,\n  26 | \tgetApiProtocol,\n  27 | \tgetModelId,\n  28 | } from \"@roo-code/types\"\n  29 | import { TelemetryService } from \"@roo-code/telemetry\"\n  30 | import { CloudService } from \"@roo-code/cloud\"\n  31 | \n  32 | // api\n  33 | import { ApiHandler, ApiHandlerCreateMessageMetadata, buildApiHandler } from \"../../api\"\n  34 | import { ApiStream } from \"../../api/transform/stream\"\n  35 | \n  36 | // shared\n  37 | import { findLastIndex } from \"../../shared/array\"\n  38 | import { combineApiRequests } from \"../../shared/combineApiRequests\"\n  39 | import { combineCommandSequences } from \"../../shared/combineCommandSequences\"\n  40 | import { t } from \"../../i18n\"\n  41 | import { ClineApiReqCancelReason, ClineApiReqInfo } from \"../../shared/ExtensionMessage\"\n  42 | import { getApiMetrics } from \"../../shared/getApiMetrics\"\n  43 | import { ClineAskResponse } from \"../../shared/WebviewMessage\"\n  44 | import { defaultModeSlug } from \"../../shared/modes\"\n  45 | import { DiffStrategy } from \"../../shared/tools\"\n  46 | import { EXPERIMENT_IDS, experiments } from \"../../shared/experiments\"\n  47 | import { getModelMaxOutputTokens } from \"../../shared/api\"\n  48 | \n  49 | // services\n  50 | import { UrlContentFetcher } from \"../../services/browser/UrlContentFetcher\"\n  51 | import { BrowserSession } from \"../../services/browser/BrowserSession\"\n  52 | import { McpHub } from \"../../services/mcp/McpHub\"\n  53 | import { McpServerManager } from \"../../services/mcp/McpServerManager\"\n  54 | import { RepoPerTaskCheckpointService } from \"../../services/checkpoints\"\n  55 | \n  56 | // integrations\n  57 | import { DiffViewProvider } from \"../../integrations/editor/DiffViewProvider\"\n  58 | import { findToolName, formatContentBlockToMarkdown } from \"../../integrations/misc/export-markdown\"\n  59 | import { RooTerminalProcess } from \"../../integrations/terminal/types\"\n  60 | import { TerminalRegistry } from \"../../integrations/terminal/TerminalRegistry\"\n  61 | \n  62 | // utils\n  63 | import { calculateApiCostAnthropic } from \"../../shared/cost\"\n  64 | import { getWorkspacePath } from \"../../utils/path\"\n  65 | \n  66 | // prompts\n  67 | import { formatResponse } from \"../prompts/responses\"\n  68 | import { SYSTEM_PROMPT } from \"../prompts/system\"\n  69 | \n  70 | // core modules\n  71 | import { ToolRepetitionDetector } from \"../tools/ToolRepetitionDetector\"\n  72 | import { FileContextTracker } from \"../context-tracking/FileContextTracker\"\n  73 | import { RooIgnoreController } from \"../ignore/RooIgnoreController\"\n  74 | import { RooProtectedController } from \"../protect/RooProtectedController\"\n  75 | import { type AssistantMessageContent, parseAssistantMessage, presentAssistantMessage } from \"../assistant-message\"\n  76 | import { truncateConversationIfNeeded } from \"../sliding-window\"\n  77 | import { ClineProvider } from \"../webview/ClineProvider\"\n  78 | import { MultiSearchReplaceDiffStrategy } from \"../diff/strategies/multi-search-replace\"\n  79 | import { MultiFileSearchReplaceDiffStrategy } from \"../diff/strategies/multi-file-search-replace\"\n  80 | import { readApiMessages, saveApiMessages, readTaskMessages, saveTaskMessages, taskMetadata } from \"../task-persistence\"\n  81 | import { getEnvironmentDetails } from \"../environment/getEnvironmentDetails\"\n  82 | import {\n  83 | \ttype CheckpointDiffOptions,\n  84 | \ttype CheckpointRestoreOptions,\n  85 | \tgetCheckpointService,\n  86 | \tcheckpointSave,\n  87 | \tcheckpointRestore,\n  88 | \tcheckpointDiff,\n  89 | } from \"../checkpoints\"\n  90 | import { ApiMessage } from \"../task-persistence/apiMessages\"\n  91 | import { getMessagesSinceLastSummary, summarizeConversation } from \"../condense\"\n  92 | import { maybeRemoveImageBlocks } from \"../../api/transform/image-cleaning\"\n  93 | import { processKiloUserContentMentions } from \"../mentions/processKiloUserContentMentions\" // kilocode_change\n  94 | import { refreshWorkflowToggles } from \"../context/instructions/workflows\" // kilocode_change\n  95 | import { parseMentions } from \"../mentions\" // kilocode_change\n  96 | import { parseKiloSlashCommands } from \"../slash-commands/kilo\" // kilocode_change\n  97 | import { GlobalFileNames } from \"../../shared/globalFileNames\" // kilocode_change\n  98 | import { ensureLocalKilorulesDirExists } from \"../context/instructions/kilo-rules\" // kilocode_change\n  99 | import { restoreTodoListForTask } from \"../tools/updateTodoListTool\"\n 100 | import { reportExcessiveRecursion, yieldPromise } from \"../kilocode\"\n 101 | \n 102 | const MAX_EXPONENTIAL_BACKOFF_SECONDS = 600 // 10 minutes\n 103 | \n 104 | export type TaskEvents = {\n 105 | \tmessage: [{ action: \"created\" | \"updated\"; message: ClineMessage }]\n 106 | \ttaskStarted: []\n 107 | \ttaskModeSwitched: [taskId: string, mode: string]\n 108 | \ttaskPaused: []\n 109 | \ttaskUnpaused: []\n 110 | \ttaskAskResponded: []\n 111 | \ttaskAborted: []\n 112 | \ttaskSpawned: [taskId: string]\n 113 | \ttaskCompleted: [taskId: string, tokenUsage: TokenUsage, toolUsage: ToolUsage]\n 114 | \ttaskTokenUsageUpdated: [taskId: string, tokenUsage: TokenUsage]\n 115 | \ttaskToolFailed: [taskId: string, tool: ToolName, error: string]\n 116 | }\n 117 | \n 118 | export type TaskEventHandlers = {\n 119 | \t[K in keyof TaskEvents]: (...args: TaskEvents[K]) => void | Promise<void>\n 120 | }\n 121 | \n 122 | export type TaskOptions = {\n 123 | \tcontext: vscode.ExtensionContext // kilocode_change\n 124 | \tprovider: ClineProvider\n 125 | \tapiConfiguration: ProviderSettings\n 126 | \tenableDiff?: boolean\n 127 | \tenableCheckpoints?: boolean\n 128 | \tfuzzyMatchThreshold?: number\n 129 | \tconsecutiveMistakeLimit?: number\n 130 | \ttask?: string\n 131 | \timages?: string[]\n 132 | \thistoryItem?: HistoryItem\n 133 | \texperiments?: Record<string, boolean>\n 134 | \tstartTask?: boolean\n 135 | \trootTask?: Task\n 136 | \tparentTask?: Task\n 137 | \ttaskNumber?: number\n 138 | \tonCreated?: (task: Task) => void\n 139 | }\n 140 | \n 141 | type UserContent = Array<Anthropic.ContentBlockParam> // kilocode_change\n 142 | \n 143 | export class Task extends EventEmitter<TaskEvents> {\n 144 | \tprivate context: vscode.ExtensionContext // kilocode_change\n 145 | \n 146 | \ttodoList?: TodoItem[]\n 147 | \treadonly taskId: string\n 148 | \tprivate taskIsFavorited?: boolean // kilocode_change\n 149 | \treadonly instanceId: string\n 150 | \n 151 | \treadonly rootTask: Task | undefined\n 152 | \treadonly parentTask: Task | undefined\n 153 | \treadonly taskNumber: number\n 154 | \treadonly workspacePath: string\n 155 | \n 156 | \t/**\n 157 | \t * The mode associated with this task. Persisted across sessions\n 158 | \t * to maintain user context when reopening tasks from history.\n 159 | \t *\n 160 | \t * ## Lifecycle\n 161 | \t *\n 162 | \t * ### For new tasks:\n 163 | \t * 1. Initially `undefined` during construction\n 164 | \t * 2. Asynchronously initialized from provider state via `initializeTaskMode()`\n 165 | \t * 3. Falls back to `defaultModeSlug` if provider state is unavailable\n 166 | \t *\n 167 | \t * ### For history items:\n 168 | \t * 1. Immediately set from `historyItem.mode` during construction\n 169 | \t * 2. Falls back to `defaultModeSlug` if mode is not stored in history\n 170 | \t *\n 171 | \t * ## Important\n 172 | \t * This property should NOT be accessed directly until `taskModeReady` promise resolves.\n 173 | \t * Use `getTaskMode()` for async access or `taskMode` getter for sync access after initialization.\n 174 | \t *\n 175 | \t * @private\n 176 | \t * @see {@link getTaskMode} - For safe async access\n 177 | \t * @see {@link taskMode} - For sync access after initialization\n 178 | \t * @see {@link waitForModeInitialization} - To ensure initialization is complete\n 179 | \t */\n 180 | \tprivate _taskMode: string | undefined\n 181 | \n 182 | \t/**\n 183 | \t * Promise that resolves when the task mode has been initialized.\n 184 | \t * This ensures async mode initialization completes before the task is used.\n 185 | \t *\n 186 | \t * ## Purpose\n 187 | \t * - Prevents race conditions when accessing task mode\n 188 | \t * - Ensures provider state is properly loaded before mode-dependent operations\n 189 | \t * - Provides a synchronization point for async initialization\n 190 | \t *\n 191 | \t * ## Resolution timing\n 192 | \t * - For history items: Resolves immediately (sync initialization)\n 193 | \t * - For new tasks: Resolves after provider state is fetched (async initialization)\n 194 | \t *\n 195 | \t * @private\n 196 | \t * @see {@link waitForModeInitialization} - Public method to await this promise\n 197 | \t */\n 198 | \tprivate taskModeReady: Promise<void>\n 199 | \n 200 | \tproviderRef: WeakRef<ClineProvider>\n 201 | \tprivate readonly globalStoragePath: string\n 202 | \tabort: boolean = false\n 203 | \tdidFinishAbortingStream = false\n 204 | \tabandoned = false\n 205 | \tisInitialized = false\n 206 | \tisPaused: boolean = false\n 207 | \tpausedModeSlug: string = defaultModeSlug\n 208 | \tprivate pauseInterval: NodeJS.Timeout | undefined\n 209 | \n 210 | \t// API\n 211 | \treadonly apiConfiguration: ProviderSettings\n 212 | \tapi: ApiHandler\n 213 | \tprivate static lastGlobalApiRequestTime?: number\n 214 | \tprivate consecutiveAutoApprovedRequestsCount: number = 0\n 215 | \n 216 | \t/**\n 217 | \t * Reset the global API request timestamp. This should only be used for testing.\n 218 | \t * @internal\n 219 | \t */\n 220 | \tstatic resetGlobalApiRequestTime(): void {\n 221 | \t\tTask.lastGlobalApiRequestTime = undefined\n 222 | \t}\n 223 | \n 224 | \ttoolRepetitionDetector: ToolRepetitionDetector\n 225 | \trooIgnoreController?: RooIgnoreController\n 226 | \trooProtectedController?: RooProtectedController\n 227 | \tfileContextTracker: FileContextTracker\n 228 | \turlContentFetcher: UrlContentFetcher\n 229 | \tterminalProcess?: RooTerminalProcess\n 230 | \n 231 | \t// Computer User\n 232 | \tbrowserSession: BrowserSession\n 233 | \n 234 | \t// Editing\n 235 | \tdiffViewProvider: DiffViewProvider\n 236 | \tdiffStrategy?: DiffStrategy\n 237 | \tdiffEnabled: boolean = false\n 238 | \tfuzzyMatchThreshold: number\n 239 | \tdidEditFile: boolean = false\n 240 | \n 241 | \t// LLM Messages & Chat Messages\n 242 | \tapiConversationHistory: ApiMessage[] = []\n 243 | \tclineMessages: ClineMessage[] = []\n 244 | \n 245 | \t// Ask\n 246 | \tprivate askResponse?: ClineAskResponse\n 247 | \tprivate askResponseText?: string\n 248 | \tprivate askResponseImages?: string[]\n 249 | \tpublic lastMessageTs?: number\n 250 | \n 251 | \t// Tool Use\n 252 | \tconsecutiveMistakeCount: number = 0\n 253 | \tconsecutiveMistakeLimit: number\n 254 | \tconsecutiveMistakeCountForApplyDiff: Map<string, number> = new Map()\n 255 | \ttoolUsage: ToolUsage = {}\n 256 | \n 257 | \t// Checkpoints\n 258 | \tenableCheckpoints: boolean\n 259 | \tcheckpointService?: RepoPerTaskCheckpointService\n 260 | \tcheckpointServiceInitializing = false\n 261 | \n 262 | \t// Streaming\n 263 | \tisWaitingForFirstChunk = false\n 264 | \tisStreaming = false\n 265 | \tcurrentStreamingContentIndex = 0\n 266 | \tassistantMessageContent: AssistantMessageContent[] = []\n 267 | \tpresentAssistantMessageLocked = false\n 268 | \tpresentAssistantMessageHasPendingUpdates = false\n 269 | \tuserMessageContent: (Anthropic.TextBlockParam | Anthropic.ImageBlockParam)[] = []\n 270 | \tuserMessageContentReady = false\n 271 | \tdidRejectTool = false\n 272 | \tdidAlreadyUseTool = false\n 273 | \tdidCompleteReadingStream = false\n 274 | \n 275 | \tconstructor({\n 276 | \t\tcontext, // kilocode_change\n 277 | \t\tprovider,\n 278 | \t\tapiConfiguration,\n 279 | \t\tenableDiff = false,\n 280 | \t\tenableCheckpoints = true,\n 281 | \t\tfuzzyMatchThreshold = 1.0,\n 282 | \t\tconsecutiveMistakeLimit = DEFAULT_CONSECUTIVE_MISTAKE_LIMIT,\n 283 | \t\ttask,\n 284 | \t\timages,\n 285 | \t\thistoryItem,\n 286 | \t\tstartTask = true,\n 287 | \t\trootTask,\n 288 | \t\tparentTask,\n 289 | \t\ttaskNumber = -1,\n 290 | \t\tonCreated,\n 291 | \t}: TaskOptions) {\n 292 | \t\tsuper()\n 293 | \t\tthis.context = context // kilocode_change\n 294 | \n 295 | \t\tif (startTask && !task && !images && !historyItem) {\n 296 | \t\t\tthrow new Error(\"Either historyItem or task/images must be provided\")\n 297 | \t\t}\n 298 | \n 299 | \t\tthis.taskId = historyItem ? historyItem.id : crypto.randomUUID()\n 300 | \t\tthis.taskIsFavorited = historyItem?.isFavorited // kilocode_change\n 301 | \t\t// Normal use-case is usually retry similar history task with new workspace.\n 302 | \t\tthis.workspacePath = parentTask\n 303 | \t\t\t? parentTask.workspacePath\n 304 | \t\t\t: getWorkspacePath(path.join(os.homedir(), \"Documents\")) // kilocode_change: use Documents instead of Desktop as default\n 305 | \n 306 | \t\tthis.instanceId = crypto.randomUUID().slice(0, 8)\n 307 | \t\tthis.taskNumber = -1\n 308 | \n 309 | \t\tthis.rooIgnoreController = new RooIgnoreController(this.cwd)\n 310 | \t\tthis.rooProtectedController = new RooProtectedController(this.cwd)\n 311 | \t\tthis.fileContextTracker = new FileContextTracker(provider, this.taskId)\n 312 | \n 313 | \t\tthis.rooIgnoreController.initialize().catch((error) => {\n 314 | \t\t\tconsole.error(\"Failed to initialize RooIgnoreController:\", error)\n 315 | \t\t})\n 316 | \n 317 | \t\tthis.apiConfiguration = apiConfiguration\n 318 | \t\tthis.api = buildApiHandler(apiConfiguration)\n 319 | \n 320 | \t\tthis.urlContentFetcher = new UrlContentFetcher(provider.context)\n 321 | \t\tthis.browserSession = new BrowserSession(provider.context)\n 322 | \t\tthis.diffEnabled = enableDiff\n 323 | \t\tthis.fuzzyMatchThreshold = fuzzyMatchThreshold\n 324 | \t\tthis.consecutiveMistakeLimit = consecutiveMistakeLimit ?? DEFAULT_CONSECUTIVE_MISTAKE_LIMIT\n 325 | \t\tthis.providerRef = new WeakRef(provider)\n 326 | \t\tthis.globalStoragePath = provider.context.globalStorageUri.fsPath\n 327 | \t\tthis.diffViewProvider = new DiffViewProvider(this.cwd, this)\n 328 | \t\tthis.enableCheckpoints = enableCheckpoints\n 329 | \n 330 | \t\tthis.rootTask = rootTask\n 331 | \t\tthis.parentTask = parentTask\n 332 | \t\tthis.taskNumber = taskNumber\n 333 | \n 334 | \t\t// Store the task's mode when it's created.\n 335 | \t\t// For history items, use the stored mode; for new tasks, we'll set it\n 336 | \t\t// after getting state.\n 337 | \t\tif (historyItem) {\n 338 | \t\t\tthis._taskMode = historyItem.mode || defaultModeSlug\n 339 | \t\t\tthis.taskModeReady = Promise.resolve()\n 340 | \t\t\tTelemetryService.instance.captureTaskRestarted(this.taskId)\n 341 | \t\t} else {\n 342 | \t\t\t// For new tasks, don't set the mode yet - wait for async initialization.\n 343 | \t\t\tthis._taskMode = undefined\n 344 | \t\t\tthis.taskModeReady = this.initializeTaskMode(provider)\n 345 | \t\t\tTelemetryService.instance.captureTaskCreated(this.taskId)\n 346 | \t\t}\n 347 | \n 348 | \t\t// Only set up diff strategy if diff is enabled.\n 349 | \t\tif (this.diffEnabled) {\n 350 | \t\t\t// Default to old strategy, will be updated if experiment is enabled.\n 351 | \t\t\tthis.diffStrategy = new MultiSearchReplaceDiffStrategy(this.fuzzyMatchThreshold)\n 352 | \n 353 | \t\t\t// Check experiment asynchronously and update strategy if needed.\n 354 | \t\t\tprovider.getState().then((state) => {\n 355 | \t\t\t\tconst isMultiFileApplyDiffEnabled = experiments.isEnabled(\n 356 | \t\t\t\t\tstate.experiments ?? {},\n 357 | \t\t\t\t\tEXPERIMENT_IDS.MULTI_FILE_APPLY_DIFF,\n 358 | \t\t\t\t)\n 359 | \n 360 | \t\t\t\tif (isMultiFileApplyDiffEnabled) {\n 361 | \t\t\t\t\tthis.diffStrategy = new MultiFileSearchReplaceDiffStrategy(this.fuzzyMatchThreshold)\n 362 | \t\t\t\t}\n 363 | \t\t\t})\n 364 | \t\t}\n 365 | \n 366 | \t\tthis.toolRepetitionDetector = new ToolRepetitionDetector(this.consecutiveMistakeLimit)\n 367 | \n 368 | \t\tonCreated?.(this)\n 369 | \n 370 | \t\tif (startTask) {\n 371 | \t\t\tif (task || images) {\n 372 | \t\t\t\tthis.startTask(task, images)\n 373 | \t\t\t} else if (historyItem) {\n 374 | \t\t\t\tthis.resumeTaskFromHistory()\n 375 | \t\t\t} else {\n 376 | \t\t\t\tthrow new Error(\"Either historyItem or task/images must be provided\")\n 377 | \t\t\t}\n 378 | \t\t}\n 379 | \t}\n 380 | \n 381 | \t// kilocode_change start\n 382 | \tprivate getContext(): vscode.ExtensionContext {\n 383 | \t\tconst context = this.context\n 384 | \t\tif (!context) {\n 385 | \t\t\tthrow new Error(\"Unable to access extension context\")\n 386 | \t\t}\n 387 | \t\treturn context\n 388 | \t}\n 389 | \t// kilocode_change end\n 390 | \t/**\n 391 | \t * Initialize the task mode from the provider state.\n 392 | \t * This method handles async initialization with proper error handling.\n 393 | \t *\n 394 | \t * ## Flow\n 395 | \t * 1. Attempts to fetch the current mode from provider state\n 396 | \t * 2. Sets `_taskMode` to the fetched mode or `defaultModeSlug` if unavailable\n 397 | \t * 3. Handles errors gracefully by falling back to default mode\n 398 | \t * 4. Logs any initialization errors for debugging\n 399 | \t *\n 400 | \t * ## Error handling\n 401 | \t * - Network failures when fetching provider state\n 402 | \t * - Provider not yet initialized\n 403 | \t * - Invalid state structure\n 404 | \t *\n 405 | \t * All errors result in fallback to `defaultModeSlug` to ensure task can proceed.\n 406 | \t *\n 407 | \t * @private\n 408 | \t * @param provider - The ClineProvider instance to fetch state from\n 409 | \t * @returns Promise that resolves when initialization is complete\n 410 | \t */\n 411 | \tprivate async initializeTaskMode(provider: ClineProvider): Promise<void> {\n 412 | \t\ttry {\n 413 | \t\t\tconst state = await provider.getState()\n 414 | \t\t\tthis._taskMode = state?.mode || defaultModeSlug\n 415 | \t\t} catch (error) {\n 416 | \t\t\t// If there's an error getting state, use the default mode\n 417 | \t\t\tthis._taskMode = defaultModeSlug\n 418 | \t\t\t// Use the provider's log method for better error visibility\n 419 | \t\t\tconst errorMessage = `Failed to initialize task mode: ${error instanceof Error ? error.message : String(error)}`\n 420 | \t\t\tprovider.log(errorMessage)\n 421 | \t\t}\n 422 | \t}\n 423 | \n 424 | \t/**\n 425 | \t * Wait for the task mode to be initialized before proceeding.\n 426 | \t * This method ensures that any operations depending on the task mode\n 427 | \t * will have access to the correct mode value.\n 428 | \t *\n 429 | \t * ## When to use\n 430 | \t * - Before accessing mode-specific configurations\n 431 | \t * - When switching between tasks with different modes\n 432 | \t * - Before operations that depend on mode-based permissions\n 433 | \t *\n 434 | \t * ## Example usage\n 435 | \t * ```typescript\n 436 | \t * // Wait for mode initialization before mode-dependent operations\n 437 | \t * await task.waitForModeInitialization();\n 438 | \t * const mode = task.taskMode; // Now safe to access synchronously\n 439 | \t *\n 440 | \t * // Or use with getTaskMode() for a one-liner\n 441 | \t * const mode = await task.getTaskMode(); // Internally waits for initialization\n 442 | \t * ```\n 443 | \t *\n 444 | \t * @returns Promise that resolves when the task mode is initialized\n 445 | \t * @public\n 446 | \t */\n 447 | \tpublic async waitForModeInitialization(): Promise<void> {\n 448 | \t\treturn this.taskModeReady\n 449 | \t}\n 450 | \n 451 | \t/**\n 452 | \t * Get the task mode asynchronously, ensuring it's properly initialized.\n 453 | \t * This is the recommended way to access the task mode as it guarantees\n 454 | \t * the mode is available before returning.\n 455 | \t *\n 456 | \t * ## Async behavior\n 457 | \t * - Internally waits for `taskModeReady` promise to resolve\n 458 | \t * - Returns the initialized mode or `defaultModeSlug` as fallback\n 459 | \t * - Safe to call multiple times - subsequent calls return immediately if already initialized\n 460 | \t *\n 461 | \t * ## Example usage\n 462 | \t * ```typescript\n 463 | \t * // Safe async access\n 464 | \t * const mode = await task.getTaskMode();\n 465 | \t * console.log(`Task is running in ${mode} mode`);\n 466 | \t *\n 467 | \t * // Use in conditional logic\n 468 | \t * if (await task.getTaskMode() === 'architect') {\n 469 | \t *   // Perform architect-specific operations\n 470 | \t * }\n 471 | \t * ```\n 472 | \t *\n 473 | \t * @returns Promise resolving to the task mode string\n 474 | \t * @public\n 475 | \t */\n 476 | \tpublic async getTaskMode(): Promise<string> {\n 477 | \t\tawait this.taskModeReady\n 478 | \t\treturn this._taskMode || defaultModeSlug\n 479 | \t}\n 480 | \n 481 | \t/**\n 482 | \t * Get the task mode synchronously. This should only be used when you're certain\n 483 | \t * that the mode has already been initialized (e.g., after waitForModeInitialization).\n 484 | \t *\n 485 | \t * ## When to use\n 486 | \t * - In synchronous contexts where async/await is not available\n 487 | \t * - After explicitly waiting for initialization via `waitForModeInitialization()`\n 488 | \t * - In event handlers or callbacks where mode is guaranteed to be initialized\n 489 | \t *\n 490 | \t * ## Example usage\n 491 | \t * ```typescript\n 492 | \t * // After ensuring initialization\n 493 | \t * await task.waitForModeInitialization();\n 494 | \t * const mode = task.taskMode; // Safe synchronous access\n 495 | \t *\n 496 | \t * // In an event handler after task is started\n 497 | \t * task.on('taskStarted', () => {\n 498 | \t *   console.log(`Task started in ${task.taskMode} mode`); // Safe here\n 499 | \t * });\n 500 | \t * ```\n 501 | \t *\n 502 | \t * @throws {Error} If the mode hasn't been initialized yet\n 503 | \t * @returns The task mode string\n 504 | \t * @public\n 505 | \t */\n 506 | \tpublic get taskMode(): string {\n 507 | \t\tif (this._taskMode === undefined) {\n 508 | \t\t\tthrow new Error(\"Task mode accessed before initialization. Use getTaskMode() or wait for taskModeReady.\")\n 509 | \t\t}\n 510 | \t\treturn this._taskMode\n 511 | \t}\n 512 | \n 513 | \tstatic create(options: TaskOptions): [Task, Promise<void>] {\n 514 | \t\tconst instance = new Task({ ...options, startTask: false })\n 515 | \t\tconst { images, task, historyItem } = options\n 516 | \t\tlet promise\n 517 | \n 518 | \t\tif (images || task) {\n 519 | \t\t\tpromise = instance.startTask(task, images)\n 520 | \t\t} else if (historyItem) {\n 521 | \t\t\tpromise = instance.resumeTaskFromHistory()\n 522 | \t\t} else {\n 523 | \t\t\tthrow new Error(\"Either historyItem or task/images must be provided\")\n 524 | \t\t}\n 525 | \n 526 | \t\treturn [instance, promise]\n 527 | \t}\n 528 | \n 529 | \t// API Messages\n 530 | \n 531 | \tprivate async getSavedApiConversationHistory(): Promise<ApiMessage[]> {\n 532 | \t\treturn readApiMessages({ taskId: this.taskId, globalStoragePath: this.globalStoragePath })\n 533 | \t}\n 534 | \n 535 | \tprivate async addToApiConversationHistory(message: Anthropic.MessageParam) {\n 536 | \t\tconst messageWithTs = { ...message, ts: Date.now() }\n 537 | \t\tthis.apiConversationHistory.push(messageWithTs)\n 538 | \t\tawait this.saveApiConversationHistory()\n 539 | \t}\n 540 | \n 541 | \tasync overwriteApiConversationHistory(newHistory: ApiMessage[]) {\n 542 | \t\tthis.apiConversationHistory = newHistory\n 543 | \t\tawait this.saveApiConversationHistory()\n 544 | \t}\n 545 | \n 546 | \tprivate async saveApiConversationHistory() {\n 547 | \t\ttry {\n 548 | \t\t\tawait saveApiMessages({\n 549 | \t\t\t\tmessages: this.apiConversationHistory,\n 550 | \t\t\t\ttaskId: this.taskId,\n 551 | \t\t\t\tglobalStoragePath: this.globalStoragePath,\n 552 | \t\t\t})\n 553 | \t\t} catch (error) {\n 554 | \t\t\t// In the off chance this fails, we don't want to stop the task.\n 555 | \t\t\tconsole.error(\"Failed to save API conversation history:\", error)\n 556 | \t\t}\n 557 | \t}\n 558 | \n 559 | \t// Cline Messages\n 560 | \n 561 | \tprivate async getSavedClineMessages(): Promise<ClineMessage[]> {\n 562 | \t\treturn readTaskMessages({ taskId: this.taskId, globalStoragePath: this.globalStoragePath })\n 563 | \t}\n 564 | \n 565 | \tprivate async addToClineMessages(message: ClineMessage) {\n 566 | \t\tthis.clineMessages.push(message)\n 567 | \t\tconst provider = this.providerRef.deref()\n 568 | \t\tawait provider?.postStateToWebview()\n 569 | \t\tthis.emit(\"message\", { action: \"created\", message })\n 570 | \t\tawait this.saveClineMessages()\n 571 | \n 572 | \t\tconst shouldCaptureMessage = message.partial !== true && CloudService.isEnabled()\n 573 | \n 574 | \t\tif (shouldCaptureMessage) {\n 575 | \t\t\tCloudService.instance.captureEvent({\n 576 | \t\t\t\tevent: TelemetryEventName.TASK_MESSAGE,\n 577 | \t\t\t\tproperties: { taskId: this.taskId, message },\n 578 | \t\t\t})\n 579 | \t\t}\n 580 | \t}\n 581 | \n 582 | \tpublic async overwriteClineMessages(newMessages: ClineMessage[]) {\n 583 | \t\tthis.clineMessages = newMessages\n 584 | \t\trestoreTodoListForTask(this)\n 585 | \t\tawait this.saveClineMessages()\n 586 | \t}\n 587 | \n 588 | \tprivate async updateClineMessage(message: ClineMessage) {\n 589 | \t\tconst provider = this.providerRef.deref()\n 590 | \t\tawait provider?.postMessageToWebview({ type: \"messageUpdated\", clineMessage: message })\n 591 | \t\tthis.emit(\"message\", { action: \"updated\", message })\n 592 | \n 593 | \t\tconst shouldCaptureMessage = message.partial !== true && CloudService.isEnabled()\n 594 | \n 595 | \t\tif (shouldCaptureMessage) {\n 596 | \t\t\tCloudService.instance.captureEvent({\n 597 | \t\t\t\tevent: TelemetryEventName.TASK_MESSAGE,\n 598 | \t\t\t\tproperties: { taskId: this.taskId, message },\n 599 | \t\t\t})\n 600 | \t\t}\n 601 | \t}\n 602 | \n 603 | \tprivate async saveClineMessages() {\n 604 | \t\ttry {\n 605 | \t\t\tawait saveTaskMessages({\n 606 | \t\t\t\tmessages: this.clineMessages,\n 607 | \t\t\t\ttaskId: this.taskId,\n 608 | \t\t\t\tglobalStoragePath: this.globalStoragePath,\n 609 | \t\t\t})\n 610 | \n 611 | \t\t\tconst { historyItem, tokenUsage } = await taskMetadata({\n 612 | \t\t\t\tmessages: this.clineMessages,\n 613 | \t\t\t\ttaskId: this.taskId,\n 614 | \t\t\t\ttaskNumber: this.taskNumber,\n 615 | \t\t\t\tglobalStoragePath: this.globalStoragePath,\n 616 | \t\t\t\tworkspace: this.cwd,\n 617 | \t\t\t\tmode: this._taskMode || defaultModeSlug, // Use the task's own mode, not the current provider mode\n 618 | \t\t\t})\n 619 | \n 620 | \t\t\tthis.emit(\"taskTokenUsageUpdated\", this.taskId, tokenUsage)\n 621 | \n 622 | \t\t\tawait this.providerRef.deref()?.updateTaskHistory(historyItem)\n 623 | \t\t} catch (error) {\n 624 | \t\t\tconsole.error(\"Failed to save messages:\", error)\n 625 | \t\t}\n 626 | \t}\n 627 | \n 628 | \t// Note that `partial` has three valid states true (partial message),\n 629 | \t// false (completion of partial message), undefined (individual complete\n 630 | \t// message).\n 631 | \tasync ask(\n 632 | \t\ttype: ClineAsk,\n 633 | \t\ttext?: string,\n 634 | \t\tpartial?: boolean,\n 635 | \t\tprogressStatus?: ToolProgressStatus,\n 636 | \t\tisProtected?: boolean,\n 637 | \t): Promise<{ response: ClineAskResponse; text?: string; images?: string[] }> {\n 638 | \t\t// If this Cline instance was aborted by the provider, then the only\n 639 | \t\t// thing keeping us alive is a promise still running in the background,\n 640 | \t\t// in which case we don't want to send its result to the webview as it\n 641 | \t\t// is attached to a new instance of Cline now. So we can safely ignore\n 642 | \t\t// the result of any active promises, and this class will be\n 643 | \t\t// deallocated. (Although we set Cline = undefined in provider, that\n 644 | \t\t// simply removes the reference to this instance, but the instance is\n 645 | \t\t// still alive until this promise resolves or rejects.)\n 646 | \t\tif (this.abort) {\n 647 | \t\t\tthrow new Error(`[KiloCode#ask] task ${this.taskId}.${this.instanceId} aborted`)\n 648 | \t\t}\n 649 | \n 650 | \t\tlet askTs: number\n 651 | \n 652 | \t\tif (partial !== undefined) {\n 653 | \t\t\tconst lastMessage = this.clineMessages.at(-1)\n 654 | \n 655 | \t\t\tconst isUpdatingPreviousPartial =\n 656 | \t\t\t\tlastMessage && lastMessage.partial && lastMessage.type === \"ask\" && lastMessage.ask === type\n 657 | \n 658 | \t\t\tif (partial) {\n 659 | \t\t\t\tif (isUpdatingPreviousPartial) {\n 660 | \t\t\t\t\t// Existing partial message, so update it.\n 661 | \t\t\t\t\tlastMessage.text = text\n 662 | \t\t\t\t\tlastMessage.partial = partial\n 663 | \t\t\t\t\tlastMessage.progressStatus = progressStatus\n 664 | \t\t\t\t\tlastMessage.isProtected = isProtected\n 665 | \t\t\t\t\t// TODO: Be more efficient about saving and posting only new\n 666 | \t\t\t\t\t// data or one whole message at a time so ignore partial for\n 667 | \t\t\t\t\t// saves, and only post parts of partial message instead of\n 668 | \t\t\t\t\t// whole array in new listener.\n 669 | \t\t\t\t\tthis.updateClineMessage(lastMessage)\n 670 | \t\t\t\t\tthrow new Error(\"Current ask promise was ignored (#1)\")\n 671 | \t\t\t\t} else {\n 672 | \t\t\t\t\t// This is a new partial message, so add it with partial\n 673 | \t\t\t\t\t// state.\n 674 | \t\t\t\t\taskTs = Date.now()\n 675 | \t\t\t\t\tthis.lastMessageTs = askTs\n 676 | \t\t\t\t\tawait this.addToClineMessages({ ts: askTs, type: \"ask\", ask: type, text, partial, isProtected })\n 677 | \t\t\t\t\tthrow new Error(\"Current ask promise was ignored (#2)\")\n 678 | \t\t\t\t}\n 679 | \t\t\t} else {\n 680 | \t\t\t\tif (isUpdatingPreviousPartial) {\n 681 | \t\t\t\t\t// This is the complete version of a previously partial\n 682 | \t\t\t\t\t// message, so replace the partial with the complete version.\n 683 | \t\t\t\t\tthis.askResponse = undefined\n 684 | \t\t\t\t\tthis.askResponseText = undefined\n 685 | \t\t\t\t\tthis.askResponseImages = undefined\n 686 | \n 687 | \t\t\t\t\t// Bug for the history books:\n 688 | \t\t\t\t\t// In the webview we use the ts as the chatrow key for the\n 689 | \t\t\t\t\t// virtuoso list. Since we would update this ts right at the\n 690 | \t\t\t\t\t// end of streaming, it would cause the view to flicker. The\n 691 | \t\t\t\t\t// key prop has to be stable otherwise react has trouble\n 692 | \t\t\t\t\t// reconciling items between renders, causing unmounting and\n 693 | \t\t\t\t\t// remounting of components (flickering).\n 694 | \t\t\t\t\t// The lesson here is if you see flickering when rendering\n 695 | \t\t\t\t\t// lists, it's likely because the key prop is not stable.\n 696 | \t\t\t\t\t// So in this case we must make sure that the message ts is\n 697 | \t\t\t\t\t// never altered after first setting it.\n 698 | \t\t\t\t\taskTs = lastMessage.ts\n 699 | \t\t\t\t\tthis.lastMessageTs = askTs\n 700 | \t\t\t\t\tlastMessage.text = text\n 701 | \t\t\t\t\tlastMessage.partial = false\n 702 | \t\t\t\t\tlastMessage.progressStatus = progressStatus\n 703 | \t\t\t\t\tlastMessage.isProtected = isProtected\n 704 | \t\t\t\t\tawait this.saveClineMessages()\n 705 | \t\t\t\t\tthis.updateClineMessage(lastMessage)\n 706 | \t\t\t\t} else {\n 707 | \t\t\t\t\t// This is a new and complete message, so add it like normal.\n 708 | \t\t\t\t\tthis.askResponse = undefined\n 709 | \t\t\t\t\tthis.askResponseText = undefined\n 710 | \t\t\t\t\tthis.askResponseImages = undefined\n 711 | \t\t\t\t\taskTs = Date.now()\n 712 | \t\t\t\t\tthis.lastMessageTs = askTs\n 713 | \t\t\t\t\tawait this.addToClineMessages({ ts: askTs, type: \"ask\", ask: type, text, isProtected })\n 714 | \t\t\t\t}\n 715 | \t\t\t}\n 716 | \t\t} else {\n 717 | \t\t\t// This is a new non-partial message, so add it like normal.\n 718 | \t\t\tthis.askResponse = undefined\n 719 | \t\t\tthis.askResponseText = undefined\n 720 | \t\t\tthis.askResponseImages = undefined\n 721 | \t\t\taskTs = Date.now()\n 722 | \t\t\tthis.lastMessageTs = askTs\n 723 | \t\t\tawait this.addToClineMessages({ ts: askTs, type: \"ask\", ask: type, text, isProtected })\n 724 | \t\t}\n 725 | \n 726 | \t\tawait pWaitFor(() => this.askResponse !== undefined || this.lastMessageTs !== askTs, { interval: 100 })\n 727 | \n 728 | \t\tif (this.lastMessageTs !== askTs) {\n 729 | \t\t\t// Could happen if we send multiple asks in a row i.e. with\n 730 | \t\t\t// command_output. It's important that when we know an ask could\n 731 | \t\t\t// fail, it is handled gracefully.\n 732 | \t\t\tthrow new Error(\"Current ask promise was ignored\")\n 733 | \t\t}\n 734 | \n 735 | \t\tconst result = { response: this.askResponse!, text: this.askResponseText, images: this.askResponseImages }\n 736 | \t\tthis.askResponse = undefined\n 737 | \t\tthis.askResponseText = undefined\n 738 | \t\tthis.askResponseImages = undefined\n 739 | \t\tthis.emit(\"taskAskResponded\")\n 740 | \t\treturn result\n 741 | \t}\n 742 | \n 743 | \tasync handleWebviewAskResponse(askResponse: ClineAskResponse, text?: string, images?: string[]) {\n 744 | \t\tthis.askResponse = askResponse\n 745 | \t\tthis.askResponseText = text\n 746 | \t\tthis.askResponseImages = images\n 747 | \t}\n 748 | \n 749 | \tasync handleTerminalOperation(terminalOperation: \"continue\" | \"abort\") {\n 750 | \t\tif (terminalOperation === \"continue\") {\n 751 | \t\t\tthis.terminalProcess?.continue()\n 752 | \t\t} else if (terminalOperation === \"abort\") {\n 753 | \t\t\tthis.terminalProcess?.abort()\n 754 | \t\t}\n 755 | \t}\n 756 | \n 757 | \tpublic async condenseContext(): Promise<void> {\n 758 | \t\tconst systemPrompt = await this.getSystemPrompt()\n 759 | \n 760 | \t\t// Get condensing configuration\n 761 | \t\t// Using type assertion to handle the case where Phase 1 hasn't been implemented yet\n 762 | \t\tconst state = await this.providerRef.deref()?.getState()\n 763 | \t\tconst customCondensingPrompt = state ? (state as any).customCondensingPrompt : undefined\n 764 | \t\tconst condensingApiConfigId = state ? (state as any).condensingApiConfigId : undefined\n 765 | \t\tconst listApiConfigMeta = state ? (state as any).listApiConfigMeta : undefined\n 766 | \n 767 | \t\t// Determine API handler to use\n 768 | \t\tlet condensingApiHandler: ApiHandler | undefined\n 769 | \t\tif (condensingApiConfigId && listApiConfigMeta && Array.isArray(listApiConfigMeta)) {\n 770 | \t\t\t// Using type assertion for the id property to avoid implicit any\n 771 | \t\t\tconst matchingConfig = listApiConfigMeta.find((config: any) => config.id === condensingApiConfigId)\n 772 | \t\t\tif (matchingConfig) {\n 773 | \t\t\t\tconst profile = await this.providerRef.deref()?.providerSettingsManager.getProfile({\n 774 | \t\t\t\t\tid: condensingApiConfigId,\n 775 | \t\t\t\t})\n 776 | \t\t\t\t// Ensure profile and apiProvider exist before trying to build handler\n 777 | \t\t\t\tif (profile && profile.apiProvider) {\n 778 | \t\t\t\t\tcondensingApiHandler = buildApiHandler(profile)\n 779 | \t\t\t\t}\n 780 | \t\t\t}\n 781 | \t\t}\n 782 | \n 783 | \t\tconst { contextTokens: prevContextTokens } = this.getTokenUsage()\n 784 | \t\tconst {\n 785 | \t\t\tmessages,\n 786 | \t\t\tsummary,\n 787 | \t\t\tcost,\n 788 | \t\t\tnewContextTokens = 0,\n 789 | \t\t\terror,\n 790 | \t\t} = await summarizeConversation(\n 791 | \t\t\tthis.apiConversationHistory,\n 792 | \t\t\tthis.api, // Main API handler (fallback)\n 793 | \t\t\tsystemPrompt, // Default summarization prompt (fallback)\n 794 | \t\t\tthis.taskId,\n 795 | \t\t\tprevContextTokens,\n 796 | \t\t\tfalse, // manual trigger\n 797 | \t\t\tcustomCondensingPrompt, // User's custom prompt\n 798 | \t\t\tcondensingApiHandler, // Specific handler for condensing\n 799 | \t\t)\n 800 | \t\tif (error) {\n 801 | \t\t\tthis.say(\n 802 | \t\t\t\t\"condense_context_error\",\n 803 | \t\t\t\terror,\n 804 | \t\t\t\tundefined /* images */,\n 805 | \t\t\t\tfalse /* partial */,\n 806 | \t\t\t\tundefined /* checkpoint */,\n 807 | \t\t\t\tundefined /* progressStatus */,\n 808 | \t\t\t\t{ isNonInteractive: true } /* options */,\n 809 | \t\t\t)\n 810 | \t\t\treturn\n 811 | \t\t}\n 812 | \t\tawait this.overwriteApiConversationHistory(messages)\n 813 | \t\tconst contextCondense: ContextCondense = { summary, cost, newContextTokens, prevContextTokens }\n 814 | \t\tawait this.say(\n 815 | \t\t\t\"condense_context\",\n 816 | \t\t\tundefined /* text */,\n 817 | \t\t\tundefined /* images */,\n 818 | \t\t\tfalse /* partial */,\n 819 | \t\t\tundefined /* checkpoint */,\n 820 | \t\t\tundefined /* progressStatus */,\n 821 | \t\t\t{ isNonInteractive: true } /* options */,\n 822 | \t\t\tcontextCondense,\n 823 | \t\t)\n 824 | \t}\n 825 | \n 826 | \tasync say(\n 827 | \t\ttype: ClineSay,\n 828 | \t\ttext?: string,\n 829 | \t\timages?: string[],\n 830 | \t\tpartial?: boolean,\n 831 | \t\tcheckpoint?: Record<string, unknown>,\n 832 | \t\tprogressStatus?: ToolProgressStatus,\n 833 | \t\toptions: {\n 834 | \t\t\tisNonInteractive?: boolean\n 835 | \t\t} = {},\n 836 | \t\tcontextCondense?: ContextCondense,\n 837 | \t): Promise<undefined> {\n 838 | \t\tif (this.abort) {\n 839 | \t\t\tthrow new Error(`[Kilo Code#say] task ${this.taskId}.${this.instanceId} aborted`)\n 840 | \t\t}\n 841 | \n 842 | \t\tif (partial !== undefined) {\n 843 | \t\t\tconst lastMessage = this.clineMessages.at(-1)\n 844 | \n 845 | \t\t\tconst isUpdatingPreviousPartial =\n 846 | \t\t\t\tlastMessage && lastMessage.partial && lastMessage.type === \"say\" && lastMessage.say === type\n 847 | \n 848 | \t\t\tif (partial) {\n 849 | \t\t\t\tif (isUpdatingPreviousPartial) {\n 850 | \t\t\t\t\t// Existing partial message, so update it.\n 851 | \t\t\t\t\tlastMessage.text = text\n 852 | \t\t\t\t\tlastMessage.images = images\n 853 | \t\t\t\t\tlastMessage.partial = partial\n 854 | \t\t\t\t\tlastMessage.progressStatus = progressStatus\n 855 | \t\t\t\t\tthis.updateClineMessage(lastMessage)\n 856 | \t\t\t\t} else {\n 857 | \t\t\t\t\t// This is a new partial message, so add it with partial state.\n 858 | \t\t\t\t\tconst sayTs = Date.now()\n 859 | \n 860 | \t\t\t\t\tif (!options.isNonInteractive) {\n 861 | \t\t\t\t\t\tthis.lastMessageTs = sayTs\n 862 | \t\t\t\t\t}\n 863 | \n 864 | \t\t\t\t\tawait this.addToClineMessages({\n 865 | \t\t\t\t\t\tts: sayTs,\n 866 | \t\t\t\t\t\ttype: \"say\",\n 867 | \t\t\t\t\t\tsay: type,\n 868 | \t\t\t\t\t\ttext,\n 869 | \t\t\t\t\t\timages,\n 870 | \t\t\t\t\t\tpartial,\n 871 | \t\t\t\t\t\tcontextCondense,\n 872 | \t\t\t\t\t})\n 873 | \t\t\t\t}\n 874 | \t\t\t} else {\n 875 | \t\t\t\t// New now have a complete version of a previously partial message.\n 876 | \t\t\t\t// This is the complete version of a previously partial\n 877 | \t\t\t\t// message, so replace the partial with the complete version.\n 878 | \t\t\t\tif (isUpdatingPreviousPartial) {\n 879 | \t\t\t\t\tif (!options.isNonInteractive) {\n 880 | \t\t\t\t\t\tthis.lastMessageTs = lastMessage.ts\n 881 | \t\t\t\t\t}\n 882 | \n 883 | \t\t\t\t\tlastMessage.text = text\n 884 | \t\t\t\t\tlastMessage.images = images\n 885 | \t\t\t\t\tlastMessage.partial = false\n 886 | \t\t\t\t\tlastMessage.progressStatus = progressStatus\n 887 | \n 888 | \t\t\t\t\t// Instead of streaming partialMessage events, we do a save\n 889 | \t\t\t\t\t// and post like normal to persist to disk.\n 890 | \t\t\t\t\tawait this.saveClineMessages()\n 891 | \n 892 | \t\t\t\t\t// More performant than an entire `postStateToWebview`.\n 893 | \t\t\t\t\tthis.updateClineMessage(lastMessage)\n 894 | \t\t\t\t} else {\n 895 | \t\t\t\t\t// This is a new and complete message, so add it like normal.\n 896 | \t\t\t\t\tconst sayTs = Date.now()\n 897 | \n 898 | \t\t\t\t\tif (!options.isNonInteractive) {\n 899 | \t\t\t\t\t\tthis.lastMessageTs = sayTs\n 900 | \t\t\t\t\t}\n 901 | \n 902 | \t\t\t\t\tawait this.addToClineMessages({ ts: sayTs, type: \"say\", say: type, text, images, contextCondense })\n 903 | \t\t\t\t}\n 904 | \t\t\t}\n 905 | \t\t} else {\n 906 | \t\t\t// This is a new non-partial message, so add it like normal.\n 907 | \t\t\tconst sayTs = Date.now()\n 908 | \n 909 | \t\t\t// A \"non-interactive\" message is a message is one that the user\n 910 | \t\t\t// does not need to respond to. We don't want these message types\n 911 | \t\t\t// to trigger an update to `lastMessageTs` since they can be created\n 912 | \t\t\t// asynchronously and could interrupt a pending ask.\n 913 | \t\t\tif (!options.isNonInteractive) {\n 914 | \t\t\t\tthis.lastMessageTs = sayTs\n 915 | \t\t\t}\n 916 | \n 917 | \t\t\tawait this.addToClineMessages({\n 918 | \t\t\t\tts: sayTs,\n 919 | \t\t\t\ttype: \"say\",\n 920 | \t\t\t\tsay: type,\n 921 | \t\t\t\ttext,\n 922 | \t\t\t\timages,\n 923 | \t\t\t\tcheckpoint,\n 924 | \t\t\t\tcontextCondense,\n 925 | \t\t\t})\n 926 | \t\t}\n 927 | \t}\n 928 | \n 929 | \tasync sayAndCreateMissingParamError(toolName: ToolName, paramName: string, relPath?: string) {\n 930 | \t\tawait this.say(\n 931 | \t\t\t\"error\",\n 932 | \t\t\t`Kilo Code tried to use ${toolName}${\n 933 | \t\t\t\trelPath ? ` for '${relPath.toPosix()}'` : \"\"\n 934 | \t\t\t} without value for required parameter '${paramName}'. Retrying...`,\n 935 | \t\t)\n 936 | \t\treturn formatResponse.toolError(formatResponse.missingToolParameterError(paramName))\n 937 | \t}\n 938 | \n 939 | \t// Start / Abort / Resume\n 940 | \n 941 | \tprivate async startTask(task?: string, images?: string[]): Promise<void> {\n 942 | \t\t// `conversationHistory` (for API) and `clineMessages` (for webview)\n 943 | \t\t// need to be in sync.\n 944 | \t\t// If the extension process were killed, then on restart the\n 945 | \t\t// `clineMessages` might not be empty, so we need to set it to [] when\n 946 | \t\t// we create a new Cline client (otherwise webview would show stale\n 947 | \t\t// messages from previous session).\n 948 | \t\tthis.clineMessages = []\n 949 | \t\tthis.apiConversationHistory = []\n 950 | \t\tawait this.providerRef.deref()?.postStateToWebview()\n 951 | \n 952 | \t\tawait this.say(\"text\", task, images)\n 953 | \t\tthis.isInitialized = true\n 954 | \n 955 | \t\tlet imageBlocks: Anthropic.ImageBlockParam[] = formatResponse.imageBlocks(images)\n 956 | \n 957 | \t\tconsole.log(`[subtasks] task ${this.taskId}.${this.instanceId} starting`)\n 958 | \n 959 | \t\tawait this.initiateTaskLoop([\n 960 | \t\t\t{\n 961 | \t\t\t\ttype: \"text\",\n 962 | \t\t\t\ttext: `<task>\\n${task}\\n</task>`,\n 963 | \t\t\t},\n 964 | \t\t\t...imageBlocks,\n 965 | \t\t])\n 966 | \t}\n 967 | \n 968 | \tpublic async resumePausedTask(lastMessage: string) {\n 969 | \t\t// Release this Cline instance from paused state.\n 970 | \t\tthis.isPaused = false\n 971 | \t\tthis.emit(\"taskUnpaused\")\n 972 | \n 973 | \t\t// Fake an answer from the subtask that it has completed running and\n 974 | \t\t// this is the result of what it has done  add the message to the chat\n 975 | \t\t// history and to the webview ui.\n 976 | \t\ttry {\n 977 | \t\t\tawait this.say(\"subtask_result\", lastMessage)\n 978 | \n 979 | \t\t\tawait this.addToApiConversationHistory({\n 980 | \t\t\t\trole: \"user\",\n 981 | \t\t\t\tcontent: [{ type: \"text\", text: `[new_task completed] Result: ${lastMessage}` }],\n 982 | \t\t\t})\n 983 | \t\t} catch (error) {\n 984 | \t\t\tthis.providerRef\n 985 | \t\t\t\t.deref()\n 986 | \t\t\t\t?.log(`Error failed to add reply from subtask into conversation of parent task, error: ${error}`)\n 987 | \n 988 | \t\t\tthrow error\n 989 | \t\t}\n 990 | \t}\n 991 | \n 992 | \tprivate async resumeTaskFromHistory() {\n 993 | \t\tconst modifiedClineMessages = await this.getSavedClineMessages()\n 994 | \n 995 | \t\t// Remove any resume messages that may have been added before\n 996 | \t\tconst lastRelevantMessageIndex = findLastIndex(\n 997 | \t\t\tmodifiedClineMessages,\n 998 | \t\t\t(m) => !(m.ask === \"resume_task\" || m.ask === \"resume_completed_task\"),\n 999 | \t\t)\n1000 | \n1001 | \t\tif (lastRelevantMessageIndex !== -1) {\n1002 | \t\t\tmodifiedClineMessages.splice(lastRelevantMessageIndex + 1)\n1003 | \t\t}\n1004 | \n1005 | \t\t// since we don't use api_req_finished anymore, we need to check if the last api_req_started has a cost value, if it doesn't and no cancellation reason to present, then we remove it since it indicates an api request without any partial content streamed\n1006 | \t\tconst lastApiReqStartedIndex = findLastIndex(\n1007 | \t\t\tmodifiedClineMessages,\n1008 | \t\t\t(m) => m.type === \"say\" && m.say === \"api_req_started\",\n1009 | \t\t)\n1010 | \n1011 | \t\tif (lastApiReqStartedIndex !== -1) {\n1012 | \t\t\tconst lastApiReqStarted = modifiedClineMessages[lastApiReqStartedIndex]\n1013 | \t\t\tconst { cost, cancelReason }: ClineApiReqInfo = JSON.parse(lastApiReqStarted.text || \"{}\")\n1014 | \t\t\tif (cost === undefined && cancelReason === undefined) {\n1015 | \t\t\t\tmodifiedClineMessages.splice(lastApiReqStartedIndex, 1)\n1016 | \t\t\t}\n1017 | \t\t}\n1018 | \n1019 | \t\tawait this.overwriteClineMessages(modifiedClineMessages)\n1020 | \t\tthis.clineMessages = await this.getSavedClineMessages()\n1021 | \n1022 | \t\t// Now present the cline messages to the user and ask if they want to\n1023 | \t\t// resume (NOTE: we ran into a bug before where the\n1024 | \t\t// apiConversationHistory wouldn't be initialized when opening a old\n1025 | \t\t// task, and it was because we were waiting for resume).\n1026 | \t\t// This is important in case the user deletes messages without resuming\n1027 | \t\t// the task first.\n1028 | \t\tthis.apiConversationHistory = await this.getSavedApiConversationHistory()\n1029 | \n1030 | \t\tconst lastClineMessage = this.clineMessages\n1031 | \t\t\t.slice()\n1032 | \t\t\t.reverse()\n1033 | \t\t\t.find((m) => !(m.ask === \"resume_task\" || m.ask === \"resume_completed_task\")) // could be multiple resume tasks\n1034 | \n1035 | \t\tlet askType: ClineAsk\n1036 | \t\tif (lastClineMessage?.ask === \"completion_result\") {\n1037 | \t\t\taskType = \"resume_completed_task\"\n1038 | \t\t} else {\n1039 | \t\t\taskType = \"resume_task\"\n1040 | \t\t}\n1041 | \n1042 | \t\tthis.isInitialized = true\n1043 | \n1044 | \t\tconst { response, text, images } = await this.ask(askType) // calls poststatetowebview\n1045 | \t\tlet responseText: string | undefined\n1046 | \t\tlet responseImages: string[] | undefined\n1047 | \t\tif (response === \"messageResponse\") {\n1048 | \t\t\tawait this.say(\"user_feedback\", text, images)\n1049 | \t\t\tresponseText = text\n1050 | \t\t\tresponseImages = images\n1051 | \t\t}\n1052 | \n1053 | \t\t// Make sure that the api conversation history can be resumed by the API,\n1054 | \t\t// even if it goes out of sync with cline messages.\n1055 | \t\tlet existingApiConversationHistory: ApiMessage[] = await this.getSavedApiConversationHistory()\n1056 | \n1057 | \t\t// v2.0 xml tags refactor caveat: since we don't use tools anymore, we need to replace all tool use blocks with a text block since the API disallows conversations with tool uses and no tool schema\n1058 | \t\tconst conversationWithoutToolBlocks = existingApiConversationHistory.map((message) => {\n1059 | \t\t\tif (Array.isArray(message.content)) {\n1060 | \t\t\t\tconst newContent = message.content.map((block) => {\n1061 | \t\t\t\t\tif (block.type === \"tool_use\") {\n1062 | \t\t\t\t\t\t// It's important we convert to the new tool schema\n1063 | \t\t\t\t\t\t// format so the model doesn't get confused about how to\n1064 | \t\t\t\t\t\t// invoke tools.\n1065 | \t\t\t\t\t\tconst inputAsXml = Object.entries(block.input as Record<string, string>)\n1066 | \t\t\t\t\t\t\t.map(([key, value]) => `<${key}>\\n${value}\\n</${key}>`)\n1067 | \t\t\t\t\t\t\t.join(\"\\n\")\n1068 | \t\t\t\t\t\treturn {\n1069 | \t\t\t\t\t\t\ttype: \"text\",\n1070 | \t\t\t\t\t\t\ttext: `<${block.name}>\\n${inputAsXml}\\n</${block.name}>`,\n1071 | \t\t\t\t\t\t} as Anthropic.Messages.TextBlockParam\n1072 | \t\t\t\t\t} else if (block.type === \"tool_result\") {\n1073 | \t\t\t\t\t\t// Convert block.content to text block array, removing images\n1074 | \t\t\t\t\t\tconst contentAsTextBlocks = Array.isArray(block.content)\n1075 | \t\t\t\t\t\t\t? block.content.filter((item) => item.type === \"text\")\n1076 | \t\t\t\t\t\t\t: [{ type: \"text\", text: block.content }]\n1077 | \t\t\t\t\t\tconst textContent = contentAsTextBlocks.map((item) => item.text).join(\"\\n\\n\")\n1078 | \t\t\t\t\t\tconst toolName = findToolName(block.tool_use_id, existingApiConversationHistory)\n1079 | \t\t\t\t\t\treturn {\n1080 | \t\t\t\t\t\t\ttype: \"text\",\n1081 | \t\t\t\t\t\t\ttext: `[${toolName} Result]\\n\\n${textContent}`,\n1082 | \t\t\t\t\t\t} as Anthropic.Messages.TextBlockParam\n1083 | \t\t\t\t\t}\n1084 | \t\t\t\t\treturn block\n1085 | \t\t\t\t})\n1086 | \t\t\t\treturn { ...message, content: newContent }\n1087 | \t\t\t}\n1088 | \t\t\treturn message\n1089 | \t\t})\n1090 | \t\texistingApiConversationHistory = conversationWithoutToolBlocks\n1091 | \n1092 | \t\t// FIXME: remove tool use blocks altogether\n1093 | \n1094 | \t\t// if the last message is an assistant message, we need to check if there's tool use since every tool use has to have a tool response\n1095 | \t\t// if there's no tool use and only a text block, then we can just add a user message\n1096 | \t\t// (note this isn't relevant anymore since we use custom tool prompts instead of tool use blocks, but this is here for legacy purposes in case users resume old tasks)\n1097 | \n1098 | \t\t// if the last message is a user message, we can need to get the assistant message before it to see if it made tool calls, and if so, fill in the remaining tool responses with 'interrupted'\n1099 | \n1100 | \t\tlet modifiedOldUserContent: Anthropic.Messages.ContentBlockParam[] // either the last message if its user message, or the user message before the last (assistant) message\n1101 | \t\tlet modifiedApiConversationHistory: ApiMessage[] // need to remove the last user message to replace with new modified user message\n1102 | \t\tif (existingApiConversationHistory.length > 0) {\n1103 | \t\t\tconst lastMessage = existingApiConversationHistory[existingApiConversationHistory.length - 1]\n1104 | \n1105 | \t\t\tif (lastMessage.role === \"assistant\") {\n1106 | \t\t\t\tconst content = Array.isArray(lastMessage.content)\n1107 | \t\t\t\t\t? lastMessage.content\n1108 | \t\t\t\t\t: [{ type: \"text\", text: lastMessage.content }]\n1109 | \t\t\t\tconst hasToolUse = content.some((block) => block.type === \"tool_use\")\n1110 | \n1111 | \t\t\t\tif (hasToolUse) {\n1112 | \t\t\t\t\tconst toolUseBlocks = content.filter(\n1113 | \t\t\t\t\t\t(block) => block.type === \"tool_use\",\n1114 | \t\t\t\t\t) as Anthropic.Messages.ToolUseBlock[]\n1115 | \t\t\t\t\tconst toolResponses: Anthropic.ToolResultBlockParam[] = toolUseBlocks.map((block) => ({\n1116 | \t\t\t\t\t\ttype: \"tool_result\",\n1117 | \t\t\t\t\t\ttool_use_id: block.id,\n1118 | \t\t\t\t\t\tcontent: \"Task was interrupted before this tool call could be completed.\",\n1119 | \t\t\t\t\t}))\n1120 | \t\t\t\t\tmodifiedApiConversationHistory = [...existingApiConversationHistory] // no changes\n1121 | \t\t\t\t\tmodifiedOldUserContent = [...toolResponses]\n1122 | \t\t\t\t} else {\n1123 | \t\t\t\t\tmodifiedApiConversationHistory = [...existingApiConversationHistory]\n1124 | \t\t\t\t\tmodifiedOldUserContent = []\n1125 | \t\t\t\t}\n1126 | \t\t\t} else if (lastMessage.role === \"user\") {\n1127 | \t\t\t\tconst previousAssistantMessage: ApiMessage | undefined =\n1128 | \t\t\t\t\texistingApiConversationHistory[existingApiConversationHistory.length - 2]\n1129 | \n1130 | \t\t\t\tconst existingUserContent: Anthropic.Messages.ContentBlockParam[] = Array.isArray(lastMessage.content)\n1131 | \t\t\t\t\t? lastMessage.content\n1132 | \t\t\t\t\t: [{ type: \"text\", text: lastMessage.content }]\n1133 | \t\t\t\tif (previousAssistantMessage && previousAssistantMessage.role === \"assistant\") {\n1134 | \t\t\t\t\tconst assistantContent = Array.isArray(previousAssistantMessage.content)\n1135 | \t\t\t\t\t\t? previousAssistantMessage.content\n1136 | \t\t\t\t\t\t: [{ type: \"text\", text: previousAssistantMessage.content }]\n1137 | \n1138 | \t\t\t\t\tconst toolUseBlocks = assistantContent.filter(\n1139 | \t\t\t\t\t\t(block) => block.type === \"tool_use\",\n1140 | \t\t\t\t\t) as Anthropic.Messages.ToolUseBlock[]\n1141 | \n1142 | \t\t\t\t\tif (toolUseBlocks.length > 0) {\n1143 | \t\t\t\t\t\tconst existingToolResults = existingUserContent.filter(\n1144 | \t\t\t\t\t\t\t(block) => block.type === \"tool_result\",\n1145 | \t\t\t\t\t\t) as Anthropic.ToolResultBlockParam[]\n1146 | \n1147 | \t\t\t\t\t\tconst missingToolResponses: Anthropic.ToolResultBlockParam[] = toolUseBlocks\n1148 | \t\t\t\t\t\t\t.filter(\n1149 | \t\t\t\t\t\t\t\t(toolUse) => !existingToolResults.some((result) => result.tool_use_id === toolUse.id),\n1150 | \t\t\t\t\t\t\t)\n1151 | \t\t\t\t\t\t\t.map((toolUse) => ({\n1152 | \t\t\t\t\t\t\t\ttype: \"tool_result\",\n1153 | \t\t\t\t\t\t\t\ttool_use_id: toolUse.id,\n1154 | \t\t\t\t\t\t\t\tcontent: \"Task was interrupted before this tool call could be completed.\",\n1155 | \t\t\t\t\t\t\t}))\n1156 | \n1157 | \t\t\t\t\t\tmodifiedApiConversationHistory = existingApiConversationHistory.slice(0, -1) // removes the last user message\n1158 | \t\t\t\t\t\tmodifiedOldUserContent = [...existingUserContent, ...missingToolResponses]\n1159 | \t\t\t\t\t} else {\n1160 | \t\t\t\t\t\tmodifiedApiConversationHistory = existingApiConversationHistory.slice(0, -1)\n1161 | \t\t\t\t\t\tmodifiedOldUserContent = [...existingUserContent]\n1162 | \t\t\t\t\t}\n1163 | \t\t\t\t} else {\n1164 | \t\t\t\t\tmodifiedApiConversationHistory = existingApiConversationHistory.slice(0, -1)\n1165 | \t\t\t\t\tmodifiedOldUserContent = [...existingUserContent]\n1166 | \t\t\t\t}\n1167 | \t\t\t} else {\n1168 | \t\t\t\tthrow new Error(\"Unexpected: Last message is not a user or assistant message\")\n1169 | \t\t\t}\n1170 | \t\t} else {\n1171 | \t\t\tthrow new Error(\"Unexpected: No existing API conversation history\")\n1172 | \t\t}\n1173 | \n1174 | \t\tlet newUserContent: Anthropic.Messages.ContentBlockParam[] = [...modifiedOldUserContent]\n1175 | \n1176 | \t\tconst agoText = ((): string => {\n1177 | \t\t\tconst timestamp = lastClineMessage?.ts ?? Date.now()\n1178 | \t\t\tconst now = Date.now()\n1179 | \t\t\tconst diff = now - timestamp\n1180 | \t\t\tconst minutes = Math.floor(diff / 60000)\n1181 | \t\t\tconst hours = Math.floor(minutes / 60)\n1182 | \t\t\tconst days = Math.floor(hours / 24)\n1183 | \n1184 | \t\t\tif (days > 0) {\n1185 | \t\t\t\treturn `${days} day${days > 1 ? \"s\" : \"\"} ago`\n1186 | \t\t\t}\n1187 | \t\t\tif (hours > 0) {\n1188 | \t\t\t\treturn `${hours} hour${hours > 1 ? \"s\" : \"\"} ago`\n1189 | \t\t\t}\n1190 | \t\t\tif (minutes > 0) {\n1191 | \t\t\t\treturn `${minutes} minute${minutes > 1 ? \"s\" : \"\"} ago`\n1192 | \t\t\t}\n1193 | \t\t\treturn \"just now\"\n1194 | \t\t})()\n1195 | \n1196 | \t\tif (responseText) {\n1197 | \t\t\tnewUserContent.push({\n1198 | \t\t\t\ttype: \"text\",\n1199 | \t\t\t\ttext: `\\n\\nNew instructions for task continuation:\\n<user_message>\\n${responseText}\\n</user_message>`,\n1200 | \t\t\t})\n1201 | \t\t}\n1202 | \n1203 | \t\tif (responseImages && responseImages.length > 0) {\n1204 | \t\t\tnewUserContent.push(...formatResponse.imageBlocks(responseImages))\n1205 | \t\t}\n1206 | \n1207 | \t\t// Ensure we have at least some content to send to the API\n1208 | \t\t// If newUserContent is empty, add a minimal resumption message\n1209 | \t\tif (newUserContent.length === 0) {\n1210 | \t\t\tnewUserContent.push({\n1211 | \t\t\t\ttype: \"text\",\n1212 | \t\t\t\ttext: \"[TASK RESUMPTION] Resuming task...\",\n1213 | \t\t\t})\n1214 | \t\t}\n1215 | \n1216 | \t\tawait this.overwriteApiConversationHistory(modifiedApiConversationHistory)\n1217 | \n1218 | \t\tconsole.log(`[subtasks] task ${this.taskId}.${this.instanceId} resuming from history item`)\n1219 | \n1220 | \t\tawait this.initiateTaskLoop(newUserContent)\n1221 | \t}\n1222 | \n1223 | \tpublic dispose(): void {\n1224 | \t\t// Stop waiting for child task completion.\n1225 | \t\tif (this.pauseInterval) {\n1226 | \t\t\tclearInterval(this.pauseInterval)\n1227 | \t\t\tthis.pauseInterval = undefined\n1228 | \t\t}\n1229 | \n1230 | \t\t// Release any terminals associated with this task.\n1231 | \t\ttry {\n1232 | \t\t\t// Release any terminals associated with this task.\n1233 | \t\t\tTerminalRegistry.releaseTerminalsForTask(this.taskId)\n1234 | \t\t} catch (error) {\n1235 | \t\t\tconsole.error(\"Error releasing terminals:\", error)\n1236 | \t\t}\n1237 | \n1238 | \t\ttry {\n1239 | \t\t\tthis.urlContentFetcher.closeBrowser()\n1240 | \t\t} catch (error) {\n1241 | \t\t\tconsole.error(\"Error closing URL content fetcher browser:\", error)\n1242 | \t\t}\n1243 | \n1244 | \t\ttry {\n1245 | \t\t\tthis.browserSession.closeBrowser()\n1246 | \t\t} catch (error) {\n1247 | \t\t\tconsole.error(\"Error closing browser session:\", error)\n1248 | \t\t}\n1249 | \n1250 | \t\ttry {\n1251 | \t\t\tif (this.rooIgnoreController) {\n1252 | \t\t\t\tthis.rooIgnoreController.dispose()\n1253 | \t\t\t\tthis.rooIgnoreController = undefined\n1254 | \t\t\t}\n1255 | \t\t} catch (error) {\n1256 | \t\t\tconsole.error(\"Error disposing RooIgnoreController:\", error)\n1257 | \t\t\t// This is the critical one for the leak fix.\n1258 | \t\t}\n1259 | \n1260 | \t\ttry {\n1261 | \t\t\tthis.fileContextTracker.dispose()\n1262 | \t\t} catch (error) {\n1263 | \t\t\tconsole.error(\"Error disposing file context tracker:\", error)\n1264 | \t\t}\n1265 | \n1266 | \t\ttry {\n1267 | \t\t\t// If we're not streaming then `abortStream` won't be called.\n1268 | \t\t\tif (this.isStreaming && this.diffViewProvider.isEditing) {\n1269 | \t\t\t\tthis.diffViewProvider.revertChanges().catch(console.error)\n1270 | \t\t\t}\n1271 | \t\t} catch (error) {\n1272 | \t\t\tconsole.error(\"Error reverting diff changes:\", error)\n1273 | \t\t}\n1274 | \t}\n1275 | \n1276 | \tpublic async abortTask(isAbandoned = false) {\n1277 | \t\tconsole.log(`[subtasks] aborting task ${this.taskId}.${this.instanceId}`)\n1278 | \n1279 | \t\t// Will stop any autonomously running promises.\n1280 | \t\tif (isAbandoned) {\n1281 | \t\t\tthis.abandoned = true\n1282 | \t\t}\n1283 | \n1284 | \t\tthis.abort = true\n1285 | \t\tthis.emit(\"taskAborted\")\n1286 | \n1287 | \t\ttry {\n1288 | \t\t\tthis.dispose() // Call the centralized dispose method\n1289 | \t\t} catch (error) {\n1290 | \t\t\tconsole.error(`Error during task ${this.taskId}.${this.instanceId} disposal:`, error)\n1291 | \t\t\t// Don't rethrow - we want abort to always succeed\n1292 | \t\t}\n1293 | \t\t// Save the countdown message in the automatic retry or other content.\n1294 | \t\ttry {\n1295 | \t\t\t// Save the countdown message in the automatic retry or other content.\n1296 | \t\t\tawait this.saveClineMessages()\n1297 | \t\t} catch (error) {\n1298 | \t\t\tconsole.error(`Error saving messages during abort for task ${this.taskId}.${this.instanceId}:`, error)\n1299 | \t\t}\n1300 | \t}\n1301 | \n1302 | \t// Used when a sub-task is launched and the parent task is waiting for it to\n1303 | \t// finish.\n1304 | \t// TBD: The 1s should be added to the settings, also should add a timeout to\n1305 | \t// prevent infinite waiting.\n1306 | \tpublic async waitForResume() {\n1307 | \t\tawait new Promise<void>((resolve) => {\n1308 | \t\t\tthis.pauseInterval = setInterval(() => {\n1309 | \t\t\t\tif (!this.isPaused) {\n1310 | \t\t\t\t\tclearInterval(this.pauseInterval)\n1311 | \t\t\t\t\tthis.pauseInterval = undefined\n1312 | \t\t\t\t\tresolve()\n1313 | \t\t\t\t}\n1314 | \t\t\t}, 1000)\n1315 | \t\t})\n1316 | \t}\n1317 | \n1318 | \t// Task Loop\n1319 | \n1320 | \tprivate async initiateTaskLoop(userContent: Anthropic.Messages.ContentBlockParam[]): Promise<void> {\n1321 | \t\t// Kicks off the checkpoints initialization process in the background.\n1322 | \t\tgetCheckpointService(this)\n1323 | \n1324 | \t\tlet nextUserContent = userContent\n1325 | \t\tlet includeFileDetails = true\n1326 | \n1327 | \t\tthis.emit(\"taskStarted\")\n1328 | \n1329 | \t\twhile (!this.abort) {\n1330 | \t\t\tconst didEndLoop = await this.recursivelyMakeClineRequests(nextUserContent, includeFileDetails)\n1331 | \t\t\tincludeFileDetails = false // we only need file details the first time\n1332 | \n1333 | \t\t\t// The way this agentic loop works is that cline will be given a\n1334 | \t\t\t// task that he then calls tools to complete. Unless there's an\n1335 | \t\t\t// attempt_completion call, we keep responding back to him with his\n1336 | \t\t\t// tool's responses until he either attempt_completion or does not\n1337 | \t\t\t// use anymore tools. If he does not use anymore tools, we ask him\n1338 | \t\t\t// to consider if he's completed the task and then call\n1339 | \t\t\t// attempt_completion, otherwise proceed with completing the task.\n1340 | \t\t\t// There is a MAX_REQUESTS_PER_TASK limit to prevent infinite\n1341 | \t\t\t// requests, but Cline is prompted to finish the task as efficiently\n1342 | \t\t\t// as he can.\n1343 | \n1344 | \t\t\tif (didEndLoop) {\n1345 | \t\t\t\t// For now a task never 'completes'. This will only happen if\n1346 | \t\t\t\t// the user hits max requests and denies resetting the count.\n1347 | \t\t\t\tbreak\n1348 | \t\t\t} else {\n1349 | \t\t\t\tnextUserContent = [{ type: \"text\", text: formatResponse.noToolsUsed() }]\n1350 | \t\t\t\tthis.consecutiveMistakeCount++\n1351 | \t\t\t}\n1352 | \t\t}\n1353 | \t}\n1354 | \n1355 | \tpublic async recursivelyMakeClineRequests(\n1356 | \t\tuserContent: Anthropic.Messages.ContentBlockParam[],\n1357 | \t\tincludeFileDetails: boolean = false,\n1358 | \t\trecursionDepth: number = 0, // kilocode_change\n1359 | \t): Promise<boolean> {\n1360 | \t\treportExcessiveRecursion(\"recursivelyMakeClineRequests\", recursionDepth) // kilocode_change\n1361 | \t\tif (this.abort) {\n1362 | \t\t\tthrow new Error(`[KiloCode#recursivelyMakeClineRequests] task ${this.taskId}.${this.instanceId} aborted`)\n1363 | \t\t}\n1364 | \n1365 | \t\tif (this.consecutiveMistakeLimit > 0 && this.consecutiveMistakeCount >= this.consecutiveMistakeLimit) {\n1366 | \t\t\tconst { response, text, images } = await this.ask(\n1367 | \t\t\t\t\"mistake_limit_reached\",\n1368 | \t\t\t\tt(\"common:errors.mistake_limit_guidance\"),\n1369 | \t\t\t)\n1370 | \n1371 | \t\t\tif (response === \"messageResponse\") {\n1372 | \t\t\t\tuserContent.push(\n1373 | \t\t\t\t\t...[\n1374 | \t\t\t\t\t\t{ type: \"text\" as const, text: formatResponse.tooManyMistakes(text) },\n1375 | \t\t\t\t\t\t...formatResponse.imageBlocks(images),\n1376 | \t\t\t\t\t],\n1377 | \t\t\t\t)\n1378 | \n1379 | \t\t\t\tawait this.say(\"user_feedback\", text, images)\n1380 | \n1381 | \t\t\t\t// Track consecutive mistake errors in telemetry.\n1382 | \t\t\t\tTelemetryService.instance.captureConsecutiveMistakeError(this.taskId)\n1383 | \t\t\t}\n1384 | \n1385 | \t\t\tthis.consecutiveMistakeCount = 0\n1386 | \t\t}\n1387 | \n1388 | \t\t// In this Cline request loop, we need to check if this task instance\n1389 | \t\t// has been asked to wait for a subtask to finish before continuing.\n1390 | \t\tconst provider = this.providerRef.deref()\n1391 | \n1392 | \t\tif (this.isPaused && provider) {\n1393 | \t\t\tprovider.log(`[subtasks] paused ${this.taskId}.${this.instanceId}`)\n1394 | \t\t\tawait this.waitForResume()\n1395 | \t\t\tprovider.log(`[subtasks] resumed ${this.taskId}.${this.instanceId}`)\n1396 | \t\t\tconst currentMode = (await provider.getState())?.mode ?? defaultModeSlug\n1397 | \n1398 | \t\t\tif (currentMode !== this.pausedModeSlug) {\n1399 | \t\t\t\t// The mode has changed, we need to switch back to the paused mode.\n1400 | \t\t\t\tawait provider.handleModeSwitch(this.pausedModeSlug)\n1401 | \n1402 | \t\t\t\t// Delay to allow mode change to take effect before next tool is executed.\n1403 | \t\t\t\tawait delay(500)\n1404 | \n1405 | \t\t\t\tprovider.log(\n1406 | \t\t\t\t\t`[subtasks] task ${this.taskId}.${this.instanceId} has switched back to '${this.pausedModeSlug}' from '${currentMode}'`,\n1407 | \t\t\t\t)\n1408 | \t\t\t}\n1409 | \t\t}\n1410 | \n1411 | \t\t// Getting verbose details is an expensive operation, it uses ripgrep to\n1412 | \t\t// top-down build file structure of project which for large projects can\n1413 | \t\t// take a few seconds. For the best UX we show a placeholder api_req_started\n1414 | \t\t// message with a loading spinner as this happens.\n1415 | \n1416 | \t\t// Determine API protocol based on provider and model\n1417 | \t\tconst modelId = getModelId(this.apiConfiguration)\n1418 | \t\tconst apiProtocol = getApiProtocol(this.apiConfiguration.apiProvider, modelId)\n1419 | \n1420 | \t\tawait this.say(\n1421 | \t\t\t\"api_req_started\",\n1422 | \t\t\tJSON.stringify({\n1423 | \t\t\t\trequest:\n1424 | \t\t\t\t\tuserContent.map((block) => formatContentBlockToMarkdown(block)).join(\"\\n\\n\") + \"\\n\\nLoading...\",\n1425 | \t\t\t\tapiProtocol,\n1426 | \t\t\t}),\n1427 | \t\t)\n1428 | \n1429 | \t\tconst {\n1430 | \t\t\tshowRooIgnoredFiles = true,\n1431 | \t\t\tincludeDiagnosticMessages = true,\n1432 | \t\t\tmaxDiagnosticMessages = 50,\n1433 | \t\t\tmaxReadFileLine = -1,\n1434 | \t\t} = (await this.providerRef.deref()?.getState()) ?? {}\n1435 | \n1436 | \t\tconst [parsedUserContent, needsRulesFileCheck] = await processKiloUserContentMentions({\n1437 | \t\t\tcontext: this.context, // kilocode_change\n1438 | \t\t\tuserContent,\n1439 | \t\t\tcwd: this.cwd,\n1440 | \t\t\turlContentFetcher: this.urlContentFetcher,\n1441 | \t\t\tfileContextTracker: this.fileContextTracker,\n1442 | \t\t\trooIgnoreController: this.rooIgnoreController,\n1443 | \t\t\tshowRooIgnoredFiles,\n1444 | \t\t\tincludeDiagnosticMessages,\n1445 | \t\t\tmaxDiagnosticMessages,\n1446 | \t\t\tmaxReadFileLine,\n1447 | \t\t})\n1448 | \n1449 | \t\tif (needsRulesFileCheck) {\n1450 | \t\t\tawait this.say(\n1451 | \t\t\t\t\"error\",\n1452 | \t\t\t\t\"Issue with processing the /newrule command. Double check that, if '.kilocode/rules' already exists, it's a directory and not a file. Otherwise there was an issue referencing this file/directory\",\n1453 | \t\t\t)\n1454 | \t\t}\n1455 | \t\t// kilocode_change end\n1456 | \n1457 | \t\tconst environmentDetails = await getEnvironmentDetails(this, includeFileDetails)\n1458 | \n1459 | \t\t// Add environment details as its own text block, separate from tool\n1460 | \t\t// results.\n1461 | \t\tconst finalUserContent = [...parsedUserContent, { type: \"text\" as const, text: environmentDetails }]\n1462 | \n1463 | \t\tawait this.addToApiConversationHistory({ role: \"user\", content: finalUserContent })\n1464 | \t\tTelemetryService.instance.captureConversationMessage(this.taskId, \"user\")\n1465 | \n1466 | \t\t// Since we sent off a placeholder api_req_started message to update the\n1467 | \t\t// webview while waiting to actually start the API request (to load\n1468 | \t\t// potential details for example), we need to update the text of that\n1469 | \t\t// message.\n1470 | \t\tconst lastApiReqIndex = findLastIndex(this.clineMessages, (m) => m.say === \"api_req_started\")\n1471 | \n1472 | \t\tthis.clineMessages[lastApiReqIndex].text = JSON.stringify({\n1473 | \t\t\trequest: finalUserContent.map((block) => formatContentBlockToMarkdown(block)).join(\"\\n\\n\"),\n1474 | \t\t\tapiProtocol,\n1475 | \t\t} satisfies ClineApiReqInfo)\n1476 | \n1477 | \t\tawait this.saveClineMessages()\n1478 | \t\tawait provider?.postStateToWebview()\n1479 | \n1480 | \t\ttry {\n1481 | \t\t\tlet cacheWriteTokens = 0\n1482 | \t\t\tlet cacheReadTokens = 0\n1483 | \t\t\tlet inputTokens = 0\n1484 | \t\t\tlet outputTokens = 0\n1485 | \t\t\tlet totalCost: number | undefined\n1486 | \t\t\tlet usageMissing = false // kilocode_change\n1487 | \n1488 | \t\t\t// We can't use `api_req_finished` anymore since it's a unique case\n1489 | \t\t\t// where it could come after a streaming message (i.e. in the middle\n1490 | \t\t\t// of being updated or executed).\n1491 | \t\t\t// Fortunately `api_req_finished` was always parsed out for the GUI\n1492 | \t\t\t// anyways, so it remains solely for legacy purposes to keep track\n1493 | \t\t\t// of prices in tasks from history (it's worth removing a few months\n1494 | \t\t\t// from now).\n1495 | \t\t\tconst updateApiReqMsg = (cancelReason?: ClineApiReqCancelReason, streamingFailedMessage?: string) => {\n1496 | \t\t\t\t// kilocode_change start: pending upstream pr https://github.com/RooCodeInc/Roo-Code/pull/6122\n1497 | \t\t\t\tif (lastApiReqIndex < 0 || !this.clineMessages[lastApiReqIndex]) {\n1498 | \t\t\t\t\treturn\n1499 | \t\t\t\t}\n1500 | \t\t\t\t// kilocode_change end\n1501 | \n1502 | \t\t\t\tconst existingData = JSON.parse(this.clineMessages[lastApiReqIndex].text || \"{}\")\n1503 | \t\t\t\tthis.clineMessages[lastApiReqIndex].text = JSON.stringify({\n1504 | \t\t\t\t\t...existingData,\n1505 | \t\t\t\t\ttokensIn: inputTokens,\n1506 | \t\t\t\t\ttokensOut: outputTokens,\n1507 | \t\t\t\t\tcacheWrites: cacheWriteTokens,\n1508 | \t\t\t\t\tcacheReads: cacheReadTokens,\n1509 | \t\t\t\t\tcost:\n1510 | \t\t\t\t\t\ttotalCost ??\n1511 | \t\t\t\t\t\tcalculateApiCostAnthropic(\n1512 | \t\t\t\t\t\t\tthis.api.getModel().info,\n1513 | \t\t\t\t\t\t\tinputTokens,\n1514 | \t\t\t\t\t\t\toutputTokens,\n1515 | \t\t\t\t\t\t\tcacheWriteTokens,\n1516 | \t\t\t\t\t\t\tcacheReadTokens,\n1517 | \t\t\t\t\t\t),\n1518 | \t\t\t\t\tusageMissing, // kilocode_change\n1519 | \t\t\t\t\tcancelReason,\n1520 | \t\t\t\t\tstreamingFailedMessage,\n1521 | \t\t\t\t} satisfies ClineApiReqInfo)\n1522 | \t\t\t}\n1523 | \n1524 | \t\t\tconst abortStream = async (cancelReason: ClineApiReqCancelReason, streamingFailedMessage?: string) => {\n1525 | \t\t\t\tif (this.diffViewProvider.isEditing) {\n1526 | \t\t\t\t\tawait this.diffViewProvider.revertChanges() // closes diff view\n1527 | \t\t\t\t}\n1528 | \n1529 | \t\t\t\t// if last message is a partial we need to update and save it\n1530 | \t\t\t\tconst lastMessage = this.clineMessages.at(-1)\n1531 | \n1532 | \t\t\t\tif (lastMessage && lastMessage.partial) {\n1533 | \t\t\t\t\t// lastMessage.ts = Date.now() DO NOT update ts since it is used as a key for virtuoso list\n1534 | \t\t\t\t\tlastMessage.partial = false\n1535 | \t\t\t\t\t// instead of streaming partialMessage events, we do a save and post like normal to persist to disk\n1536 | \t\t\t\t\tconsole.log(\"updating partial message\", lastMessage)\n1537 | \t\t\t\t\t// await this.saveClineMessages()\n1538 | \t\t\t\t}\n1539 | \n1540 | \t\t\t\t// Let assistant know their response was interrupted for when task is resumed\n1541 | \t\t\t\tawait this.addToApiConversationHistory({\n1542 | \t\t\t\t\trole: \"assistant\",\n1543 | \t\t\t\t\tcontent: [\n1544 | \t\t\t\t\t\t{\n1545 | \t\t\t\t\t\t\ttype: \"text\",\n1546 | \t\t\t\t\t\t\ttext:\n1547 | \t\t\t\t\t\t\t\tassistantMessage +\n1548 | \t\t\t\t\t\t\t\t`\\n\\n[${\n1549 | \t\t\t\t\t\t\t\t\tcancelReason === \"streaming_failed\"\n1550 | \t\t\t\t\t\t\t\t\t\t? \"Response interrupted by API Error\"\n1551 | \t\t\t\t\t\t\t\t\t\t: \"Response interrupted by user\"\n1552 | \t\t\t\t\t\t\t\t}]`,\n1553 | \t\t\t\t\t\t},\n1554 | \t\t\t\t\t],\n1555 | \t\t\t\t})\n1556 | \n1557 | \t\t\t\t// Update `api_req_started` to have cancelled and cost, so that\n1558 | \t\t\t\t// we can display the cost of the partial stream.\n1559 | \t\t\t\tupdateApiReqMsg(cancelReason, streamingFailedMessage)\n1560 | \t\t\t\tawait this.saveClineMessages()\n1561 | \n1562 | \t\t\t\t// Signals to provider that it can retrieve the saved messages\n1563 | \t\t\t\t// from disk, as abortTask can not be awaited on in nature.\n1564 | \t\t\t\tthis.didFinishAbortingStream = true\n1565 | \t\t\t}\n1566 | \n1567 | \t\t\t// Reset streaming state.\n1568 | \t\t\tthis.currentStreamingContentIndex = 0\n1569 | \t\t\tthis.assistantMessageContent = []\n1570 | \t\t\tthis.didCompleteReadingStream = false\n1571 | \t\t\tthis.userMessageContent = []\n1572 | \t\t\tthis.userMessageContentReady = false\n1573 | \t\t\tthis.didRejectTool = false\n1574 | \t\t\tthis.didAlreadyUseTool = false\n1575 | \t\t\tthis.presentAssistantMessageLocked = false\n1576 | \t\t\tthis.presentAssistantMessageHasPendingUpdates = false\n1577 | \n1578 | \t\t\tawait this.diffViewProvider.reset()\n1579 | \n1580 | \t\t\t// Yields only if the first chunk is successful, otherwise will\n1581 | \t\t\t// allow the user to retry the request (most likely due to rate\n1582 | \t\t\t// limit error, which gets thrown on the first chunk).\n1583 | \t\t\tconst stream = this.attemptApiRequest()\n1584 | \t\t\tlet assistantMessage = \"\"\n1585 | \t\t\tlet reasoningMessage = \"\"\n1586 | \t\t\tthis.isStreaming = true\n1587 | \n1588 | \t\t\ttry {\n1589 | \t\t\t\t// kilocode change: use manual iterator instead of for ... of\n1590 | \t\t\t\tconst iterator = stream[Symbol.asyncIterator]()\n1591 | \t\t\t\tlet item = await iterator.next()\n1592 | \t\t\t\twhile (!item.done) {\n1593 | \t\t\t\t\tconst chunk = item.value\n1594 | \t\t\t\t\titem = await iterator.next()\n1595 | \n1596 | \t\t\t\t\tif (!chunk) {\n1597 | \t\t\t\t\t\t// Sometimes chunk is undefined, no idea that can cause\n1598 | \t\t\t\t\t\t// it, but this workaround seems to fix it.\n1599 | \t\t\t\t\t\tcontinue\n1600 | \t\t\t\t\t}\n1601 | \n1602 | \t\t\t\t\tswitch (chunk.type) {\n1603 | \t\t\t\t\t\tcase \"reasoning\":\n1604 | \t\t\t\t\t\t\treasoningMessage += chunk.text\n1605 | \t\t\t\t\t\t\tawait this.say(\"reasoning\", reasoningMessage, undefined, true)\n1606 | \t\t\t\t\t\t\tbreak\n1607 | \t\t\t\t\t\tcase \"usage\":\n1608 | \t\t\t\t\t\t\tinputTokens += chunk.inputTokens\n1609 | \t\t\t\t\t\t\toutputTokens += chunk.outputTokens\n1610 | \t\t\t\t\t\t\tcacheWriteTokens += chunk.cacheWriteTokens ?? 0\n1611 | \t\t\t\t\t\t\tcacheReadTokens += chunk.cacheReadTokens ?? 0\n1612 | \t\t\t\t\t\t\ttotalCost = chunk.totalCost\n1613 | \t\t\t\t\t\t\tbreak\n1614 | \t\t\t\t\t\tcase \"text\": {\n1615 | \t\t\t\t\t\t\tassistantMessage += chunk.text\n1616 | \n1617 | \t\t\t\t\t\t\t// Parse raw assistant message into content blocks.\n1618 | \t\t\t\t\t\t\tconst prevLength = this.assistantMessageContent.length\n1619 | \t\t\t\t\t\t\tthis.assistantMessageContent = parseAssistantMessage(assistantMessage)\n1620 | \n1621 | \t\t\t\t\t\t\tif (this.assistantMessageContent.length > prevLength) {\n1622 | \t\t\t\t\t\t\t\t// New content we need to present, reset to\n1623 | \t\t\t\t\t\t\t\t// false in case previous content set this to true.\n1624 | \t\t\t\t\t\t\t\tthis.userMessageContentReady = false\n1625 | \t\t\t\t\t\t\t}\n1626 | \n1627 | \t\t\t\t\t\t\t// Present content to user.\n1628 | \t\t\t\t\t\t\tpresentAssistantMessage(this)\n1629 | \t\t\t\t\t\t\tbreak\n1630 | \t\t\t\t\t\t}\n1631 | \t\t\t\t\t}\n1632 | \n1633 | \t\t\t\t\tif (this.abort) {\n1634 | \t\t\t\t\t\tconsole.log(`aborting stream, this.abandoned = ${this.abandoned}`)\n1635 | \n1636 | \t\t\t\t\t\tif (!this.abandoned) {\n1637 | \t\t\t\t\t\t\t// Only need to gracefully abort if this instance\n1638 | \t\t\t\t\t\t\t// isn't abandoned (sometimes OpenRouter stream\n1639 | \t\t\t\t\t\t\t// hangs, in which case this would affect future\n1640 | \t\t\t\t\t\t\t// instances of Cline).\n1641 | \t\t\t\t\t\t\tawait abortStream(\"user_cancelled\")\n1642 | \t\t\t\t\t\t}\n1643 | \n1644 | \t\t\t\t\t\tbreak // Aborts the stream.\n1645 | \t\t\t\t\t}\n1646 | \n1647 | \t\t\t\t\tif (this.didRejectTool) {\n1648 | \t\t\t\t\t\t// `userContent` has a tool rejection, so interrupt the\n1649 | \t\t\t\t\t\t// assistant's response to present the user's feedback.\n1650 | \t\t\t\t\t\tassistantMessage += \"\\n\\n[Response interrupted by user feedback]\"\n1651 | \t\t\t\t\t\t// Instead of setting this preemptively, we allow the\n1652 | \t\t\t\t\t\t// present iterator to finish and set\n1653 | \t\t\t\t\t\t// userMessageContentReady when its ready.\n1654 | \t\t\t\t\t\t// this.userMessageContentReady = true\n1655 | \t\t\t\t\t\tbreak\n1656 | \t\t\t\t\t}\n1657 | \n1658 | \t\t\t\t\t// PREV: We need to let the request finish for openrouter to\n1659 | \t\t\t\t\t// get generation details.\n1660 | \t\t\t\t\t// UPDATE: It's better UX to interrupt the request at the\n1661 | \t\t\t\t\t// cost of the API cost not being retrieved.\n1662 | \t\t\t\t\tif (this.didAlreadyUseTool) {\n1663 | \t\t\t\t\t\tassistantMessage +=\n1664 | \t\t\t\t\t\t\t\"\\n\\n[Response interrupted by a tool use result. Only one tool may be used at a time and should be placed at the end of the message.]\"\n1665 | \t\t\t\t\t\tbreak\n1666 | \t\t\t\t\t}\n1667 | \t\t\t\t}\n1668 | \n1669 | \t\t\t\t// kilocode_change start: pending upstream pr https://github.com/RooCodeInc/Roo-Code/pull/6122\n1670 | \t\t\t\t// Create a copy of current token values to avoid race conditions\n1671 | \t\t\t\tconst currentTokens = {\n1672 | \t\t\t\t\tinput: inputTokens,\n1673 | \t\t\t\t\toutput: outputTokens,\n1674 | \t\t\t\t\tcacheWrite: cacheWriteTokens,\n1675 | \t\t\t\t\tcacheRead: cacheReadTokens,\n1676 | \t\t\t\t\ttotal: totalCost,\n1677 | \t\t\t\t}\n1678 | \n1679 | \t\t\t\tconst drainStreamInBackgroundToFindAllUsage = async (apiReqIndex: number) => {\n1680 | \t\t\t\t\tconst timeoutMs = 30_000\n1681 | \t\t\t\t\tconst startTime = performance.now()\n1682 | \n1683 | \t\t\t\t\t// Local variables to accumulate usage data without affecting the main flow\n1684 | \t\t\t\t\tlet bgInputTokens = currentTokens.input\n1685 | \t\t\t\t\tlet bgOutputTokens = currentTokens.output\n1686 | \t\t\t\t\tlet bgCacheWriteTokens = currentTokens.cacheWrite\n1687 | \t\t\t\t\tlet bgCacheReadTokens = currentTokens.cacheRead\n1688 | \t\t\t\t\tlet bgTotalCost = currentTokens.total\n1689 | \n1690 | \t\t\t\t\tconst refreshApiReqMsg = async (messageIndex: number) => {\n1691 | \t\t\t\t\t\t// Update the API request message with the latest usage data\n1692 | \t\t\t\t\t\tupdateApiReqMsg()\n1693 | \t\t\t\t\t\tawait this.saveClineMessages()\n1694 | \n1695 | \t\t\t\t\t\t// Update the specific message in the webview\n1696 | \t\t\t\t\t\tconst apiReqMessage = this.clineMessages[messageIndex]\n1697 | \t\t\t\t\t\tif (apiReqMessage) {\n1698 | \t\t\t\t\t\t\tawait this.updateClineMessage(apiReqMessage)\n1699 | \t\t\t\t\t\t}\n1700 | \t\t\t\t\t}\n1701 | \n1702 | \t\t\t\t\t// Helper function to capture telemetry and update messages\n1703 | \t\t\t\t\tconst captureUsageData = async (\n1704 | \t\t\t\t\t\ttokens: {\n1705 | \t\t\t\t\t\t\tinput: number\n1706 | \t\t\t\t\t\t\toutput: number\n1707 | \t\t\t\t\t\t\tcacheWrite: number\n1708 | \t\t\t\t\t\t\tcacheRead: number\n1709 | \t\t\t\t\t\t\ttotal?: number\n1710 | \t\t\t\t\t\t},\n1711 | \t\t\t\t\t\tmessageIndex: number = apiReqIndex,\n1712 | \t\t\t\t\t) => {\n1713 | \t\t\t\t\t\tif (tokens.input > 0 || tokens.output > 0 || tokens.cacheWrite > 0 || tokens.cacheRead > 0) {\n1714 | \t\t\t\t\t\t\t// Update the shared variables atomically\n1715 | \t\t\t\t\t\t\tinputTokens = tokens.input\n1716 | \t\t\t\t\t\t\toutputTokens = tokens.output\n1717 | \t\t\t\t\t\t\tcacheWriteTokens = tokens.cacheWrite\n1718 | \t\t\t\t\t\t\tcacheReadTokens = tokens.cacheRead\n1719 | \t\t\t\t\t\t\ttotalCost = tokens.total\n1720 | \n1721 | \t\t\t\t\t\t\tawait refreshApiReqMsg(messageIndex)\n1722 | \n1723 | \t\t\t\t\t\t\t// Capture telemetry\n1724 | \t\t\t\t\t\t\tTelemetryService.instance.captureLlmCompletion(this.taskId, {\n1725 | \t\t\t\t\t\t\t\tinputTokens: tokens.input,\n1726 | \t\t\t\t\t\t\t\toutputTokens: tokens.output,\n1727 | \t\t\t\t\t\t\t\tcacheWriteTokens: tokens.cacheWrite,\n1728 | \t\t\t\t\t\t\t\tcacheReadTokens: tokens.cacheRead,\n1729 | \t\t\t\t\t\t\t\tcost:\n1730 | \t\t\t\t\t\t\t\t\ttokens.total ??\n1731 | \t\t\t\t\t\t\t\t\tcalculateApiCostAnthropic(\n1732 | \t\t\t\t\t\t\t\t\t\tthis.api.getModel().info,\n1733 | \t\t\t\t\t\t\t\t\t\ttokens.input,\n1734 | \t\t\t\t\t\t\t\t\t\ttokens.output,\n1735 | \t\t\t\t\t\t\t\t\t\ttokens.cacheWrite,\n1736 | \t\t\t\t\t\t\t\t\t\ttokens.cacheRead,\n1737 | \t\t\t\t\t\t\t\t\t),\n1738 | \t\t\t\t\t\t\t})\n1739 | \t\t\t\t\t\t}\n1740 | \t\t\t\t\t}\n1741 | \n1742 | \t\t\t\t\ttry {\n1743 | \t\t\t\t\t\tconst modelId = this.api.getModel().id\n1744 | \t\t\t\t\t\tlet chunkCount = 0\n1745 | \t\t\t\t\t\twhile (!item.done) {\n1746 | \t\t\t\t\t\t\t// Check for timeout\n1747 | \t\t\t\t\t\t\tconst time = performance.now() - startTime\n1748 | \t\t\t\t\t\t\tif (this.abort || time > timeoutMs) {\n1749 | \t\t\t\t\t\t\t\tconsole.warn(\n1750 | \t\t\t\t\t\t\t\t\t`[Background Usage Collection] Cancelled after ${time}ms for model: ${modelId}, processed ${chunkCount} chunks`,\n1751 | \t\t\t\t\t\t\t\t)\n1752 | \t\t\t\t\t\t\t\tawait iterator.return(undefined)\n1753 | \t\t\t\t\t\t\t\tbreak\n1754 | \t\t\t\t\t\t\t}\n1755 | \n1756 | \t\t\t\t\t\t\tconst chunk = item.value\n1757 | \t\t\t\t\t\t\titem = await iterator.next()\n1758 | \t\t\t\t\t\t\tchunkCount++\n1759 | \n1760 | \t\t\t\t\t\t\tif (chunk && chunk.type === \"usage\") {\n1761 | \t\t\t\t\t\t\t\tbgInputTokens += chunk.inputTokens\n1762 | \t\t\t\t\t\t\t\tbgOutputTokens += chunk.outputTokens\n1763 | \t\t\t\t\t\t\t\tbgCacheWriteTokens += chunk.cacheWriteTokens ?? 0\n1764 | \t\t\t\t\t\t\t\tbgCacheReadTokens += chunk.cacheReadTokens ?? 0\n1765 | \t\t\t\t\t\t\t\tbgTotalCost = chunk.totalCost\n1766 | \t\t\t\t\t\t\t}\n1767 | \t\t\t\t\t\t}\n1768 | \n1769 | \t\t\t\t\t\tif (\n1770 | \t\t\t\t\t\t\tbgInputTokens > 0 ||\n1771 | \t\t\t\t\t\t\tbgOutputTokens > 0 ||\n1772 | \t\t\t\t\t\t\tbgCacheWriteTokens > 0 ||\n1773 | \t\t\t\t\t\t\tbgCacheReadTokens > 0\n1774 | \t\t\t\t\t\t) {\n1775 | \t\t\t\t\t\t\t// We have some usage data even if we didn't find a usage chunk\n1776 | \t\t\t\t\t\t\tawait captureUsageData(\n1777 | \t\t\t\t\t\t\t\t{\n1778 | \t\t\t\t\t\t\t\t\tinput: bgInputTokens,\n1779 | \t\t\t\t\t\t\t\t\toutput: bgOutputTokens,\n1780 | \t\t\t\t\t\t\t\t\tcacheWrite: bgCacheWriteTokens,\n1781 | \t\t\t\t\t\t\t\t\tcacheRead: bgCacheReadTokens,\n1782 | \t\t\t\t\t\t\t\t\ttotal: bgTotalCost,\n1783 | \t\t\t\t\t\t\t\t},\n1784 | \t\t\t\t\t\t\t\tlastApiReqIndex,\n1785 | \t\t\t\t\t\t\t)\n1786 | \t\t\t\t\t\t} else {\n1787 | \t\t\t\t\t\t\tconsole.warn(\n1788 | \t\t\t\t\t\t\t\t`[Background Usage Collection] Suspicious: request ${apiReqIndex} is complete, but no usage info was found. Model: ${modelId}`,\n1789 | \t\t\t\t\t\t\t)\n1790 | \t\t\t\t\t\t\tusageMissing = true\n1791 | \t\t\t\t\t\t\tawait refreshApiReqMsg(apiReqIndex)\n1792 | \t\t\t\t\t\t}\n1793 | \t\t\t\t\t} catch (error) {\n1794 | \t\t\t\t\t\tconsole.error(\"Error draining stream for usage data:\", error)\n1795 | \t\t\t\t\t\t// Still try to capture whatever usage data we have collected so far\n1796 | \t\t\t\t\t\tif (\n1797 | \t\t\t\t\t\t\tbgInputTokens > 0 ||\n1798 | \t\t\t\t\t\t\tbgOutputTokens > 0 ||\n1799 | \t\t\t\t\t\t\tbgCacheWriteTokens > 0 ||\n1800 | \t\t\t\t\t\t\tbgCacheReadTokens > 0\n1801 | \t\t\t\t\t\t) {\n1802 | \t\t\t\t\t\t\tawait captureUsageData(\n1803 | \t\t\t\t\t\t\t\t{\n1804 | \t\t\t\t\t\t\t\t\tinput: bgInputTokens,\n1805 | \t\t\t\t\t\t\t\t\toutput: bgOutputTokens,\n1806 | \t\t\t\t\t\t\t\t\tcacheWrite: bgCacheWriteTokens,\n1807 | \t\t\t\t\t\t\t\t\tcacheRead: bgCacheReadTokens,\n1808 | \t\t\t\t\t\t\t\t\ttotal: bgTotalCost,\n1809 | \t\t\t\t\t\t\t\t},\n1810 | \t\t\t\t\t\t\t\tlastApiReqIndex,\n1811 | \t\t\t\t\t\t\t)\n1812 | \t\t\t\t\t\t} else {\n1813 | \t\t\t\t\t\t\tusageMissing = true\n1814 | \t\t\t\t\t\t\tawait refreshApiReqMsg(apiReqIndex)\n1815 | \t\t\t\t\t\t}\n1816 | \t\t\t\t\t}\n1817 | \t\t\t\t}\n1818 | \n1819 | \t\t\t\t// Start the background task and handle any errors\n1820 | \t\t\t\tdrainStreamInBackgroundToFindAllUsage(lastApiReqIndex).catch((error) => {\n1821 | \t\t\t\t\tconsole.error(\"Background usage collection failed:\", error)\n1822 | \t\t\t\t})\n1823 | \t\t\t\t// kilocode_change end\n1824 | \t\t\t} catch (error) {\n1825 | \t\t\t\t// kilocode_change start\n1826 | \t\t\t\tTelemetryService.instance.captureException(error, {\n1827 | \t\t\t\t\tabandoned: this.abandoned,\n1828 | \t\t\t\t\tabort: this.abort,\n1829 | \t\t\t\t\tcontext: \"recursivelyMakeClineRequests\",\n1830 | \t\t\t\t})\n1831 | \t\t\t\t// kilocode_change end\n1832 | \n1833 | \t\t\t\t// Abandoned happens when extension is no longer waiting for the\n1834 | \t\t\t\t// Cline instance to finish aborting (error is thrown here when\n1835 | \t\t\t\t// any function in the for loop throws due to this.abort).\n1836 | \t\t\t\tif (!this.abandoned) {\n1837 | \t\t\t\t\t// If the stream failed, there's various states the task\n1838 | \t\t\t\t\t// could be in (i.e. could have streamed some tools the user\n1839 | \t\t\t\t\t// may have executed), so we just resort to replicating a\n1840 | \t\t\t\t\t// cancel task.\n1841 | \n1842 | \t\t\t\t\t// Check if this was a user-initiated cancellation BEFORE calling abortTask\n1843 | \t\t\t\t\t// If this.abort is already true, it means the user clicked cancel, so we should\n1844 | \t\t\t\t\t// treat this as \"user_cancelled\" rather than \"streaming_failed\"\n1845 | \t\t\t\t\tconst cancelReason = this.abort ? \"user_cancelled\" : \"streaming_failed\"\n1846 | \t\t\t\t\tconst streamingFailedMessage = this.abort\n1847 | \t\t\t\t\t\t? undefined\n1848 | \t\t\t\t\t\t: (error.message ?? JSON.stringify(serializeError(error), null, 2))\n1849 | \n1850 | \t\t\t\t\t// Now call abortTask after determining the cancel reason\n1851 | \t\t\t\t\tawait this.abortTask()\n1852 | \n1853 | \t\t\t\t\tawait abortStream(cancelReason, streamingFailedMessage)\n1854 | \n1855 | \t\t\t\t\tconst history = await provider?.getTaskWithId(this.taskId)\n1856 | \n1857 | \t\t\t\t\tif (history) {\n1858 | \t\t\t\t\t\tawait provider?.initClineWithHistoryItem(history.historyItem)\n1859 | \t\t\t\t\t}\n1860 | \t\t\t\t}\n1861 | \t\t\t} finally {\n1862 | \t\t\t\tthis.isStreaming = false\n1863 | \t\t\t}\n1864 | \n1865 | \t\t\t// kilocode_change: pending upstream pr https://github.com/RooCodeInc/Roo-Code/pull/6122\n1866 | \t\t\t//if (inputTokens > 0 || outputTokens > 0 || cacheWriteTokens > 0 || cacheReadTokens > 0) {\n1867 | \t\t\t//\tTelemetryService.instance.captureLlmCompletion(this.taskId, {\n1868 | \t\t\t//\t\tinputTokens,\n1869 | \t\t\t//\t\toutputTokens,\n1870 | \t\t\t//\t\tcacheWriteTokens,\n1871 | \t\t\t//\t\tcacheReadTokens,\n1872 | \t\t\t//\t\tcost:\n1873 | \t\t\t//\t\t\ttotalCost ??\n1874 | \t\t\t//\t\t\tcalculateApiCostAnthropic(\n1875 | \t\t\t//\t\t\t\tthis.api.getModel().info,\n1876 | \t\t\t//\t\t\t\tinputTokens,\n1877 | \t\t\t//\t\t\t\toutputTokens,\n1878 | \t\t\t//\t\t\t\tcacheWriteTokens,\n1879 | \t\t\t//\t\t\t\tcacheReadTokens,\n1880 | \t\t\t//\t\t\t),\n1881 | \t\t\t//\t})\n1882 | \t\t\t//}\n1883 | \n1884 | \t\t\t// Need to call here in case the stream was aborted.\n1885 | \t\t\tif (this.abort || this.abandoned) {\n1886 | \t\t\t\tthrow new Error(\n1887 | \t\t\t\t\t`[KiloCode#recursivelyMakeClineRequests] task ${this.taskId}.${this.instanceId} aborted`,\n1888 | \t\t\t\t)\n1889 | \t\t\t}\n1890 | \n1891 | \t\t\tthis.didCompleteReadingStream = true\n1892 | \n1893 | \t\t\t// Set any blocks to be complete to allow `presentAssistantMessage`\n1894 | \t\t\t// to finish and set `userMessageContentReady` to true.\n1895 | \t\t\t// (Could be a text block that had no subsequent tool uses, or a\n1896 | \t\t\t// text block at the very end, or an invalid tool use, etc. Whatever\n1897 | \t\t\t// the case, `presentAssistantMessage` relies on these blocks either\n1898 | \t\t\t// to be completed or the user to reject a block in order to proceed\n1899 | \t\t\t// and eventually set userMessageContentReady to true.)\n1900 | \t\t\tconst partialBlocks = this.assistantMessageContent.filter((block) => block.partial)\n1901 | \t\t\tpartialBlocks.forEach((block) => (block.partial = false))\n1902 | \n1903 | \t\t\t// Can't just do this b/c a tool could be in the middle of executing.\n1904 | \t\t\t// this.assistantMessageContent.forEach((e) => (e.partial = false))\n1905 | \n1906 | \t\t\tif (partialBlocks.length > 0) {\n1907 | \t\t\t\t// If there is content to update then it will complete and\n1908 | \t\t\t\t// update `this.userMessageContentReady` to true, which we\n1909 | \t\t\t\t// `pWaitFor` before making the next request. All this is really\n1910 | \t\t\t\t// doing is presenting the last partial message that we just set\n1911 | \t\t\t\t// to complete.\n1912 | \t\t\t\tpresentAssistantMessage(this)\n1913 | \t\t\t}\n1914 | \n1915 | \t\t\tupdateApiReqMsg()\n1916 | \t\t\tawait this.saveClineMessages()\n1917 | \t\t\tawait this.providerRef.deref()?.postStateToWebview()\n1918 | \n1919 | \t\t\t// Now add to apiConversationHistory.\n1920 | \t\t\t// Need to save assistant responses to file before proceeding to\n1921 | \t\t\t// tool use since user can exit at any moment and we wouldn't be\n1922 | \t\t\t// able to save the assistant's response.\n1923 | \t\t\tlet didEndLoop = false\n1924 | \n1925 | \t\t\tif (assistantMessage.length > 0) {\n1926 | \t\t\t\tawait this.addToApiConversationHistory({\n1927 | \t\t\t\t\trole: \"assistant\",\n1928 | \t\t\t\t\tcontent: [{ type: \"text\", text: assistantMessage }],\n1929 | \t\t\t\t})\n1930 | \n1931 | \t\t\t\tTelemetryService.instance.captureConversationMessage(this.taskId, \"assistant\")\n1932 | \n1933 | \t\t\t\t// NOTE: This comment is here for future reference - this was a\n1934 | \t\t\t\t// workaround for `userMessageContent` not getting set to true.\n1935 | \t\t\t\t// It was due to it not recursively calling for partial blocks\n1936 | \t\t\t\t// when `didRejectTool`, so it would get stuck waiting for a\n1937 | \t\t\t\t// partial block to complete before it could continue.\n1938 | \t\t\t\t// In case the content blocks finished it may be the api stream\n1939 | \t\t\t\t// finished after the last parsed content block was executed, so\n1940 | \t\t\t\t// we are able to detect out of bounds and set\n1941 | \t\t\t\t// `userMessageContentReady` to true (note you should not call\n1942 | \t\t\t\t// `presentAssistantMessage` since if the last block i\n1943 | \t\t\t\t//  completed it will be presented again).\n1944 | \t\t\t\t// const completeBlocks = this.assistantMessageContent.filter((block) => !block.partial) // If there are any partial blocks after the stream ended we can consider them invalid.\n1945 | \t\t\t\t// if (this.currentStreamingContentIndex >= completeBlocks.length) {\n1946 | \t\t\t\t// \tthis.userMessageContentReady = true\n1947 | \t\t\t\t// }\n1948 | \n1949 | \t\t\t\tawait pWaitFor(() => this.userMessageContentReady)\n1950 | \n1951 | \t\t\t\t// If the model did not tool use, then we need to tell it to\n1952 | \t\t\t\t// either use a tool or attempt_completion.\n1953 | \t\t\t\tconst didToolUse = this.assistantMessageContent.some((block) => block.type === \"tool_use\")\n1954 | \n1955 | \t\t\t\tif (!didToolUse) {\n1956 | \t\t\t\t\tthis.userMessageContent.push({ type: \"text\", text: formatResponse.noToolsUsed() })\n1957 | \t\t\t\t\tthis.consecutiveMistakeCount++\n1958 | \t\t\t\t}\n1959 | \n1960 | \t\t\t\t// kilocode_change start: prevent excessive recursion\n1961 | \t\t\t\t// e.g. https://github.com/RooCodeInc/Roo-Code/issues/5601#issuecomment-3120612488\n1962 | \t\t\t\tawait yieldPromise()\n1963 | \t\t\t\tconst recDidEndLoop = await this.recursivelyMakeClineRequests(\n1964 | \t\t\t\t\tthis.userMessageContent,\n1965 | \t\t\t\t\tundefined,\n1966 | \t\t\t\t\trecursionDepth + 1,\n1967 | \t\t\t\t)\n1968 | \t\t\t\t// kilocode_change end\n1969 | \t\t\t\tdidEndLoop = recDidEndLoop\n1970 | \t\t\t} else {\n1971 | \t\t\t\t// If there's no assistant_responses, that means we got no text\n1972 | \t\t\t\t// or tool_use content blocks from API which we should assume is\n1973 | \t\t\t\t// an error.\n1974 | \t\t\t\tawait this.say(\n1975 | \t\t\t\t\t\"error\",\n1976 | \t\t\t\t\t\"Unexpected API Response: The language model did not provide any assistant messages. This may indicate an issue with the API or the model's output.\",\n1977 | \t\t\t\t)\n1978 | \n1979 | \t\t\t\tawait this.addToApiConversationHistory({\n1980 | \t\t\t\t\trole: \"assistant\",\n1981 | \t\t\t\t\tcontent: [{ type: \"text\", text: \"Failure: I did not provide a response.\" }],\n1982 | \t\t\t\t})\n1983 | \t\t\t}\n1984 | \n1985 | \t\t\treturn didEndLoop // Will always be false for now.\n1986 | \t\t} catch (error) {\n1987 | \t\t\t// This should never happen since the only thing that can throw an\n1988 | \t\t\t// error is the attemptApiRequest, which is wrapped in a try catch\n1989 | \t\t\t// that sends an ask where if noButtonClicked, will clear current\n1990 | \t\t\t// task and destroy this instance. However to avoid unhandled\n1991 | \t\t\t// promise rejection, we will end this loop which will end execution\n1992 | \t\t\t// of this instance (see `startTask`).\n1993 | \t\t\treturn true // Needs to be true so parent loop knows to end task.\n1994 | \t\t}\n1995 | \t}\n1996 | \n1997 | \t// kilocode_change start\n1998 | \tasync loadContext(\n1999 | \t\tuserContent: UserContent,\n2000 | \t\tincludeFileDetails: boolean = false,\n2001 | \t): Promise<[UserContent, string, boolean]> {\n2002 | \t\t// Track if we need to check clinerulesFile\n2003 | \t\tlet needsClinerulesFileCheck = false\n2004 | \n2005 | \t\t// bookmark\n2006 | \t\tconst { localWorkflowToggles, globalWorkflowToggles } = await refreshWorkflowToggles(\n2007 | \t\t\tthis.getContext(),\n2008 | \t\t\tthis.cwd,\n2009 | \t\t)\n2010 | \n2011 | \t\tconst processUserContent = async () => {\n2012 | \t\t\t// This is a temporary solution to dynamically load context mentions from tool results. It checks for the presence of tags that indicate that the tool was rejected and feedback was provided (see formatToolDeniedFeedback, attemptCompletion, executeCommand, and consecutiveMistakeCount >= 3) or \"<answer>\" (see askFollowupQuestion), we place all user generated content in these tags so they can effectively be used as markers for when we should parse mentions). However if we allow multiple tools responses in the future, we will need to parse mentions specifically within the user content tags.\n2013 | \t\t\t// (Note: this caused the @/ import alias bug where file contents were being parsed as well, since v2 converted tool results to text blocks)\n2014 | \t\t\treturn await Promise.all(\n2015 | \t\t\t\tuserContent.map(async (block) => {\n2016 | \t\t\t\t\tif (block.type === \"text\") {\n2017 | \t\t\t\t\t\t// We need to ensure any user generated content is wrapped in one of these tags so that we know to parse mentions\n2018 | \t\t\t\t\t\t// FIXME: Only parse text in between these tags instead of the entire text block which may contain other tool results. This is part of a larger issue where we shouldn't be using regex to parse mentions in the first place (ie for cases where file paths have spaces)\n2019 | \t\t\t\t\t\tif (\n2020 | \t\t\t\t\t\t\tblock.text.includes(\"<feedback>\") ||\n2021 | \t\t\t\t\t\t\tblock.text.includes(\"<answer>\") ||\n2022 | \t\t\t\t\t\t\tblock.text.includes(\"<task>\") ||\n2023 | \t\t\t\t\t\t\tblock.text.includes(\"<user_message>\")\n2024 | \t\t\t\t\t\t) {\n2025 | \t\t\t\t\t\t\tconst parsedText = await parseMentions(\n2026 | \t\t\t\t\t\t\t\tblock.text,\n2027 | \t\t\t\t\t\t\t\tthis.cwd,\n2028 | \t\t\t\t\t\t\t\tthis.urlContentFetcher,\n2029 | \t\t\t\t\t\t\t\tthis.fileContextTracker,\n2030 | \t\t\t\t\t\t\t)\n2031 | \n2032 | \t\t\t\t\t\t\t// when parsing slash commands, we still want to allow the user to provide their desired context\n2033 | \t\t\t\t\t\t\tconst { processedText, needsRulesFileCheck: needsCheck } = await parseKiloSlashCommands(\n2034 | \t\t\t\t\t\t\t\tparsedText,\n2035 | \t\t\t\t\t\t\t\tlocalWorkflowToggles,\n2036 | \t\t\t\t\t\t\t\tglobalWorkflowToggles,\n2037 | \t\t\t\t\t\t\t)\n2038 | \n2039 | \t\t\t\t\t\t\tif (needsCheck) {\n2040 | \t\t\t\t\t\t\t\tneedsClinerulesFileCheck = true\n2041 | \t\t\t\t\t\t\t}\n2042 | \n2043 | \t\t\t\t\t\t\treturn {\n2044 | \t\t\t\t\t\t\t\t...block,\n2045 | \t\t\t\t\t\t\t\ttext: processedText,\n2046 | \t\t\t\t\t\t\t}\n2047 | \t\t\t\t\t\t}\n2048 | \t\t\t\t\t}\n2049 | \t\t\t\t\treturn block\n2050 | \t\t\t\t}),\n2051 | \t\t\t)\n2052 | \t\t}\n2053 | \n2054 | \t\t// Run initial promises in parallel\n2055 | \t\tconst [processedUserContent, environmentDetails] = await Promise.all([\n2056 | \t\t\tprocessUserContent(),\n2057 | \t\t\tgetEnvironmentDetails(this, includeFileDetails),\n2058 | \t\t])\n2059 | \t\t// const [parsedUserContent, environmentDetails, clinerulesError] = await this.loadContext(\n2060 | \t\t// \tuserContent,\n2061 | \t\t// \tincludeFileDetails,\n2062 | \t\t// )\n2063 | \n2064 | \t\t// After processing content, check clinerulesData if needed\n2065 | \t\tlet clinerulesError = false\n2066 | \t\tif (needsClinerulesFileCheck) {\n2067 | \t\t\tclinerulesError = await ensureLocalKilorulesDirExists(this.cwd, GlobalFileNames.kiloRules)\n2068 | \t\t}\n2069 | \n2070 | \t\t// Return all results\n2071 | \t\treturn [processedUserContent, environmentDetails, clinerulesError]\n2072 | \t}\n2073 | \t// kilocode_change end\n2074 | \n2075 | \t/*private kilocode_change*/ async getSystemPrompt(): Promise<string> {\n2076 | \t\tconst { mcpEnabled } = (await this.providerRef.deref()?.getState()) ?? {}\n2077 | \t\tlet mcpHub: McpHub | undefined\n2078 | \t\tif (mcpEnabled ?? true) {\n2079 | \t\t\tconst provider = this.providerRef.deref()\n2080 | \n2081 | \t\t\tif (!provider) {\n2082 | \t\t\t\tthrow new Error(\"Provider reference lost during view transition\")\n2083 | \t\t\t}\n2084 | \n2085 | \t\t\t// Wait for MCP hub initialization through McpServerManager\n2086 | \t\t\tmcpHub = await McpServerManager.getInstance(provider.context, provider)\n2087 | \n2088 | \t\t\tif (!mcpHub) {\n2089 | \t\t\t\tthrow new Error(\"Failed to get MCP hub from server manager\")\n2090 | \t\t\t}\n2091 | \n2092 | \t\t\t// Wait for MCP servers to be connected before generating system prompt\n2093 | \t\t\tawait pWaitFor(() => !mcpHub!.isConnecting, { timeout: 10_000 }).catch(() => {\n2094 | \t\t\t\tconsole.error(\"MCP servers failed to connect in time\")\n2095 | \t\t\t})\n2096 | \t\t}\n2097 | \n2098 | \t\tconst rooIgnoreInstructions = this.rooIgnoreController?.getInstructions()\n2099 | \n2100 | \t\tconst state = await this.providerRef.deref()?.getState()\n2101 | \n2102 | \t\tconst {\n2103 | \t\t\tbrowserViewportSize,\n2104 | \t\t\tmode,\n2105 | \t\t\tcustomModes,\n2106 | \t\t\tcustomModePrompts,\n2107 | \t\t\tcustomInstructions,\n2108 | \t\t\texperiments,\n2109 | \t\t\tenableMcpServerCreation,\n2110 | \t\t\tbrowserToolEnabled,\n2111 | \t\t\tlanguage,\n2112 | \t\t\tmaxConcurrentFileReads,\n2113 | \t\t\tmaxReadFileLine,\n2114 | \t\t\tapiConfiguration,\n2115 | \t\t} = state ?? {}\n2116 | \n2117 | \t\treturn await (async () => {\n2118 | \t\t\tconst provider = this.providerRef.deref()\n2119 | \n2120 | \t\t\tif (!provider) {\n2121 | \t\t\t\tthrow new Error(\"Provider not available\")\n2122 | \t\t\t}\n2123 | \n2124 | \t\t\treturn SYSTEM_PROMPT(\n2125 | \t\t\t\tprovider.context,\n2126 | \t\t\t\tthis.cwd,\n2127 | \t\t\t\t// kilocode_change: supports images => supports browser\n2128 | \t\t\t\t(this.api.getModel().info.supportsImages ?? false) && (browserToolEnabled ?? true),\n2129 | \t\t\t\tmcpHub,\n2130 | \t\t\t\tthis.diffStrategy,\n2131 | \t\t\t\tbrowserViewportSize,\n2132 | \t\t\t\tmode,\n2133 | \t\t\t\tcustomModePrompts,\n2134 | \t\t\t\tcustomModes,\n2135 | \t\t\t\tcustomInstructions,\n2136 | \t\t\t\tthis.diffEnabled,\n2137 | \t\t\t\texperiments,\n2138 | \t\t\t\tenableMcpServerCreation,\n2139 | \t\t\t\tlanguage,\n2140 | \t\t\t\trooIgnoreInstructions,\n2141 | \t\t\t\tmaxReadFileLine !== -1,\n2142 | \t\t\t\t{\n2143 | \t\t\t\t\tmaxConcurrentFileReads: maxConcurrentFileReads ?? 5,\n2144 | \t\t\t\t\ttodoListEnabled: apiConfiguration?.todoListEnabled ?? true,\n2145 | \t\t\t\t\tuseAgentRules: vscode.workspace.getConfiguration(\"roo-cline\").get<boolean>(\"useAgentRules\") ?? true,\n2146 | \t\t\t\t},\n2147 | \t\t\t)\n2148 | \t\t})()\n2149 | \t}\n2150 | \n2151 | \tpublic async *attemptApiRequest(retryAttempt: number = 0): ApiStream {\n2152 | \t\tconst state = await this.providerRef.deref()?.getState()\n2153 | \n2154 | \t\tconst {\n2155 | \t\t\tapiConfiguration,\n2156 | \t\t\tautoApprovalEnabled,\n2157 | \t\t\talwaysApproveResubmit,\n2158 | \t\t\trequestDelaySeconds,\n2159 | \t\t\tmode,\n2160 | \t\t\tautoCondenseContext = true,\n2161 | \t\t\tautoCondenseContextPercent = 100,\n2162 | \t\t\tprofileThresholds = {},\n2163 | \t\t} = state ?? {}\n2164 | \n2165 | \t\t// Get condensing configuration for automatic triggers.\n2166 | \t\tconst customCondensingPrompt = state?.customCondensingPrompt\n2167 | \t\tconst condensingApiConfigId = state?.condensingApiConfigId\n2168 | \t\tconst listApiConfigMeta = state?.listApiConfigMeta\n2169 | \n2170 | \t\t// Determine API handler to use for condensing.\n2171 | \t\tlet condensingApiHandler: ApiHandler | undefined\n2172 | \n2173 | \t\tif (condensingApiConfigId && listApiConfigMeta && Array.isArray(listApiConfigMeta)) {\n2174 | \t\t\t// Using type assertion for the id property to avoid implicit any.\n2175 | \t\t\tconst matchingConfig = listApiConfigMeta.find((config: any) => config.id === condensingApiConfigId)\n2176 | \n2177 | \t\t\tif (matchingConfig) {\n2178 | \t\t\t\tconst profile = await this.providerRef.deref()?.providerSettingsManager.getProfile({\n2179 | \t\t\t\t\tid: condensingApiConfigId,\n2180 | \t\t\t\t})\n2181 | \n2182 | \t\t\t\t// Ensure profile and apiProvider exist before trying to build handler.\n2183 | \t\t\t\tif (profile && profile.apiProvider) {\n2184 | \t\t\t\t\tcondensingApiHandler = buildApiHandler(profile)\n2185 | \t\t\t\t}\n2186 | \t\t\t}\n2187 | \t\t}\n2188 | \n2189 | \t\tlet rateLimitDelay = 0\n2190 | \n2191 | \t\t// Use the shared timestamp so that subtasks respect the same rate-limit\n2192 | \t\t// window as their parent tasks.\n2193 | \t\tif (Task.lastGlobalApiRequestTime) {\n2194 | \t\t\tconst now = Date.now()\n2195 | \t\t\tconst timeSinceLastRequest = now - Task.lastGlobalApiRequestTime\n2196 | \t\t\tconst rateLimit = apiConfiguration?.rateLimitSeconds || 0\n2197 | \t\t\trateLimitDelay = Math.ceil(Math.max(0, rateLimit * 1000 - timeSinceLastRequest) / 1000)\n2198 | \t\t}\n2199 | \n2200 | \t\t// Only show rate limiting message if we're not retrying. If retrying, we'll include the delay there.\n2201 | \t\tif (rateLimitDelay > 0 && retryAttempt === 0) {\n2202 | \t\t\t// Show countdown timer\n2203 | \t\t\tfor (let i = rateLimitDelay; i > 0; i--) {\n2204 | \t\t\t\tconst delayMessage = `Rate limiting for ${i} seconds...`\n2205 | \t\t\t\tawait this.say(\"api_req_retry_delayed\", delayMessage, undefined, true)\n2206 | \t\t\t\tawait delay(1000)\n2207 | \t\t\t}\n2208 | \t\t}\n2209 | \n2210 | \t\t// Update last request time before making the request so that subsequent\n2211 | \t\t// requests — even from new subtasks — will honour the provider's rate-limit.\n2212 | \t\tTask.lastGlobalApiRequestTime = Date.now()\n2213 | \n2214 | \t\tconst systemPrompt = await this.getSystemPrompt()\n2215 | \t\tconst { contextTokens } = this.getTokenUsage()\n2216 | \n2217 | \t\tif (contextTokens) {\n2218 | \t\t\tconst modelInfo = this.api.getModel().info\n2219 | \n2220 | \t\t\tconst maxTokens = getModelMaxOutputTokens({\n2221 | \t\t\t\tmodelId: this.api.getModel().id,\n2222 | \t\t\t\tmodel: modelInfo,\n2223 | \t\t\t\tsettings: this.apiConfiguration,\n2224 | \t\t\t})\n2225 | \n2226 | \t\t\tconst contextWindow = modelInfo.contextWindow\n2227 | \n2228 | \t\t\tconst currentProfileId =\n2229 | \t\t\t\tstate?.listApiConfigMeta.find((profile) => profile.name === state?.currentApiConfigName)?.id ??\n2230 | \t\t\t\t\"default\"\n2231 | \n2232 | \t\t\tconst truncateResult = await truncateConversationIfNeeded({\n2233 | \t\t\t\tmessages: this.apiConversationHistory,\n2234 | \t\t\t\ttotalTokens: contextTokens,\n2235 | \t\t\t\tmaxTokens,\n2236 | \t\t\t\tcontextWindow,\n2237 | \t\t\t\tapiHandler: this.api,\n2238 | \t\t\t\tautoCondenseContext,\n2239 | \t\t\t\tautoCondenseContextPercent,\n2240 | \t\t\t\tsystemPrompt,\n2241 | \t\t\t\ttaskId: this.taskId,\n2242 | \t\t\t\tcustomCondensingPrompt,\n2243 | \t\t\t\tcondensingApiHandler,\n2244 | \t\t\t\tprofileThresholds,\n2245 | \t\t\t\tcurrentProfileId,\n2246 | \t\t\t})\n2247 | \t\t\tif (truncateResult.messages !== this.apiConversationHistory) {\n2248 | \t\t\t\tawait this.overwriteApiConversationHistory(truncateResult.messages)\n2249 | \t\t\t}\n2250 | \t\t\tif (truncateResult.error) {\n2251 | \t\t\t\tawait this.say(\"condense_context_error\", truncateResult.error)\n2252 | \t\t\t} else if (truncateResult.summary) {\n2253 | \t\t\t\tconst { summary, cost, prevContextTokens, newContextTokens = 0 } = truncateResult\n2254 | \t\t\t\tconst contextCondense: ContextCondense = { summary, cost, newContextTokens, prevContextTokens }\n2255 | \t\t\t\tawait this.say(\n2256 | \t\t\t\t\t\"condense_context\",\n2257 | \t\t\t\t\tundefined /* text */,\n2258 | \t\t\t\t\tundefined /* images */,\n2259 | \t\t\t\t\tfalse /* partial */,\n2260 | \t\t\t\t\tundefined /* checkpoint */,\n2261 | \t\t\t\t\tundefined /* progressStatus */,\n2262 | \t\t\t\t\t{ isNonInteractive: true } /* options */,\n2263 | \t\t\t\t\tcontextCondense,\n2264 | \t\t\t\t)\n2265 | \t\t\t}\n2266 | \t\t}\n2267 | \n2268 | \t\tconst messagesSinceLastSummary = getMessagesSinceLastSummary(this.apiConversationHistory)\n2269 | \t\tconst cleanConversationHistory = maybeRemoveImageBlocks(messagesSinceLastSummary, this.api).map(\n2270 | \t\t\t({ role, content }) => ({ role, content }),\n2271 | \t\t)\n2272 | \n2273 | \t\t// Check if we've reached the maximum number of auto-approved requests\n2274 | \t\tconst maxRequests = state?.allowedMaxRequests || Infinity\n2275 | \n2276 | \t\t// Increment the counter for each new API request\n2277 | \t\tthis.consecutiveAutoApprovedRequestsCount++\n2278 | \n2279 | \t\tif (this.consecutiveAutoApprovedRequestsCount > maxRequests) {\n2280 | \t\t\tconst { response } = await this.ask(\"auto_approval_max_req_reached\", JSON.stringify({ count: maxRequests }))\n2281 | \t\t\t// If we get past the promise, it means the user approved and did not start a new task\n2282 | \t\t\tif (response === \"yesButtonClicked\") {\n2283 | \t\t\t\tthis.consecutiveAutoApprovedRequestsCount = 0\n2284 | \t\t\t}\n2285 | \t\t}\n2286 | \n2287 | \t\tconst metadata: ApiHandlerCreateMessageMetadata = {\n2288 | \t\t\tmode: mode,\n2289 | \t\t\ttaskId: this.taskId,\n2290 | \t\t}\n2291 | \n2292 | \t\tconst stream = this.api.createMessage(systemPrompt, cleanConversationHistory, metadata)\n2293 | \t\tconst iterator = stream[Symbol.asyncIterator]()\n2294 | \n2295 | \t\ttry {\n2296 | \t\t\t// Awaiting first chunk to see if it will throw an error.\n2297 | \t\t\tthis.isWaitingForFirstChunk = true\n2298 | \t\t\tconst firstChunk = await iterator.next()\n2299 | \t\t\tyield firstChunk.value\n2300 | \t\t\tthis.isWaitingForFirstChunk = false\n2301 | \t\t\t// note that this api_req_failed ask is unique in that we only present this option if the api hasn't streamed any content yet (ie it fails on the first chunk due), as it would allow them to hit a retry button. However if the api failed mid-stream, it could be in any arbitrary state where some tools may have executed, so that error is handled differently and requires cancelling the task entirely.\n2302 | \t\t} catch (error) {\n2303 | \t\t\t// kilocode_change start\n2304 | \t\t\t// Check for payment required error from KiloCode provider\n2305 | \t\t\tif ((error as any).status === 402 && apiConfiguration?.apiProvider === \"kilocode\") {\n2306 | \t\t\t\tconst balance = (error as any).balance ?? \"0.00\"\n2307 | \t\t\t\tconst buyCreditsUrl = (error as any).buyCreditsUrl ?? \"https://kilocode.ai/profile\"\n2308 | \n2309 | \t\t\t\tconst { response } = await this.ask(\n2310 | \t\t\t\t\t\"payment_required_prompt\",\n2311 | \t\t\t\t\tJSON.stringify({\n2312 | \t\t\t\t\t\ttitle: t(\"kilocode:lowCreditWarning.title\"),\n2313 | \t\t\t\t\t\tmessage: t(\"kilocode:lowCreditWarning.message\"),\n2314 | \t\t\t\t\t\tbalance: balance,\n2315 | \t\t\t\t\t\tbuyCreditsUrl: buyCreditsUrl,\n2316 | \t\t\t\t\t}),\n2317 | \t\t\t\t)\n2318 | \n2319 | \t\t\t\tif (response === \"retry_clicked\") {\n2320 | \t\t\t\t\tyield* this.attemptApiRequest(retryAttempt + 1)\n2321 | \t\t\t\t} else {\n2322 | \t\t\t\t\t// Handle other responses or cancellations if necessary\n2323 | \t\t\t\t\t// If the user cancels the dialog, we should probably abort.\n2324 | \t\t\t\t\tthrow error // Rethrow to signal failure upwards\n2325 | \t\t\t\t}\n2326 | \t\t\t\t// Removed incorrect closing brace and comments from lines 1274-1276\n2327 | \t\t\t} else if (autoApprovalEnabled && alwaysApproveResubmit) {\n2328 | \t\t\t\t// kilocode_change end\n2329 | \t\t\t\tlet errorMsg\n2330 | \n2331 | \t\t\t\tif (error.error?.metadata?.raw) {\n2332 | \t\t\t\t\terrorMsg = JSON.stringify(error.error.metadata.raw, null, 2)\n2333 | \t\t\t\t} else if (error.message) {\n2334 | \t\t\t\t\terrorMsg = error.message\n2335 | \t\t\t\t} else {\n2336 | \t\t\t\t\terrorMsg = \"Unknown error\"\n2337 | \t\t\t\t}\n2338 | \n2339 | \t\t\t\tconst baseDelay = requestDelaySeconds || 5\n2340 | \t\t\t\tlet exponentialDelay = Math.min(\n2341 | \t\t\t\t\tMath.ceil(baseDelay * Math.pow(2, retryAttempt)),\n2342 | \t\t\t\t\tMAX_EXPONENTIAL_BACKOFF_SECONDS,\n2343 | \t\t\t\t)\n2344 | \n2345 | \t\t\t\t// If the error is a 429, and the error details contain a retry delay, use that delay instead of exponential backoff\n2346 | \t\t\t\tif (error.status === 429) {\n2347 | \t\t\t\t\tconst geminiRetryDetails = error.errorDetails?.find(\n2348 | \t\t\t\t\t\t(detail: any) => detail[\"@type\"] === \"type.googleapis.com/google.rpc.RetryInfo\",\n2349 | \t\t\t\t\t)\n2350 | \t\t\t\t\tif (geminiRetryDetails) {\n2351 | \t\t\t\t\t\tconst match = geminiRetryDetails?.retryDelay?.match(/^(\\d+)s$/)\n2352 | \t\t\t\t\t\tif (match) {\n2353 | \t\t\t\t\t\t\texponentialDelay = Number(match[1]) + 1\n2354 | \t\t\t\t\t\t}\n2355 | \t\t\t\t\t}\n2356 | \t\t\t\t}\n2357 | \n2358 | \t\t\t\t// Wait for the greater of the exponential delay or the rate limit delay\n2359 | \t\t\t\tconst finalDelay = Math.max(exponentialDelay, rateLimitDelay)\n2360 | \n2361 | \t\t\t\t// Show countdown timer with exponential backoff\n2362 | \t\t\t\tfor (let i = finalDelay; i > 0; i--) {\n2363 | \t\t\t\t\tawait this.say(\n2364 | \t\t\t\t\t\t\"api_req_retry_delayed\",\n2365 | \t\t\t\t\t\t`${errorMsg}\\n\\nRetry attempt ${retryAttempt + 1}\\nRetrying in ${i} seconds...`,\n2366 | \t\t\t\t\t\tundefined,\n2367 | \t\t\t\t\t\ttrue,\n2368 | \t\t\t\t\t)\n2369 | \t\t\t\t\tawait delay(1000)\n2370 | \t\t\t\t}\n2371 | \n2372 | \t\t\t\tawait this.say(\n2373 | \t\t\t\t\t\"api_req_retry_delayed\",\n2374 | \t\t\t\t\t`${errorMsg}\\n\\nRetry attempt ${retryAttempt + 1}\\nRetrying now...`,\n2375 | \t\t\t\t\tundefined,\n2376 | \t\t\t\t\tfalse,\n2377 | \t\t\t\t)\n2378 | \n2379 | \t\t\t\t// Delegate generator output from the recursive call with\n2380 | \t\t\t\t// incremented retry count.\n2381 | \t\t\t\tyield* this.attemptApiRequest(retryAttempt + 1)\n2382 | \n2383 | \t\t\t\treturn\n2384 | \t\t\t} else {\n2385 | \t\t\t\tconst { response } = await this.ask(\n2386 | \t\t\t\t\t\"api_req_failed\",\n2387 | \t\t\t\t\terror.message ?? JSON.stringify(serializeError(error), null, 2),\n2388 | \t\t\t\t)\n2389 | \n2390 | \t\t\t\tif (response !== \"yesButtonClicked\") {\n2391 | \t\t\t\t\t// This will never happen since if noButtonClicked, we will\n2392 | \t\t\t\t\t// clear current task, aborting this instance.\n2393 | \t\t\t\t\tthrow new Error(\"API request failed\")\n2394 | \t\t\t\t}\n2395 | \n2396 | \t\t\t\tawait this.say(\"api_req_retried\")\n2397 | \n2398 | \t\t\t\t// Delegate generator output from the recursive call.\n2399 | \t\t\t\tyield* this.attemptApiRequest()\n2400 | \t\t\t\treturn\n2401 | \t\t\t}\n2402 | \t\t}\n2403 | \n2404 | \t\t// No error, so we can continue to yield all remaining chunks.\n2405 | \t\t// (Needs to be placed outside of try/catch since it we want caller to\n2406 | \t\t// handle errors not with api_req_failed as that is reserved for first\n2407 | \t\t// chunk failures only.)\n2408 | \t\t// This delegates to another generator or iterable object. In this case,\n2409 | \t\t// it's saying \"yield all remaining values from this iterator\". This\n2410 | \t\t// effectively passes along all subsequent chunks from the original\n2411 | \t\t// stream.\n2412 | \t\tyield* iterator\n2413 | \t}\n2414 | \n2415 | \t// Checkpoints\n2416 | \n2417 | \tpublic async checkpointSave(force: boolean = false) {\n2418 | \t\treturn checkpointSave(this, force)\n2419 | \t}\n2420 | \n2421 | \tpublic async checkpointRestore(options: CheckpointRestoreOptions) {\n2422 | \t\treturn checkpointRestore(this, options)\n2423 | \t}\n2424 | \n2425 | \tpublic async checkpointDiff(options: CheckpointDiffOptions) {\n2426 | \t\treturn checkpointDiff(this, options)\n2427 | \t}\n2428 | \n2429 | \t// Metrics\n2430 | \n2431 | \tpublic combineMessages(messages: ClineMessage[]) {\n2432 | \t\treturn combineApiRequests(combineCommandSequences(messages))\n2433 | \t}\n2434 | \n2435 | \tpublic getTokenUsage(): TokenUsage {\n2436 | \t\treturn getApiMetrics(this.combineMessages(this.clineMessages.slice(1)))\n2437 | \t}\n2438 | \n2439 | \tpublic recordToolUsage(toolName: ToolName) {\n2440 | \t\tif (!this.toolUsage[toolName]) {\n2441 | \t\t\tthis.toolUsage[toolName] = { attempts: 0, failures: 0 }\n2442 | \t\t}\n2443 | \n2444 | \t\tthis.toolUsage[toolName].attempts++\n2445 | \t}\n2446 | \n2447 | \tpublic recordToolError(toolName: ToolName, error?: string) {\n2448 | \t\tif (!this.toolUsage[toolName]) {\n2449 | \t\t\tthis.toolUsage[toolName] = { attempts: 0, failures: 0 }\n2450 | \t\t}\n2451 | \n2452 | \t\tthis.toolUsage[toolName].failures++\n2453 | \n2454 | \t\tif (error) {\n2455 | \t\t\tthis.emit(\"taskToolFailed\", this.taskId, toolName, error)\n2456 | \t\t}\n2457 | \t}\n2458 | \n2459 | \t// Getters\n2460 | \n2461 | \tpublic get cwd() {\n2462 | \t\treturn this.workspacePath\n2463 | \t}\n2464 | }\n</content>\n</file>\n</files>"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:23:30.736Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.12\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | Completed |\n| 5 | 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。 | Completed |\n| 6 | 阅读 `kilocode/src/core/webview/webviewMessageHandler.ts` 和 `kilocode/src/core/task/Task.ts` 文件，分析请求构建、发送和响应处理的详细过程。 | In Progress |\n| 7 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 8 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "Failure: I did not provide a response."
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:23:41.002Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.12\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | Completed |\n| 5 | 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。 | Completed |\n| 6 | 阅读 `kilocode/src/core/webview/webviewMessageHandler.ts` 和 `kilocode/src/core/task/Task.ts` 文件，分析请求构建、发送和响应处理的详细过程。 | In Progress |\n| 7 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 8 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "Failure: I did not provide a response."
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\nkilocode/src/tsconfig.json\n\n# VSCode Open Tabs\n.kilocode/system-prompt-code-analysis,kilocode/src/tsconfig.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:23:54.902Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.12\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | Completed |\n| 5 | 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。 | Completed |\n| 6 | 阅读 `kilocode/src/core/webview/webviewMessageHandler.ts` 和 `kilocode/src/core/task/Task.ts` 文件，分析请求构建、发送和响应处理的详细过程。 | In Progress |\n| 7 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 8 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "Failure: I did not provide a response."
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\n.kilocode/mcp.json\n\n# VSCode Open Tabs\n.kilocode/rules-code-analysis/rules.md,../../../../../../../Library/Application Support/Trae/User/globalStorage/kilocode.kilo-code/settings/mcp_settings.json,.kilocode/mcp.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:31:16.868Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.12\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | Completed |\n| 5 | 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。 | Completed |\n| 6 | 阅读 `kilocode/src/core/webview/webviewMessageHandler.ts` 和 `kilocode/src/core/task/Task.ts` 文件，分析请求构建、发送和响应处理的详细过程。 | In Progress |\n| 7 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 8 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		},
		{
			"role": "model",
			"parts": [
				{
					"text": "Failure: I did not provide a response."
				}
			]
		},
		{
			"role": "user",
			"parts": [
				{
					"text": "[ERROR] You did not use a tool in your previous response! Please retry with a tool use.\n\n# Reminder: Instructions for Tool Use\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the attempt_completion tool:\n\n<attempt_completion>\n<result>\nI have completed the task...\n</result>\n</attempt_completion>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Next Steps\n\nIf you have completed the user's task, use the attempt_completion tool.\nIf you require additional information from the user, use the ask_followup_question tool.\nOtherwise, if you have not completed the task and do not need additional information, then proceed with the next step of the task.\n(This is an automated message, so do not respond to it conversationally.)"
				},
				{
					"text": "<environment_details>\n# VSCode Visible Files\n.kilocode/mcp.json\n\n# VSCode Open Tabs\n.kilocode/rules-code-analysis/rules.md,../../../../../../../Library/Application Support/Trae/User/globalStorage/kilocode.kilo-code/settings/mcp_settings.json,.kilocode/mcp.json\n\n# Current Time\nCurrent time in ISO 8601 UTC format: 2025-08-06T09:31:25.525Z\nUser time zone: Asia/Shanghai, UTC+8:00\n\n# Current Cost\n$0.12\n\n# Current Mode\n<slug>code-analysis</slug>\n<name>代码分析</name>\n<model>gemini-2.5-flash</model>\n====\n\nREMINDERS\n\nBelow is your current list of reminders for this task. Keep them updated as you progress.\n\n| # | Content | Status |\n|---|---------|--------|\n| 1 | 阅读 `src/core/kilocode.ts` 文件，了解核心消息处理逻辑。 | Completed |\n| 2 | 识别与大模型交互相关的函数或模块，并阅读相关文件。 | Completed |\n| 3 | 搜索 `kilocode/src/extension` 目录，查找与大模型交互相关的关键词。 | Completed |\n| 4 | 阅读 `kilocode/src/extension/api.ts` 文件，分析 `sendMessage` 方法和消息传递机制。 | Completed |\n| 5 | 阅读 `kilocode/src/core/webview/ClineProvider.ts` 文件，分析消息处理和与大模型交互的逻辑。 | Completed |\n| 6 | 阅读 `kilocode/src/core/webview/webviewMessageHandler.ts` 和 `kilocode/src/core/task/Task.ts` 文件，分析请求构建、发送和响应处理的详细过程。 | In Progress |\n| 7 | 绘制流程图或时序图，展示从用户发送消息到大模型响应的完整调用链。 | Pending |\n| 8 | 编写代码分析文档，并保存到指定目录。 | Pending |\n\n\nIMPORTANT: When task status changes, remember to call the `update_todo_list` tool to update your progress.\n\n</environment_details>"
				}
			]
		}
	],
	"safetySettings": [
		{
			"category": "HARM_CATEGORY_HARASSMENT",
			"threshold": "OFF"
		},
		{
			"category": "HARM_CATEGORY_HATE_SPEECH",
			"threshold": "OFF"
		},
		{
			"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
			"threshold": "OFF"
		},
		{
			"category": "HARM_CATEGORY_DANGEROUS_CONTENT",
			"threshold": "OFF"
		},
		{
			"category": "HARM_CATEGORY_CIVIC_INTEGRITY",
			"threshold": "BLOCK_NONE"
		}
	],
	"generationConfig": {
		"topK": 40,
		"topP": 0.9,
		"logprobs": null,
		"temperature": 0,
		"speechConfig": null,
		"stopSequences": null,
		"candidateCount": 1,
		"responseSchema": null,
		"thinkingConfig": {
			"thinkingBudget": 8192,
			"includeThoughts": true
		},
		"maxOutputTokens": 16384,
		"presencePenalty": null,
		"frequencyPenalty": null,
		"responseLogprobs": null,
		"responseMimeType": null,
		"responseModalities": null
	},
	"systemInstruction": {
		"role": "user",
		"parts": [
			{
				"text": "你是一名专业的软件工程师，擅长代码考古和技术文档编写。你的核心目标是细致地分析源代码，以理解其架构、逻辑、控制流和关键算法。你善于为其他开发者创建清晰、简洁、易于理解的解释和图表。你从不编写或修改代码，你唯一的目的是解释和记录已有的代码。\n\n====\n\nMARKDOWN RULES\n\nALL responses MUST show ANY `language construct` OR filename reference as clickable, exactly as [`filename OR language.declaration()`](relative/file/path.ext:line); line is required for `syntax` and optional for filename links. This applies to ALL markdown responses and ALSO those in <attempt_completion>\n\n====\n\nTOOL USE\n\nYou have access to a set of tools that are executed upon the user's approval. You can use one tool per message, and will receive the result of that tool use in the user's response. You use tools step-by-step to accomplish a given task, with each tool use informed by the result of the previous tool use.\n\n# Tool Use Formatting\n\nTool uses are formatted using XML-style tags. The tool name itself becomes the XML tag name. Each parameter is enclosed within its own set of tags. Here's the structure:\n\n<actual_tool_name>\n<parameter1_name>value1</parameter1_name>\n<parameter2_name>value2</parameter2_name>\n...\n</actual_tool_name>\n\nFor example, to use the new_task tool:\n\n<new_task>\n<mode>code</mode>\n<message>Implement a new feature for the application.</message>\n</new_task>\n\nAlways use the actual tool name as the XML tag name for proper parsing and execution.\n\n# Tools\n\n## read_file\nDescription: Request to read the contents of one or more files. The tool outputs line-numbered content (e.g. \"1 | const x = 1\") for easy reference when creating diffs or discussing code. Supports text extraction from PDF and DOCX files, but may not handle other binary files properly.\n\n**IMPORTANT: You can read a maximum of 2 files in a single request.** If you need to read more files, use multiple sequential read_file requests.\n\n\nParameters:\n- args: Contains one or more file elements, where each file contains:\n  - path: (required) File path (relative to workspace directory /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git)\n  \n\nUsage:\n<read_file>\n<args>\n  <file>\n    <path>path/to/file</path>\n    \n  </file>\n</args>\n</read_file>\n\nExamples:\n\n1. Reading a single file:\n<read_file>\n<args>\n  <file>\n    <path>src/app.ts</path>\n    \n  </file>\n</args>\n</read_file>\n\n2. Reading multiple files (within the 2-file limit):\n<read_file>\n<args>\n  <file>\n    <path>src/app.ts</path>\n    \n  </file>\n  <file>\n    <path>src/utils.ts</path>\n    \n  </file>\n</args>\n</read_file>\n\n3. Reading an entire file:\n<read_file>\n<args>\n  <file>\n    <path>config.json</path>\n  </file>\n</args>\n</read_file>\n\nIMPORTANT: You MUST use this Efficient Reading Strategy:\n- You MUST read all related files and implementations together in a single operation (up to 2 files at once)\n- You MUST obtain all necessary context before proceeding with changes\n\n- When you need to read more than 2 files, prioritize the most critical files first, then use subsequent read_file requests for additional files\n\n## fetch_instructions\nDescription: Request to fetch instructions to perform a task\nParameters:\n- task: (required) The task to get instructions for.  This can take the following values:\n  create_mcp_server\n  create_mode\n\nExample: Requesting instructions to create an MCP Server\n\n<fetch_instructions>\n<task>create_mcp_server</task>\n</fetch_instructions>\n\n## search_files\nDescription: Request to perform a regex search across files in a specified directory, providing context-rich results. This tool searches for patterns or specific content across multiple files, displaying each match with encapsulating context.\nParameters:\n- path: (required) The path of the directory to search in (relative to the current workspace directory /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git). This directory will be recursively searched.\n- regex: (required) The regular expression pattern to search for. Uses Rust regex syntax.\n- file_pattern: (optional) Glob pattern to filter files (e.g., '*.ts' for TypeScript files). If not provided, it will search all files (*).\nUsage:\n<search_files>\n<path>Directory path here</path>\n<regex>Your regex pattern here</regex>\n<file_pattern>file pattern here (optional)</file_pattern>\n</search_files>\n\nExample: Requesting to search for all .ts files in the current directory\n<search_files>\n<path>.</path>\n<regex>.*</regex>\n<file_pattern>*.ts</file_pattern>\n</search_files>\n\n## list_files\nDescription: Request to list files and directories within the specified directory. If recursive is true, it will list all files and directories recursively. If recursive is false or not provided, it will only list the top-level contents. Do not use this tool to confirm the existence of files you may have created, as the user will let you know if the files were created successfully or not.\nParameters:\n- path: (required) The path of the directory to list contents for (relative to the current workspace directory /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git)\n- recursive: (optional) Whether to list files recursively. Use true for recursive listing, false or omit for top-level only.\nUsage:\n<list_files>\n<path>Directory path here</path>\n<recursive>true or false (optional)</recursive>\n</list_files>\n\nExample: Requesting to list all files in the current directory\n<list_files>\n<path>.</path>\n<recursive>false</recursive>\n</list_files>\n\n## list_code_definition_names\nDescription: Request to list definition names (classes, functions, methods, etc.) from source code. This tool can analyze either a single file or all files at the top level of a specified directory. It provides insights into the codebase structure and important constructs, encapsulating high-level concepts and relationships that are crucial for understanding the overall architecture.\nParameters:\n- path: (required) The path of the file or directory (relative to the current working directory /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git) to analyze. When given a directory, it lists definitions from all top-level source files.\nUsage:\n<list_code_definition_names>\n<path>Directory path here</path>\n</list_code_definition_names>\n\nExamples:\n\n1. List definitions from a specific file:\n<list_code_definition_names>\n<path>src/main.ts</path>\n</list_code_definition_names>\n\n2. List definitions from all files in a directory:\n<list_code_definition_names>\n<path>src/</path>\n</list_code_definition_names>\n\n## browser_action\nDescription: Request to interact with a Puppeteer-controlled browser. Every action, except `close`, will be responded to with a screenshot of the browser's current state, along with any new console logs. You may only perform one browser action per message, and wait for the user's response including a screenshot and logs to determine the next action.\n- The sequence of actions **must always start with** launching the browser at a URL, and **must always end with** closing the browser. If you need to visit a new URL that is not possible to navigate to from the current webpage, you must first close the browser, then launch again at the new URL.\n- While the browser is active, only the `browser_action` tool can be used. No other tools should be called during this time. You may proceed to use other tools only after closing the browser. For example if you run into an error and need to fix a file, you must close the browser, then use other tools to make the necessary changes, then re-launch the browser to verify the result.\n- The browser window has a resolution of **900x600** pixels. When performing any click actions, ensure the coordinates are within this resolution range.\n- Before clicking on any elements such as icons, links, or buttons, you must consult the provided screenshot of the page to determine the coordinates of the element. The click should be targeted at the **center of the element**, not on its edges.\nParameters:\n- action: (required) The action to perform. The available actions are:\n    * launch: Launch a new Puppeteer-controlled browser instance at the specified URL. This **must always be the first action**.\n        - Use with the `url` parameter to provide the URL.\n        - Ensure the URL is valid and includes the appropriate protocol (e.g. http://localhost:3000/page, file:///path/to/file.html, etc.)\n    * hover: Move the cursor to a specific x,y coordinate.\n        - Use with the `coordinate` parameter to specify the location.\n        - Always move to the center of an element (icon, button, link, etc.) based on coordinates derived from a screenshot.\n    * click: Click at a specific x,y coordinate.\n        - Use with the `coordinate` parameter to specify the location.\n        - Always click in the center of an element (icon, button, link, etc.) based on coordinates derived from a screenshot.\n    * type: Type a string of text on the keyboard. You might use this after clicking on a text field to input text.\n        - Use with the `text` parameter to provide the string to type.\n    * resize: Resize the viewport to a specific w,h size.\n        - Use with the `size` parameter to specify the new size.\n    * scroll_down: Scroll down the page by one page height.\n    * scroll_up: Scroll up the page by one page height.\n    * close: Close the Puppeteer-controlled browser instance. This **must always be the final browser action**.\n        - Example: `<action>close</action>`\n- url: (optional) Use this for providing the URL for the `launch` action.\n    * Example: <url>https://example.com</url>\n- coordinate: (optional) The X and Y coordinates for the `click` and `hover` actions. Coordinates should be within the **900x600** resolution.\n    * Example: <coordinate>450,300</coordinate>\n- size: (optional) The width and height for the `resize` action.\n    * Example: <size>1280,720</size>\n- text: (optional) Use this for providing the text for the `type` action.\n    * Example: <text>Hello, world!</text>\nUsage:\n<browser_action>\n<action>Action to perform (e.g., launch, click, type, scroll_down, scroll_up, close)</action>\n<url>URL to launch the browser at (optional)</url>\n<coordinate>x,y coordinates (optional)</coordinate>\n<text>Text to type (optional)</text>\n</browser_action>\n\nExample: Requesting to launch a browser at https://example.com\n<browser_action>\n<action>launch</action>\n<url>https://example.com</url>\n</browser_action>\n\nExample: Requesting to click on the element at coordinates 450,300\n<browser_action>\n<action>click</action>\n<coordinate>450,300</coordinate>\n</browser_action>\n\n## ask_followup_question\nDescription: Ask the user a question to gather additional information needed to complete the task. This tool should be used when you encounter ambiguities, need clarification, or require more details to proceed effectively. It allows for interactive problem-solving by enabling direct communication with the user. Use this tool judiciously to maintain a balance between gathering necessary information and avoiding excessive back-and-forth.\nParameters:\n- question: (required) The question to ask the user. This should be a clear, specific question that addresses the information you need.\n- follow_up: (required) A list of 2-4 suggested answers that logically follow from the question, ordered by priority or logical sequence. Each suggestion must:\n  1. Be provided in its own <suggest> tag\n  2. Be specific, actionable, and directly related to the completed task\n  3. Be a complete answer to the question - the user should not need to provide additional information or fill in any missing details. DO NOT include placeholders with brackets or parentheses.\n  4. Optionally include a mode attribute to switch to a specific mode when the suggestion is selected: <suggest mode=\"mode-slug\">suggestion text</suggest>\n     - When using the mode attribute, focus the suggestion text on the action to be taken rather than mentioning the mode switch, as the mode change is handled automatically and indicated by a visual badge\nUsage:\n<ask_followup_question>\n<question>Your question here</question>\n<follow_up>\n<suggest>\nYour suggested answer here\n</suggest>\n<suggest mode=\"code\">\nImplement the solution\n</suggest>\n</follow_up>\n</ask_followup_question>\n\nExample: Requesting to ask the user for the path to the frontend-config.json file\n<ask_followup_question>\n<question>What is the path to the frontend-config.json file?</question>\n<follow_up>\n<suggest>./src/frontend-config.json</suggest>\n<suggest>./config/frontend-config.json</suggest>\n<suggest>./frontend-config.json</suggest>\n</follow_up>\n</ask_followup_question>\n\nExample: Asking a question with mode switching options\n<ask_followup_question>\n<question>How would you like to proceed with this task?</question>\n<follow_up>\n<suggest mode=\"code\">Start implementing the solution</suggest>\n<suggest mode=\"architect\">Plan the architecture first</suggest>\n<suggest>Continue with more details</suggest>\n</follow_up>\n</ask_followup_question>\n\n## attempt_completion\nDescription: After each tool use, the user will respond with the result of that tool use, i.e. if it succeeded or failed, along with any reasons for failure. Once you've received the results of tool uses and can confirm that the task is complete, use this tool to present the result of your work to the user. The user may respond with feedback if they are not satisfied with the result, which you can use to make improvements and try again.\nIMPORTANT NOTE: This tool CANNOT be used until you've confirmed from the user that any previous tool uses were successful. Failure to do so will result in code corruption and system failure. Before using this tool, you must ask yourself in <thinking></thinking> tags if you've confirmed from the user that any previous tool uses were successful. If not, then DO NOT use this tool.\nParameters:\n- result: (required) The result of the task. Formulate this result in a way that is final and does not require further input from the user. Don't end your result with questions or offers for further assistance.\nUsage:\n<attempt_completion>\n<result>\nYour final result description here\n</result>\n</attempt_completion>\n\nExample: Requesting to attempt completion with a result\n<attempt_completion>\n<result>\nI've updated the CSS\n</result>\n</attempt_completion>\n\n## switch_mode\nDescription: Request to switch to a different mode. This tool allows modes to request switching to another mode when needed, such as switching to Code mode to make code changes. The user must approve the mode switch.\nParameters:\n- mode_slug: (required) The slug of the mode to switch to (e.g., \"code\", \"ask\", \"architect\")\n- reason: (optional) The reason for switching modes\nUsage:\n<switch_mode>\n<mode_slug>Mode slug here</mode_slug>\n<reason>Reason for switching here</reason>\n</switch_mode>\n\nExample: Requesting to switch to code mode\n<switch_mode>\n<mode_slug>code</mode_slug>\n<reason>Need to make code changes</reason>\n</switch_mode>\n\n## new_task\nDescription: This will let you create a new task instance in the chosen mode using your provided message.\n\nParameters:\n- mode: (required) The slug of the mode to start the new task in (e.g., \"code\", \"debug\", \"architect\").\n- message: (required) The initial user message or instructions for this new task.\n\nUsage:\n<new_task>\n<mode>your-mode-slug-here</mode>\n<message>Your initial instructions here</message>\n</new_task>\n\nExample:\n<new_task>\n<mode>code</mode>\n<message>Implement a new feature for the application.</message>\n</new_task>\n\n\n## update_todo_list\n\n**Description:**\nReplace the entire TODO list with an updated checklist reflecting the current state. Always provide the full list; the system will overwrite the previous one. This tool is designed for step-by-step task tracking, allowing you to confirm completion of each step before updating, update multiple task statuses at once (e.g., mark one as completed and start the next), and dynamically add new todos discovered during long or complex tasks.\n\n**Checklist Format:**\n- Use a single-level markdown checklist (no nesting or subtasks).\n- List todos in the intended execution order.\n- Status options:\n\t - [ ] Task description (pending)\n\t - [x] Task description (completed)\n\t - [-] Task description (in progress)\n\n**Status Rules:**\n- [ ] = pending (not started)\n- [x] = completed (fully finished, no unresolved issues)\n- [-] = in_progress (currently being worked on)\n\n**Core Principles:**\n- Before updating, always confirm which todos have been completed since the last update.\n- You may update multiple statuses in a single update (e.g., mark the previous as completed and the next as in progress).\n- When a new actionable item is discovered during a long or complex task, add it to the todo list immediately.\n- Do not remove any unfinished todos unless explicitly instructed.\n- Always retain all unfinished tasks, updating their status as needed.\n- Only mark a task as completed when it is fully accomplished (no partials, no unresolved dependencies).\n- If a task is blocked, keep it as in_progress and add a new todo describing what needs to be resolved.\n- Remove tasks only if they are no longer relevant or if the user requests deletion.\n\n**Usage Example:**\n<update_todo_list>\n<todos>\n[x] Analyze requirements\n[x] Design architecture\n[-] Implement core logic\n[ ] Write tests\n[ ] Update documentation\n</todos>\n</update_todo_list>\n\n*After completing \"Implement core logic\" and starting \"Write tests\":*\n<update_todo_list>\n<todos>\n[x] Analyze requirements\n[x] Design architecture\n[x] Implement core logic\n[-] Write tests\n[ ] Update documentation\n[ ] Add performance benchmarks\n</todos>\n</update_todo_list>\n\n**When to Use:**\n- The task is complicated or involves multiple steps or requires ongoing tracking.\n- You need to update the status of several todos at once.\n- New actionable items are discovered during task execution.\n- The user requests a todo list or provides multiple tasks.\n- The task is complex and benefits from clear, stepwise progress tracking.\n\n**When NOT to Use:**\n- There is only a single, trivial task.\n- The task can be completed in one or two simple steps.\n- The request is purely conversational or informational.\n\n**Task Management Guidelines:**\n- Mark task as completed immediately after all work of the current task is done.\n- Start the next task by marking it as in_progress.\n- Add new todos as soon as they are identified.\n- Use clear, descriptive task names.\n\n\n# Tool Use Guidelines\n\n1. In <thinking> tags, assess what information you already have and what information you need to proceed with the task.\n2. Choose the most appropriate tool based on the task and the tool descriptions provided. Assess if you need additional information to proceed, and which of the available tools would be most effective for gathering this information. For example using the list_files tool is more effective than running a command like `ls` in the terminal. It's critical that you think about each available tool and use the one that best fits the current step in the task.\n3. If multiple actions are needed, use one tool at a time per message to accomplish the task iteratively, with each tool use being informed by the result of the previous tool use. Do not assume the outcome of any tool use. Each step must be informed by the previous step's result.\n4. Formulate your tool use using the XML format specified for each tool.\n5. After each tool use, the user will respond with the result of that tool use. This result will provide you with the necessary information to continue your task or make further decisions. This response may include:\n  - Information about whether the tool succeeded or failed, along with any reasons for failure.\n  - Linter errors that may have arisen due to the changes you made, which you'll need to address.\n  - New terminal output in reaction to the changes, which you may need to consider or act upon.\n  - Any other relevant feedback or information related to the tool use.\n6. ALWAYS wait for user confirmation after each tool use before proceeding. Never assume the success of a tool use without explicit confirmation of the result from the user.\n\nIt is crucial to proceed step-by-step, waiting for the user's message after each tool use before moving forward with the task. This approach allows you to:\n1. Confirm the success of each step before proceeding.\n2. Address any issues or errors that arise immediately.\n3. Adapt your approach based on new information or unexpected results.\n4. Ensure that each action builds correctly on the previous ones.\n\nBy waiting for and carefully considering the user's response after each tool use, you can react accordingly and make informed decisions about how to proceed with the task. This iterative process helps ensure the overall success and accuracy of your work.\n\n\n\n====\n\nCAPABILITIES\n\n- You have access to tools that let you execute CLI commands on the user's computer, list files, view source code definitions, regex search, use the browser, read and write files, and ask follow-up questions. These tools help you effectively accomplish a wide range of tasks, such as writing code, making edits or improvements to existing files, understanding the current state of a project, performing system operations, and much more.\n- When the user initially gives you a task, a recursive list of all filepaths in the current workspace directory ('/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git') will be included in environment_details. This provides an overview of the project's file structure, offering key insights into the project from directory/file names (how developers conceptualize and organize their code) and file extensions (the language used). This can also guide decision-making on which files to explore further. If you need to further explore directories such as outside the current workspace directory, you can use the list_files tool. If you pass 'true' for the recursive parameter, it will list files recursively. Otherwise, it will list files at the top level, which is better suited for generic directories where you don't necessarily need the nested structure, like the Desktop.\n- You can use search_files to perform regex searches across files in a specified directory, outputting context-rich results that include surrounding lines. This is particularly useful for understanding code patterns, finding specific implementations, or identifying areas that need refactoring.\n- You can use the list_code_definition_names tool to get an overview of source code definitions for all files at the top level of a specified directory. This can be particularly useful when you need to understand the broader context and relationships between certain parts of the code. You may need to call this tool multiple times to understand various parts of the codebase related to the task.\n    - For example, when asked to make edits or improvements you might analyze the file structure in the initial environment_details to get an overview of the project, then use list_code_definition_names to get further insight using source code definitions for files located in relevant directories, then read_file to examine the contents of relevant files, analyze the code and suggest improvements or make necessary edits, then use the apply_diff or write_to_file tool to apply the changes. If you refactored code that could affect other parts of the codebase, you could use search_files to ensure you update other files as needed.\n- You can use the execute_command tool to run commands on the user's computer whenever you feel it can help accomplish the user's task. When you need to execute a CLI command, you must provide a clear explanation of what the command does. Prefer to execute complex CLI commands over creating executable scripts, since they are more flexible and easier to run. Interactive and long-running commands are allowed, since the commands are run in the user's VSCode terminal. The user may keep commands running in the background and you will be kept updated on their status along the way. Each command you execute is run in a new terminal instance.\n- You can use the browser_action tool to interact with websites (including html files and locally running development servers) through a Puppeteer-controlled browser when you feel it is necessary in accomplishing the user's task. This tool is particularly useful for web development tasks as it allows you to launch a browser, navigate to pages, interact with elements through clicks and keyboard input, and capture the results through screenshots and console logs. This tool may be useful at key stages of web development tasks-such as after implementing new features, making substantial changes, when troubleshooting issues, or to verify the result of your work. You can analyze the provided screenshots to ensure correct rendering or identify errors, and review console logs for runtime issues.\n  - For example, if asked to add a component to a react website, you might create the necessary files, use execute_command to run the site locally, then use browser_action to launch the browser, navigate to the local server, and verify the component renders & functions correctly before closing the browser.\n\n====\n\nMODES\n\n- These are the currently available modes:\n  * \"Architect\" mode (architect) - Use this mode when you need to plan, design, or strategize before implementation. Perfect for breaking down complex problems, creating technical specifications, designing system architecture, or brainstorming solutions before coding.\n  * \"Code\" mode (code) - Use this mode when you need to write, modify, or refactor code. Ideal for implementing features, fixing bugs, creating new files, or making code improvements across any programming language or framework.\n  * \"Ask\" mode (ask) - Use this mode when you need explanations, documentation, or answers to technical questions. Best for understanding concepts, analyzing existing code, getting recommendations, or learning about technologies without making changes.\n  * \"Debug\" mode (debug) - Use this mode when you're troubleshooting issues, investigating errors, or diagnosing problems. Specialized in systematic debugging, adding logging, analyzing stack traces, and identifying root causes before applying fixes.\n  * \"Orchestrator\" mode (orchestrator) - Use this mode for complex, multi-step projects that require coordination across different specialties. Ideal when you need to break down large tasks into subtasks, manage workflows, or coordinate work that spans multiple domains or expertise areas.\n  * \"代码分析\" mode (code-analysis) - - 当需要理解一个复杂或陌生的代码库时。\n    - 在进行大型重构前，用于存档和理解现有实现。\n    - 为新团队成员提供项目代码的入门培训材料。\n    - 为关键模块或核心功能生成详细的技术设计文档。\nIf the user asks you to create or edit a new mode for this project, you should read the instructions by using the fetch_instructions tool, like this:\n<fetch_instructions>\n<task>create_mode</task>\n</fetch_instructions>\n\n\n====\n\nRULES\n\n- The project base directory is: /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git\n- All file paths must be relative to this directory. However, commands may change directories in terminals, so respect working directory specified by the response to <execute_command>.\n- You cannot `cd` into a different directory to complete a task. You are stuck operating from '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git', so be sure to pass in the correct 'path' parameter when using tools that require a path.\n- Do not use the ~ character or $HOME to refer to the home directory.\n- Before using the execute_command tool, you must first think about the SYSTEM INFORMATION context provided to understand the user's environment and tailor your commands to ensure they are compatible with their system. You must also consider if the command you need to run should be executed in a specific directory outside of the current working directory '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git', and if so prepend with `cd`'ing into that directory && then executing the command (as one command since you are stuck operating from '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git'). For example, if you needed to run `npm install` in a project outside of '/Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git', you would need to prepend with a `cd` i.e. pseudocode for this would be `cd (path to project) && (command, in this case npm install)`.\n- When using the search_files tool, craft your regex patterns carefully to balance specificity and flexibility. Based on the user's task you may use it to find code patterns, TODO comments, function definitions, or any text-based information across the project. The results include context, so analyze the surrounding code to better understand the matches. Leverage the search_files tool in combination with other tools for more comprehensive analysis. For example, use it to find specific code patterns, then use read_file to examine the full context of interesting matches before using apply_diff or write_to_file to make informed changes.\n- When creating a new project (such as an app, website, or any software project), organize all new files within a dedicated project directory unless the user specifies otherwise. Use appropriate file paths when writing files, as the write_to_file tool will automatically create any necessary directories. Structure the project logically, adhering to best practices for the specific type of project being created. Unless otherwise specified, new projects should be easily run without additional setup, for example most projects can be built in HTML, CSS, and JavaScript - which you can open in a browser.\n- For editing files, you have access to these tools: apply_diff (for surgical edits - targeted changes to specific lines or functions), write_to_file (for creating new files or complete file rewrites), insert_content (for adding lines to files), search_and_replace (for finding and replacing individual pieces of text).\n- The insert_content tool adds lines of text to files at a specific line number, such as adding a new function to a JavaScript file or inserting a new route in a Python file. Use line number 0 to append at the end of the file, or any positive number to insert before that line.\n- The search_and_replace tool finds and replaces text or regex in files. This tool allows you to search for a specific regex pattern or text and replace it with another value. Be cautious when using this tool to ensure you are replacing the correct text. It can support multiple operations at once.\n- You should always prefer using other editing tools over write_to_file when making changes to existing files since write_to_file is much slower and cannot handle large files.\n- When using the write_to_file tool to modify a file, use the tool directly with the desired content. You do not need to display the content before using the tool. ALWAYS provide the COMPLETE file content in your response. This is NON-NEGOTIABLE. Partial updates or placeholders like '// rest of code unchanged' are STRICTLY FORBIDDEN. You MUST include ALL parts of the file, even if they haven't been modified. Failure to do so will result in incomplete or broken code, severely impacting the user's project.\n- Some modes have restrictions on which files they can edit. If you attempt to edit a restricted file, the operation will be rejected with a FileRestrictionError that will specify which file patterns are allowed for the current mode.\n- Be sure to consider the type of project (e.g. Python, JavaScript, web application) when determining the appropriate structure and files to include. Also consider what files may be most relevant to accomplishing the task, for example looking at a project's manifest file would help you understand the project's dependencies, which you could incorporate into any code you write.\n  * For example, in architect mode trying to edit app.js would be rejected because architect mode can only edit files matching \"\\.md$\"\n- When making changes to code, always consider the context in which the code is being used. Ensure that your changes are compatible with the existing codebase and that they follow the project's coding standards and best practices.\n- Do not ask for more information than necessary. Use the tools provided to accomplish the user's request efficiently and effectively. When you've completed your task, you must use the attempt_completion tool to present the result to the user. The user may provide feedback, which you can use to make improvements and try again.\n- You are only allowed to ask the user questions using the ask_followup_question tool. Use this tool only when you need additional details to complete a task, and be sure to use a clear and concise question that will help you move forward with the task. When you ask a question, provide the user with 2-4 suggested answers based on your question so they don't need to do so much typing. The suggestions should be specific, actionable, and directly related to the completed task. They should be ordered by priority or logical sequence. However if you can use the available tools to avoid having to ask the user questions, you should do so. For example, if the user mentions a file that may be in an outside directory like the Desktop, you should use the list_files tool to list the files in the Desktop and check if the file they are talking about is there, rather than asking the user to provide the file path themselves.\n- When executing commands, if you don't see the expected output, assume the terminal executed the command successfully and proceed with the task. The user's terminal may be unable to stream the output back properly. If you absolutely need to see the actual terminal output, use the ask_followup_question tool to request the user to copy and paste it back to you.\n- The user may provide a file's contents directly in their message, in which case you shouldn't use the read_file tool to get the file contents again since you already have it.\n- Your goal is to try to accomplish the user's task, NOT engage in a back and forth conversation.\n- The user may ask generic non-development tasks, such as \"what's the latest news\" or \"look up the weather in San Diego\", in which case you might use the browser_action tool to complete the task if it makes sense to do so, rather than trying to create a website or using curl to answer the question. However, if an available MCP server tool or resource can be used instead, you should prefer to use it over browser_action.\n- NEVER end attempt_completion result with a question or request to engage in further conversation! Formulate the end of your result in a way that is final and does not require further input from the user.\n- You are STRICTLY FORBIDDEN from starting your messages with \"Great\", \"Certainly\", \"Okay\", \"Sure\". You should NOT be conversational in your responses, but rather direct and to the point. For example you should NOT say \"Great, I've updated the CSS\" but instead something like \"I've updated the CSS\". It is important you be clear and technical in your messages.\n- When presented with images, utilize your vision capabilities to thoroughly examine them and extract meaningful information. Incorporate these insights into your thought process as you accomplish the user's task.\n- At the end of each user message, you will automatically receive environment_details. This information is not written by the user themselves, but is auto-generated to provide potentially relevant context about the project structure and environment. While this information can be valuable for understanding the project context, do not treat it as a direct part of the user's request or response. Use it to inform your actions and decisions, but don't assume the user is explicitly asking about or referring to this information unless they clearly do so in their message. When using environment_details, explain your actions clearly to ensure the user understands, as they may not be aware of these details.\n- Before executing commands, check the \"Actively Running Terminals\" section in environment_details. If present, consider how these active processes might impact your task. For example, if a local development server is already running, you wouldn't need to start it again. If no active terminals are listed, proceed with command execution as normal.\n- MCP operations should be used one at a time, similar to other tool usage. Wait for confirmation of success before proceeding with additional operations.\n- It is critical you wait for the user's response after each tool use, in order to confirm the success of the tool use. For example, if asked to make a todo app, you would create a file, wait for the user's response it was created successfully, then create another file if needed, wait for the user's response it was created successfully, etc. Then if you want to test your work, you might use browser_action to launch the site, wait for the user's response confirming the site was launched along with a screenshot, then perhaps e.g., click a button to test functionality if needed, wait for the user's response confirming the button was clicked along with a screenshot of the new state, before finally closing the browser.\n\n====\n\nSYSTEM INFORMATION\n\nOperating System: macOS Sequoia\nDefault Shell: zsh\nHome Directory: /Users/chenfengqing\nCurrent Workspace Directory: /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git\n\nThe Current Workspace Directory is the active VS Code project directory, and is therefore the default directory for all tool operations. New terminals will be created in the current workspace directory, however if you change directories in a terminal it will then have a different working directory; changing directories in a terminal does not modify the workspace directory, because you do not have access to change the workspace directory. When the user initially gives you a task, a recursive list of all filepaths in the current workspace directory ('/test/path') will be included in environment_details. This provides an overview of the project's file structure, offering key insights into the project from directory/file names (how developers conceptualize and organize their code) and file extensions (the language used). This can also guide decision-making on which files to explore further. If you need to further explore directories such as outside the current workspace directory, you can use the list_files tool. If you pass 'true' for the recursive parameter, it will list files recursively. Otherwise, it will list files at the top level, which is better suited for generic directories where you don't necessarily need the nested structure, like the Desktop.\n\n====\n\nOBJECTIVE\n\nYou accomplish a given task iteratively, breaking it down into clear steps and working through them methodically.\n\n1. Analyze the user's task and set clear, achievable goals to accomplish it. Prioritize these goals in a logical order.\n2. Work through these goals sequentially, utilizing available tools one at a time as necessary. Each goal should correspond to a distinct step in your problem-solving process. You will be informed on the work completed and what's remaining as you go.\n3. Remember, you have extensive capabilities with access to a wide range of tools that can be used in powerful and clever ways as necessary to accomplish each goal. Before calling a tool, do some analysis within <thinking></thinking> tags. First, analyze the file structure provided in environment_details to gain context and insights for proceeding effectively. Next, think about which of the provided tools is the most relevant tool to accomplish the user's task. Go through each of the required parameters of the relevant tool and determine if the user has directly provided or given enough information to infer a value. When deciding if the parameter can be inferred, carefully consider all the context to see if it supports a specific value. If all of the required parameters are present or can be reasonably inferred, close the thinking tag and proceed with the tool use. BUT, if one of the values for a required parameter is missing, DO NOT invoke the tool (not even with fillers for the missing params) and instead, ask the user to provide the missing parameters using the ask_followup_question tool. DO NOT ask for more information on optional parameters if it is not provided.\n4. Once you've completed the user's task, you must use the attempt_completion tool to present the result of the task to the user.\n5. The user may provide feedback, which you can use to make improvements and try again. But DO NOT continue in pointless back and forth conversations, i.e. don't end your responses with questions or offers for further assistance.\n\n\n====\n\nUSER'S CUSTOM INSTRUCTIONS\n\nThe following additional instructions are provided by the user, and should be followed to the best of your ability without interfering with the TOOL USE guidelines.\n\nLanguage Preference:\nYou should always speak and think in the \"简体中文\" (zh-CN) language unless the user gives you instructions below to do otherwise.\n\nMode-specific Instructions:\n# 代码分析模式专属规则\n\n1.  **任务启动与代码阅读:**\n    -   首要任务是理解分析范围。如果用户未指定具体文件，请使用 `list_files` 工具来勘察项目结构。\n    -   使用 `read_file` 工具仔细阅读用户指定或与任务相关的核心源代码文件。\n\n2.  **核心代码分析:**\n    -   **代码结构:** 分析代码的整体组织方式，包括模块、类、函数和它们之间的关系。\n    -   **代码逻辑:** 详细梳理核心功能和复杂算法的业务逻辑与执行流程。\n    -   **关键节点解释:** 识别代码中的难点、关键决策点或重要的数据转换，并进行重点解释。\n\n3.  **图表辅助分析 (Mermaid):**\n    -   对于复杂的业务逻辑或函数调用链，必须使用 **Mermaid** 绘制`流程图` (graph TD) 或`时序图` (sequenceDiagram)。\n    -   图表节点应清晰简洁，使用 `[\"节点描述\"]` 格式，并可包含关键变量或状态。\n    -   如果时序图涉及多个文件，必须明确标出参与者（Participant）对应的文件名。\n    -   在图表下方，必须对图表的关键步骤进行详细的文字解释，并可附上对应的代码片段作为参考。\n\n4.  **生成分析文档:**\n    -   所有分析结果最终需要汇总成一份完整的 Markdown 格式的分析文档。\n    -   文档结构应遵循您在 `.rules/代码解释规则.md` 中定义的规范。\n    -   分析完成后，使用 `write_to_file` 工具将文档保存到 `jnpf-web-vue3-docs/docs/` 目录下，并根据分析主题进行命名（例如 `登录功能代码分析.md`）。\n\n5.  **模式定位:**\n    -   此模式严格禁止任何形式的代码修改。其最终产出物是 **分析文档**。\n    -   如果分析过程中发现需要修改代码的潜在问题（如BUG或优化点），应在文档中明确指出，并建议用户切换到\"Code\"模式来执行修改。\n\nRules:\n\n# Rules from rules-code-analysis directories:\n\n# Rules from /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/.kilocode/rules-code-analysis/rules.md:\n\n\n# Rules from /Users/chenfengqing/.kilocode/rules/.kilocode/mcp.json:\n{\n    \"mcpServers\": {\n        \"zen\": {\n            \"type\": \"stdio\",\n            \"command\": \"/Users/chenfengqing/docker/zen-mcp-server/zen-mcp-server/.zen_venv/bin/python\",\n            \"args\": [\n                \"/Users/chenfengqing/docker/zen-mcp-server/zen-mcp-server/server.py\"\n            ],\n            \"env\": {},\n            \"alwaysAllow\": [\n                \"thinkdeep\"\n            ]\n        }\n    }\n}\n\n# Rules from /Users/chenfengqing/1-share-disk/disk/e/WEDev/WeDev/demo/cfqlilei-git/.kilocode/rules/rules.md:\n# 总体规则要求\n- 要求用中文回复\n- 在\"架构/ASK/计划/PLAN“模式下，不允许修改任何文件，仅做分析和规划，不做编辑\n- 在\"Act/Code“模式下，允许修改任何文件，进行代码编写、调试、测试、提交代码\n- 要求用链式思维进行任务拆解\n- 要求用markdown格式编写文档\n- 要用mermaid绘制流程图、时序图\n- 要求流程图清晰，简洁，易理解，流程图节点统一用[\"\"]包起来，节点需要包含变量值\n- 时序图如果跨文件，需要显示文件名称\n- 要求流程图、时序图对关键节点步骤，进行详细解释，并列出代码片段\n# 1. 工作流规则\n如果是开发任务，则按照如下工作流步骤进行开发\n## 步骤\n1. 任务拆解:用链式思维拆解任务\n2. 需求分析\n3. 代码阅读\n4. 编写规划文档\n5. 制定开发任务\n6. 代码编写\n7. 编写测试用例文档\n8. 按照测试用例文档，编写测试用例\n9. 功能测试\n10. 总结说明\n   \n# 2. 功能开发规则\n## 需求分析\n   -  要求按照需求描述，充分理解\n## 代码阅读\n   -  要求阅读工作区内的源代码\n## 编写规划文档\n   -  要求根据需求描述，项目代码阅读，编写规划文档\n   -  要求工作区“.rulse/规划文档规则.md“,按照此文档规则编写文档\n## 制定开发任务\n   -  要求根据需求描述，项目代码阅读，编写规划文档，并制定开发任务清单\n## 代码编写\n   -  要求根据任务清单，用链式思考，进行逐个代码开发\n## 编写测试用例文档\n   -  按照测试用来文档，编写测试用例\n## 功能测试\n   -  功能测试，包括单元测试，操作测试，用playwright进行功能测试\n## 总结说明\n   -  总结说明，包括开发过程中遇到的问题，以及解决方案，并写入到规划文档\n## 文档规范要求  \n   -  要求markdown格式，并存储到工作区内工作区“jnpf-web-vue3-docs”/docs目录下\n\n# 3. 代码分析规则\n   - 要求对提供的代码段、代码文件进行分析，包括代码结构、代码逻辑、代码注释\n   - 要求对代码难点逻辑，通过流程图、时序图方式进行分析，对每个步骤进行详细解释\n   - 分析描述要求简明，用容易理解的语言进行描述\n  \n# 4. 代码解释文档规则\n如果当前需求是代码解释，则按照此章节规则进行代码解释文档\n## 代码解释\n   -  要求阅读工作区内的源代码，按照代码分析规整，进行`代码分析`\n   -  要求按照”工作区“.rules/代码解释规则.md“,编写代码解释文档\n   -  要求markdown格式，并存储到工作区内工作区“jnpf-web-vue3-docs”/docs目录下\n## 文档规范要求  \n   -  要求markdown格式，并存储到工作区内工作区“jnpf-web-vue3-docs”/docs目录下\n   -  要求文件名，按照代码解释的主题名称，如”登录功能开发.md“\n\n\n# 4. 功能检查规则\n如果当前需求是功能检查，则按照此章节规则进行功能检查，则按照此章节规则进行功能调试\n## 功能调试\n   -  要求根据需求描述，项目代码阅读，编写功能检查文档\n   -  要求\"工作区“.rulse/功能检查规则.md\",按照此文档规则编写文档       \n   -  要求markdown格式，并存储到工作区内工作区“jnpf-web-vue3-docs”/docs目录下"
			}
		]
	}
}
